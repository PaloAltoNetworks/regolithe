// Code generated by go-bindata.
// sources:
// templates/json-schema-resourcename.gotpl
// templates/json-schema-restname.gotpl
// templates/json-schema.gotpl
// templates/spec-md.gotpl
// templates/toc-md.gotpl
// specset/.gitignore
// specset/Gopkg.toml
// specset/specs/.regolithe-gen-cmd
// specset/specs/@identifiable.abs
// specset/specs/_api.info
// specset/specs/_parameter.mapping
// specset/specs/_type.mapping
// specset/specs/object.spec
// specset/specs/regolithe.ini
// specset/specs/root.spec
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJsonSchemaResourcenameGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xc1\x6a\xc3\x30\x10\x44\xef\xfe\x8a\x45\xf8\xe8\xe8\x03\x0c\x3d\xf4\xde\xf6\x50\x43\xef\x8a\xbc\x2e\x1b\x1c\x4b\xec\x6e\xa0\x41\xe8\xdf\x8b\x5d\x25\xb5\x5a\xe2\xe3\xcc\xec\x8c\xf5\x52\x03\x00\x60\x94\x74\x46\xd3\x83\x49\x09\xec\x9b\x3b\x23\xe4\x0c\x28\xe1\xc2\x1e\x61\x26\x51\x31\x5d\x49\x5e\xe3\x16\x0c\xc7\x13\x7a\xbd\xa9\x91\x43\x44\x56\x42\x31\x3d\xfc\x74\xae\x5f\x4a\x07\x60\xb7\x7c\x22\xb4\x34\x7e\x0d\x11\x7d\x07\xad\x44\xf4\x34\x91\x77\x4a\x61\x81\xfe\x09\xec\x80\x6a\x87\xbd\x2a\x70\xc8\xb9\x6a\xa1\xe9\x5e\xb1\x7a\xdd\xaa\xe1\x32\x42\x15\x83\x76\x76\x8a\xa2\x1f\xc8\x52\xba\xeb\x35\xfb\xb2\xf9\xcf\xaa\x4c\xc7\x8b\xa2\xdc\x92\xfb\xb9\x95\xc1\x9f\xb3\xd7\x30\xe2\x6c\xdf\x0b\x90\xc2\xa7\x7a\x69\xc5\xc6\x31\xbb\x6b\x41\x73\x37\x49\xf1\x2c\xff\x6e\x36\xab\x65\x9c\x0a\xfc\x47\xc3\x5a\x46\xed\x49\xc2\x62\xaa\x8a\xdf\x3f\xaf\x91\xed\xf0\xe4\x26\x37\xdf\x01\x00\x00\xff\xff\x0c\x51\x73\xb6\xea\x01\x00\x00")

func templatesJsonSchemaResourcenameGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesJsonSchemaResourcenameGotpl,
		"templates/json-schema-resourcename.gotpl",
	)
}

func templatesJsonSchemaResourcenameGotpl() (*asset, error) {
	bytes, err := templatesJsonSchemaResourcenameGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/json-schema-resourcename.gotpl", size: 490, mode: os.FileMode(420), modTime: time.Unix(1557970883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJsonSchemaRestnameGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xb1\x6a\xc4\x30\x10\x44\x7b\x7f\xc5\x20\x5c\xfa\xf4\x01\x86\x14\xe9\x93\x14\x31\xa4\xf7\xd9\xe3\xa0\xc3\xb1\x84\x76\x0f\x12\x84\xfe\x3d\xd8\xf1\x1d\x56\x9a\xdb\x72\x76\x66\x96\xb7\xa9\x02\x00\xa3\x4e\x67\x9a\x16\x26\x25\xd8\xb7\xfe\x8b\xc8\x19\x91\xe2\xaf\x71\xa0\x98\x66\x77\xfd\x84\xcd\xe4\xcf\x17\x0e\x7a\x53\x43\xf4\x81\x51\x1d\xc5\xb4\xf8\xeb\x5b\x27\xa5\x13\x62\xbf\x7c\x12\xb5\x1b\xbf\xbb\xc0\xa1\x41\x2d\x81\x83\x9b\xdc\xd0\xab\xf3\x0b\xda\x27\xd8\x8e\x6a\xbb\xa3\x2a\x38\xe5\x5c\xb4\xb8\xe9\x5e\xb1\xee\x9a\x55\xe3\x32\xa2\xb0\xa1\x9e\x7b\xa5\xe8\x07\xa3\xec\xdd\xe5\x35\xfb\xb2\xed\x9f\x55\xa3\x3b\x5f\x95\x72\x73\x1e\xcf\xad\xfc\xff\x62\xaf\x7e\xe4\x6c\xdf\x29\xba\xff\xa5\xa0\xdc\x42\x75\xe4\xb4\x3f\xef\x51\xd8\x5e\xc4\x2f\xe6\x1e\x2f\x41\x0f\x50\xb9\xca\xd5\x6f\x00\x00\x00\xff\xff\x3e\x41\x49\xb4\x9c\x01\x00\x00")

func templatesJsonSchemaRestnameGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesJsonSchemaRestnameGotpl,
		"templates/json-schema-restname.gotpl",
	)
}

func templatesJsonSchemaRestnameGotpl() (*asset, error) {
	bytes, err := templatesJsonSchemaRestnameGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/json-schema-restname.gotpl", size: 412, mode: os.FileMode(420), modTime: time.Unix(1557970883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJsonSchemaGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\x0c\x08\x1f\xda\x85\xed\xbd\x07\xf0\x61\x9b\xa6\x87\x22\x1f\x8b\xa4\xd8\x4b\x11\x14\xb4\x35\xb2\xb9\x91\x48\x2d\x39\xda\xd8\x70\xf5\xdf\x0b\x52\x94\x44\x51\xb4\xb3\x29\x8a\xde\x14\xf2\xbd\x37\x9f\x9c\x8c\x4f\xa7\x25\x64\x98\x0b\x89\xc0\x2a\xae\x0d\x2e\xe9\x58\x21\x83\x65\xd3\xcc\xec\x9d\xc8\x01\xbf\xc1\x0a\x18\x89\xd2\x1f\x33\x87\xb8\x02\x66\x48\x0b\xb9\x63\x8b\x19\xcb\x95\x2e\x39\xd9\xb3\x8c\x13\x2e\x1d\xd6\xd1\xb1\x30\x38\x68\x78\x42\x52\x25\x01\xdf\x28\x55\x20\x97\x11\xbe\x3b\x4d\x10\x84\x24\xdc\xa1\x8e\x08\xdd\x69\x82\x90\x17\x8a\x53\x04\x97\x75\xb9\x49\xa3\xd5\xe6\x2b\x6e\x69\xc8\x8d\xbb\x75\xdc\xb9\xc6\xdc\x72\x4f\x27\x58\x41\xd3\xac\xbe\x1a\xd5\x39\x28\xb3\x01\xef\xbf\x67\xa7\x19\x00\xc0\xe9\x04\xf3\x82\x13\x1a\xfa\x82\xda\x08\x25\xe1\x6a\x0d\xab\xa7\x0a\xb7\xab\x5b\x77\xfc\x89\x48\x8b\x4d\x4d\x68\x3a\x80\x65\x5b\x2a\x23\x41\x05\x76\x16\x1d\xe5\x4e\x65\x58\xac\x6e\x24\x09\x3a\xde\xf3\x12\xa1\x69\xd8\xc2\x83\x7d\x64\xde\x7f\x7f\x5a\x69\x55\xa1\x26\x81\x86\x5d\x41\xe7\xd1\x12\x34\x97\x3b\x84\xb9\xc8\x0e\xd6\xfc\x02\xe6\x9c\x48\x0f\x9e\xdd\x1c\x2a\x65\x30\x1b\x5c\x8b\x63\xe8\x5c\xb4\x5a\x8e\xeb\x9c\xb9\x5a\xb7\x7f\xac\xae\x95\xfc\x8e\x9a\x30\xf3\x3e\xf6\x58\x91\x7b\x84\xb7\x10\xdf\x0f\x5a\xeb\xcb\x40\x9b\xe5\x48\xd7\x07\x63\x7d\x5b\x44\x10\x9b\xc0\x41\xba\x69\xfa\x5c\x30\x2e\x8f\x0f\xb6\xa8\x7f\xba\x3f\x03\x39\xa9\x08\x56\x8f\xf8\xad\x16\x1a\x7b\x1d\x77\x0f\x41\x13\x15\x05\x83\x66\x31\xe2\x06\x66\xdd\xd1\xe8\xf2\xe3\x07\x58\xaf\xd7\x6b\xf8\xe3\x58\x61\xfb\xf5\xe1\x63\x9f\xcc\x3e\x09\x56\xdf\x26\x73\xdb\xa6\xd1\x81\xdb\x6c\xb8\xcf\x31\x7e\xc8\xe9\xa7\xa2\x50\xaf\x98\x5d\xef\x95\xd8\xa2\x09\x9d\x60\x28\xeb\x72\x14\xe5\xb4\x11\x5a\xda\x02\xe6\x5b\xf7\x31\x14\x33\x92\x0d\xad\x47\xe9\x6f\x21\xae\x00\xd6\xb1\xee\x25\x84\x68\x57\x09\x6f\xa1\x69\xd8\x44\x29\xe6\x3c\x8f\x73\x3b\xbc\xd4\x36\x49\x6c\x8e\x07\x42\x2d\xb9\xad\x43\xec\x17\xd8\xa1\x53\xfd\x26\xb4\xa1\x5b\xfc\x8e\xc5\x2f\x9a\x6f\x5f\x90\x4c\xdc\xa4\x2e\xa9\x51\x0d\x12\x96\x0a\x61\x68\x64\xa5\xef\x03\xae\x35\x3f\xb2\xb8\x83\x5a\x2b\x4f\xf5\xc6\xeb\x0f\x6d\xc2\x04\x61\x39\x3c\xc8\xc0\x63\xc2\xb2\xb2\x2f\x6d\x3c\xa6\x63\xa5\x9e\xd5\x5c\xec\xbc\x74\x18\x25\xaf\xd2\x51\xf8\xc1\x71\x39\x8c\xe5\x28\x0e\x9e\x65\x82\x84\x92\xbc\xf8\x3c\x9d\x33\xff\x59\x58\x7e\x00\xbf\x6d\x97\x74\x8d\xff\x22\x23\x76\xac\x8f\x61\xef\x75\xb8\x17\xfe\x21\x15\x4a\xb1\x5b\x4f\x93\xc3\xe2\x81\xf6\xa8\x61\x98\xe4\x67\x07\xc7\x74\x12\x70\x6d\xa2\xd4\x55\x9c\xec\x83\xf1\xff\x55\xfc\x84\x79\xc4\x1d\x1e\xaa\x14\xb9\x3d\x0a\xe6\x20\x9b\xb8\x7d\xd6\x8b\x6b\x8d\xdc\x56\xe9\x41\x16\xc7\xc8\x8b\xad\xbf\xfa\x4b\xc9\xe2\x78\xae\x72\x67\x85\xef\xf8\xe1\x16\xe5\x8e\xf6\x91\x6a\xd9\x9d\xdb\x1e\x3c\x4d\xc0\x89\x94\x9f\x37\x21\x64\xda\x44\x77\x3e\x32\xd1\x83\xdf\x65\x82\x1f\xbe\xf0\xa2\x8e\x7b\xbb\xe4\x07\x51\xba\x69\x1d\x86\xd0\x22\xdf\x19\x41\x52\x5e\xc8\x89\x7c\x87\x7c\x53\x1e\x18\x9b\xbe\xd3\xe7\xd9\x2c\xee\xd8\x3b\x24\x9e\x71\xe2\x57\x70\xaf\x08\x38\xfc\xfe\xf4\x70\x0f\x66\xbb\xc7\x92\xc3\x0b\x1e\x5f\x95\xce\x60\x53\x13\xbc\x60\x45\x90\x2b\x0d\x42\xb6\xcb\xa5\xdd\x2d\x26\xed\x3d\x0a\xab\x6f\xc5\x3e\x2c\xfb\x80\xdb\x33\xdf\x48\x9d\x2b\xa1\xd5\xda\xa0\x01\x2e\xc1\x8d\x6a\xe0\x04\xac\x27\xf5\x1e\x71\x02\xda\x23\x54\x5c\xa3\xa4\xd8\x81\x30\x19\x91\x43\x3c\x1b\x77\xb8\x75\xa8\x3d\x0b\x3b\xfb\x8c\x88\xdd\x33\x7e\x12\xe6\x5e\x14\x5e\xef\x57\xcc\x79\x5d\x90\xab\xc8\xcf\xa1\x68\x16\x5c\x84\xe5\x0b\x09\xf0\x37\xd8\xad\xf4\xc9\x6d\xdb\x22\x3f\xc6\x2b\xd3\x60\x3c\x28\x65\x72\xab\xea\xcc\x9e\x19\xb5\x39\x2f\x0c\x7a\x48\x90\xfe\xf1\x1a\xf5\x2a\x68\xff\xde\x8d\xb2\xe3\xce\x73\xfb\x7f\xdb\x6e\x21\xae\xa4\xf1\xb5\xdf\x5b\x78\xa7\xe7\x76\xd7\xb8\x81\xbb\x1a\x39\xc4\xa8\x73\x52\x1b\x8c\xad\x84\xb7\x7a\x69\x83\x09\x9c\x5b\xb7\x69\x48\x2f\x39\x83\xe1\x78\x1b\x7e\x7b\x84\xbe\x75\xf6\xbc\xf8\x3f\xde\xdc\xd0\x21\x6c\x5e\xda\x1f\x1e\xd6\xff\x1f\xfd\x39\xd2\x32\x1e\xd1\xd0\x19\x56\x77\x95\xe2\xa8\x5a\x6f\xf1\x3c\xaf\xbf\x9e\x70\x3f\xf3\xed\x0b\xdf\xa5\x68\xfe\x26\x64\xd8\xd5\x51\x66\x66\xd2\xb6\xc3\x4e\x7c\xe3\x10\x0b\xf0\xd0\xe1\x07\x92\x0f\xbc\x15\x48\xce\xe0\x9e\x7d\xb6\x99\x5c\x97\x78\xe1\x4b\x4d\xf1\x3c\x6b\x66\xff\x04\x00\x00\xff\xff\x6e\xee\x4e\x8f\xc1\x0f\x00\x00")

func templatesJsonSchemaGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesJsonSchemaGotpl,
		"templates/json-schema.gotpl",
	)
}

func templatesJsonSchemaGotpl() (*asset, error) {
	bytes, err := templatesJsonSchemaGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/json-schema.gotpl", size: 4033, mode: os.FileMode(420), modTime: time.Unix(1573002784, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSpecMdGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\xcd\x6a\xc3\x30\x10\x84\xef\x7e\x8a\x05\xf7\x5a\x3d\x40\xa1\x87\x42\x72\xeb\x0f\xb4\x25\xd7\x78\x2b\x6f\x1a\xb5\xb6\x25\xb4\x1b\x48\x10\x7a\xf7\x22\xd9\xb1\x1c\xd3\x9b\x3c\xcc\xcc\xe7\xdd\xad\xeb\x1a\x42\x00\xf5\xe1\x48\xab\x17\xdb\x52\xa7\xb6\x83\x18\xb9\xbc\x62\x4f\x10\x63\x15\x02\xdc\x75\x28\xc4\xb2\x23\xcf\xc6\x0e\xf0\xf0\x38\xd9\x9f\xb3\xfc\x24\xe2\xcd\xd7\x49\x88\xaf\x86\x31\x25\xde\xf4\xec\x50\xd3\x4d\xf9\x86\x58\x7b\xe3\x64\xf2\xe5\x7a\x3a\x63\xef\x3a\x4a\xc5\xd7\x67\x8e\xac\xc1\x63\xaf\x39\x94\x44\x8c\x55\x9d\x26\xd8\x8e\xdf\x55\xd5\x34\xcd\x0f\xdb\xe1\xa6\x36\xc6\x24\x27\x89\x86\x76\x86\x5a\xc7\x09\x68\x1d\x79\x4c\x7f\xc3\x13\x53\xbd\x53\x37\x0a\x47\xe3\x92\x48\xb2\x00\x5b\xc7\x57\xe6\xec\x2b\x7d\xa3\x6f\x49\xc1\x79\x39\x65\x6d\xdb\xb3\xb3\x4c\x6d\xd9\xdb\xbf\x73\xde\x67\xde\x22\x9f\x2a\x33\xb8\x04\x13\xc2\xe3\xf0\x4d\x6b\x63\x9d\x8d\x4d\x3a\xec\x74\xc7\x26\x5d\x59\x2e\x8e\xde\x0e\xa0\x20\xc6\x10\x40\x1f\xd1\xa3\x16\xf2\x86\xc5\x68\xce\xf2\x34\xa7\xda\x90\xf3\xa4\x51\x28\x8f\xb2\xff\x3c\x1a\x86\x19\x01\x86\xa1\x9d\x0d\x7b\xb5\x18\xfa\xf6\xee\xab\x63\x87\x00\x3d\xfe\xd2\x86\x0e\x78\xea\x64\x87\xdd\x89\x66\x68\xc9\x4f\xaf\xbf\x00\x00\x00\xff\xff\xda\xfc\xa8\x5e\x99\x02\x00\x00")

func templatesSpecMdGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesSpecMdGotpl,
		"templates/spec-md.gotpl",
	)
}

func templatesSpecMdGotpl() (*asset, error) {
	bytes, err := templatesSpecMdGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/spec-md.gotpl", size: 665, mode: os.FileMode(420), modTime: time.Unix(1557970883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTocMdGotpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\x56\xa8\xae\x56\xd0\x73\x2f\xca\x2f\x2d\xf0\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x0a\x31\xfc\xe1\x14\x00\x00\x00")

func templatesTocMdGotplBytes() ([]byte, error) {
	return bindataRead(
		_templatesTocMdGotpl,
		"templates/toc-md.gotpl",
	)
}

func templatesTocMdGotpl() (*asset, error) {
	bytes, err := templatesTocMdGotplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/toc-md.gotpl", size: 20, mode: os.FileMode(420), modTime: time.Unix(1562689623, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsetGitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xca\x41\x0a\x84\x30\x0c\x05\xd0\xfd\x3f\x4a\x61\x72\xa1\x61\x16\x43\xf2\x0d\xc5\x9a\x48\x2d\x45\x6f\x2f\xe2\xe6\xad\x5e\x91\xfd\xfa\x6a\xda\x0f\x45\xe8\xfe\xfa\xa9\xb1\x24\x34\x8d\xce\xc0\x53\x14\xde\xc9\x51\xc3\xb7\x34\xb6\x03\x93\x61\xd9\x51\xa4\xa5\xae\xd0\x9c\xec\x7f\xa7\x8c\x73\xe0\x0e\x00\x00\xff\xff\x66\xf6\x5a\x96\x53\x00\x00\x00")

func specsetGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_specsetGitignore,
		"specset/.gitignore",
	)
}

func specsetGitignore() (*asset, error) {
	bytes, err := specsetGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specset/.gitignore", size: 83, mode: os.FileMode(420), modTime: time.Unix(1528498884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsetGopkgToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8a\x2e\x28\x2a\xcd\x4b\x8d\xe5\x52\x50\x48\xcf\xd7\x2d\x49\x2d\x2e\x29\x56\xb0\x55\x28\x29\x2a\x4d\xe5\x52\x50\x28\xcd\x2b\x2d\x4e\x4d\xd1\x2d\x48\x4c\xce\x4e\x4c\x4f\x85\x4b\x00\x02\x00\x00\xff\xff\x34\x36\xb3\x89\x33\x00\x00\x00")

func specsetGopkgTomlBytes() ([]byte, error) {
	return bindataRead(
		_specsetGopkgToml,
		"specset/Gopkg.toml",
	)
}

func specsetGopkgToml() (*asset, error) {
	bytes, err := specsetGopkgTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specset/Gopkg.toml", size: 51, mode: os.FileMode(420), modTime: time.Unix(1528498884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsetSpecsRegolitheGenCmd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x4e\xc5\x30\x0c\x44\xf7\x3e\xc5\xf0\xf9\x0b\x40\x4a\x22\x0e\x00\x77\x49\x63\x37\x8d\x48\xe2\x2a\x0d\x88\x45\x0f\x8f\x5a\x5a\xca\xc2\x0b\x6b\xde\xb3\xe7\xf1\xc1\x0d\xa9\xba\xc1\x2f\x13\x95\x0f\x4e\x0d\x66\x86\xb5\x8e\x35\x10\xfb\xee\xdf\xee\x4f\x4d\xa2\x82\x35\xc0\x30\x2c\xd6\x15\xf2\x9d\x3a\x5e\x9f\x49\xc2\xa4\xb8\xdd\x37\xec\x86\xf7\xc3\xda\xe6\xb3\x48\xed\xbe\x27\xad\xb6\x30\x05\x86\xfd\xe7\x91\x64\x89\x52\x31\x6a\x66\x69\xdb\xd1\x65\x96\xb0\xc0\x28\x82\xf2\x1e\x5d\xec\xd5\x29\x6a\xf6\x35\x52\x2b\x30\x6d\x84\x75\xbf\xbb\x7b\xb1\x51\xa9\x7c\x9d\xaa\x93\x2c\xfb\xf3\xbc\x27\x7f\xdc\xe9\x1d\x18\xfd\x04\x00\x00\xff\xff\x25\x5b\x5e\xc5\xf7\x00\x00\x00")

func specsetSpecsRegolitheGenCmdBytes() ([]byte, error) {
	return bindataRead(
		_specsetSpecsRegolitheGenCmd,
		"specset/specs/.regolithe-gen-cmd",
	)
}

func specsetSpecsRegolitheGenCmd() (*asset, error) {
	bytes, err := specsetSpecsRegolitheGenCmdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specset/specs/.regolithe-gen-cmd", size: 247, mode: os.FileMode(420), modTime: time.Unix(1528498884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsetSpecsIdentifiableAbs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xb1\x0a\xc2\x40\x0c\xc6\xf1\xbd\x4f\xf1\x81\xb3\x82\xeb\x6d\x82\x8b\x4f\x21\xd7\xde\xd7\x1a\xa9\x97\x92\x4b\xc5\xbe\xbd\xf4\x06\x6d\x97\x10\x7e\xfc\x03\x39\xe0\xe2\x6e\xd2\xce\xce\xd2\xc4\xdf\x1a\x1a\xe0\x7d\x5e\xe7\x11\x39\xbe\x18\x70\xbb\x36\x00\x90\x58\x3a\x93\xc9\x45\xf3\x6a\x90\x02\x7f\x10\x92\x98\x5d\x7a\xa1\x41\xfb\x2a\xda\x3e\xd9\xf9\xa9\x1e\xf9\x32\x31\xa0\xb8\x49\x1e\x2a\xf0\x33\x69\x61\x0a\x70\x9b\x59\xa5\xb8\xda\x0e\x8c\x31\xdd\x35\x8f\xcb\xc6\xe2\xec\x3a\x30\xd3\xa2\xef\xda\x5e\x46\xa7\xc5\x76\xe4\x06\xff\x2f\x6d\x50\x2d\xed\xc2\x6f\x00\x00\x00\xff\xff\x62\x4c\x45\x33\xff\x00\x00\x00")

func specsetSpecsIdentifiableAbsBytes() ([]byte, error) {
	return bindataRead(
		_specsetSpecsIdentifiableAbs,
		"specset/specs/@identifiable.abs",
	)
}

func specsetSpecsIdentifiableAbs() (*asset, error) {
	bytes, err := specsetSpecsIdentifiableAbsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specset/specs/@identifiable.abs", size: 255, mode: os.FileMode(420), modTime: time.Unix(1533334030, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsetSpecs_apiInfo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x28\x4a\x4d\xcb\xac\xb0\x52\x48\x2c\xc8\xe4\x2a\xca\xcf\x2f\xb1\x52\x00\x91\x5c\x65\xa9\x45\xc5\x99\xf9\x79\x56\x0a\x86\x5c\x80\x00\x00\x00\xff\xff\x0c\x97\x42\xd8\x22\x00\x00\x00")

func specsetSpecs_apiInfoBytes() ([]byte, error) {
	return bindataRead(
		_specsetSpecs_apiInfo,
		"specset/specs/_api.info",
	)
}

func specsetSpecs_apiInfo() (*asset, error) {
	bytes, err := specsetSpecs_apiInfoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specset/specs/_api.info", size: 34, mode: os.FileMode(420), modTime: time.Unix(1528498884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsetSpecs_parameterMapping = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x8a\x31\x0e\xc2\x40\x0c\x04\xfb\xbc\x62\x0b\x5a\x78\xc0\x49\xf9\x05\x3d\x32\x64\x45\x2c\x39\xbe\x8b\x7d\x01\xf2\x7b\x44\x44\x37\x9a\x99\xd3\xba\x31\x76\xb9\x1b\xcb\x00\xd0\x7b\x28\xf3\x87\x67\xb8\x2c\x2c\x58\x07\x00\x98\x98\x8f\xd0\xd6\xb5\x7a\xc1\x75\xd6\x84\x26\xc4\xc1\x8f\x2c\xcd\x78\x39\xa6\xbe\x37\x16\x64\x0f\xf5\xe7\x21\xfe\xf5\xf6\x12\xdb\x58\x30\xd3\xac\x62\x1c\xf1\xae\x61\xd3\xf0\x0d\x00\x00\xff\xff\x6d\xff\xeb\x46\x7b\x00\x00\x00")

func specsetSpecs_parameterMappingBytes() ([]byte, error) {
	return bindataRead(
		_specsetSpecs_parameterMapping,
		"specset/specs/_parameter.mapping",
	)
}

func specsetSpecs_parameterMapping() (*asset, error) {
	bytes, err := specsetSpecs_parameterMappingBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specset/specs/_parameter.mapping", size: 123, mode: os.FileMode(420), modTime: time.Unix(1557970883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsetSpecs_typeMapping = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x8f\x8e\x8d\x8e\x2d\x2e\x29\xca\xcc\x4b\x57\xb7\xe2\x52\x50\x48\xcd\x49\xcd\x4d\xcd\x2b\x49\xcc\x01\x71\x14\x14\x4a\x2a\x0b\x52\xad\x14\x90\x15\x81\x85\x33\xf3\x32\x4b\x50\x84\xab\x6b\x41\x12\x59\xc5\xf9\x79\xc5\xc9\x19\xa9\xb9\x89\xc8\xba\x6b\x74\xc1\x1c\x05\x85\x6a\x28\xad\xa0\xa0\x04\x92\x51\xb2\x52\x50\x4a\x2c\x2a\x4a\xac\x54\xd2\x41\x48\x64\x96\xa4\xe6\x16\x2b\x59\x21\xa9\xc5\xa3\x1a\x87\x7a\x24\x1d\x10\xd7\x29\x21\x49\xd6\x72\xa1\xb3\x6a\xb9\x00\x01\x00\x00\xff\xff\x2c\xe3\x9a\x72\x05\x01\x00\x00")

func specsetSpecs_typeMappingBytes() ([]byte, error) {
	return bindataRead(
		_specsetSpecs_typeMapping,
		"specset/specs/_type.mapping",
	)
}

func specsetSpecs_typeMapping() (*asset, error) {
	bytes, err := specsetSpecs_typeMappingBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specset/specs/_type.mapping", size: 261, mode: os.FileMode(420), modTime: time.Unix(1557970883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsetSpecsObjectSpec = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x4f\xc3\x30\x10\x85\x77\xff\x8a\x27\x75\xe8\x04\x12\xab\x27\x90\x90\x98\x10\x4b\x99\x91\x1b\xbf\x26\x86\xc4\xb6\x7c\x67\xd4\xfe\x7b\xe4\xa4\x8a\x20\x74\x39\x59\xdf\x7d\xf7\xce\xf6\x0e\xaf\xc9\x73\x34\x53\xab\xd6\x00\x85\xa2\x1f\xd1\x4d\xb4\x48\xc7\x4f\x76\xba\xb0\x54\x4b\xc7\x3f\x5c\x0c\xc0\xa8\x41\x2f\x57\xfc\xb6\xe2\xec\xba\x2f\xd7\xd3\xc2\xf3\xe4\xea\xd8\x22\xfa\x92\x6a\xb6\xe8\x52\xa1\x01\x3c\xa5\x2b\x21\x6b\x48\xd1\xe2\x30\x04\x41\x10\x14\x17\x7d\x9a\xae\xe9\xf7\x6d\x86\xda\x6e\xb4\xd1\x5f\xa8\x02\x1d\xf8\x4b\xac\xd9\x3b\xe5\x0d\xf7\x7d\x6e\x6c\x75\xcf\x91\x37\xf5\xe7\xb9\xb1\xd5\x79\x56\x46\x2f\xcd\xbf\xc3\xfe\x31\xf8\xf6\xea\x53\x70\xc7\x91\x7b\x63\x76\x78\x52\x2d\xe1\x58\x95\x62\xdc\x7a\x6c\xf6\xf7\xc3\x32\xb3\x7c\x4f\xab\xff\x57\x1e\x06\xce\x1d\xa4\xd3\x66\x2d\xa0\x97\x4c\x0b\xd1\x12\x62\x3f\x03\x9e\x73\x12\x7a\x0b\x2d\x75\xc9\x12\x4d\x65\x05\x3f\x01\x00\x00\xff\xff\x1d\xac\xcb\xd0\xcc\x01\x00\x00")

func specsetSpecsObjectSpecBytes() ([]byte, error) {
	return bindataRead(
		_specsetSpecsObjectSpec,
		"specset/specs/object.spec",
	)
}

func specsetSpecsObjectSpec() (*asset, error) {
	bytes, err := specsetSpecsObjectSpecBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specset/specs/object.spec", size: 460, mode: os.FileMode(420), modTime: time.Unix(1557970883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsetSpecsRegolitheIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\x91\x13\x54\x3d\x40\xc1\x7b\x0c\x83\x84\x1a\x67\x0a\x93\xa6\x64\x52\x4b\x6f\xef\xa2\x2e\x74\xf7\xe1\xff\xff\x16\xe3\x4d\x8f\xec\x3b\xaf\x50\x4d\x9f\x2d\xf9\xa3\x90\x30\x46\x94\x41\x35\x43\xd2\x3a\x2c\x6f\xbb\x63\xc4\xa1\xcd\x92\x4a\xa5\x32\x00\x16\x37\x2a\xe7\x4b\x4d\xd8\x56\xf8\xfb\x34\x3b\x30\x62\xef\x3d\xc8\xf8\xee\x43\x61\xbf\xcc\x96\x9a\xef\x6a\x93\x03\x16\xca\xc7\xcc\xf7\x1f\x3e\x24\x15\x78\xb3\x9d\x59\x0b\x46\xbc\x85\x2b\x7c\x02\x00\x00\xff\xff\x0e\x59\x87\x8e\xaa\x00\x00\x00")

func specsetSpecsRegolitheIniBytes() ([]byte, error) {
	return bindataRead(
		_specsetSpecsRegolitheIni,
		"specset/specs/regolithe.ini",
	)
}

func specsetSpecsRegolitheIni() (*asset, error) {
	bytes, err := specsetSpecsRegolitheIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specset/specs/regolithe.ini", size: 170, mode: os.FileMode(420), modTime: time.Unix(1533334030, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _specsetSpecsRootSpec = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x41\x8e\xc2\x30\x0c\x45\xf7\x39\x85\xa5\xae\x67\x0e\x90\xed\xac\x67\xd3\x0b\xa0\x90\x7e\x4a\xa0\x8d\x2b\xdb\x05\x71\x7b\x14\x52\xa0\x20\xd8\x44\xd1\xf7\xfb\x7a\x76\x43\xff\xdc\x61\x70\x63\x79\xbd\x23\x12\xa8\x6d\x72\x18\xe1\x49\x98\xad\x26\x3c\x4b\xc4\x6b\x8a\x6c\xc9\x2e\x4b\xd6\xd6\x6c\x0a\xf1\x18\xfa\x27\xd3\x0b\xcf\x93\xa7\xc8\x02\x47\xd4\x41\xa3\xa4\xc9\x12\xe7\x4a\x10\x6f\x0f\x88\xf6\x5b\x48\x58\x91\xbf\x41\x3d\x4c\xc9\xf6\x58\x81\xa5\xe7\xc9\x64\x86\x73\x0d\xb5\x18\x42\x41\xd5\xc9\xfd\xe7\xdd\xcf\xfa\x86\xda\xfc\x6a\x68\x61\x92\x70\x42\xd5\x0c\x49\x8d\x78\xb7\x94\xb4\xf8\xa2\x20\x18\x3e\x34\xff\x6e\x03\xa5\x40\x19\xe7\xc7\x82\xd7\x00\x00\x00\xff\xff\x65\x54\xa4\xfe\x4f\x01\x00\x00")

func specsetSpecsRootSpecBytes() ([]byte, error) {
	return bindataRead(
		_specsetSpecsRootSpec,
		"specset/specs/root.spec",
	)
}

func specsetSpecsRootSpec() (*asset, error) {
	bytes, err := specsetSpecsRootSpecBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "specset/specs/root.spec", size: 335, mode: os.FileMode(420), modTime: time.Unix(1557970883, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/json-schema-resourcename.gotpl": templatesJsonSchemaResourcenameGotpl,
	"templates/json-schema-restname.gotpl": templatesJsonSchemaRestnameGotpl,
	"templates/json-schema.gotpl": templatesJsonSchemaGotpl,
	"templates/spec-md.gotpl": templatesSpecMdGotpl,
	"templates/toc-md.gotpl": templatesTocMdGotpl,
	"specset/.gitignore": specsetGitignore,
	"specset/Gopkg.toml": specsetGopkgToml,
	"specset/specs/.regolithe-gen-cmd": specsetSpecsRegolitheGenCmd,
	"specset/specs/@identifiable.abs": specsetSpecsIdentifiableAbs,
	"specset/specs/_api.info": specsetSpecs_apiInfo,
	"specset/specs/_parameter.mapping": specsetSpecs_parameterMapping,
	"specset/specs/_type.mapping": specsetSpecs_typeMapping,
	"specset/specs/object.spec": specsetSpecsObjectSpec,
	"specset/specs/regolithe.ini": specsetSpecsRegolitheIni,
	"specset/specs/root.spec": specsetSpecsRootSpec,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"specset": &bintree{nil, map[string]*bintree{
		".gitignore": &bintree{specsetGitignore, map[string]*bintree{}},
		"Gopkg.toml": &bintree{specsetGopkgToml, map[string]*bintree{}},
		"specs": &bintree{nil, map[string]*bintree{
			".regolithe-gen-cmd": &bintree{specsetSpecsRegolitheGenCmd, map[string]*bintree{}},
			"@identifiable.abs": &bintree{specsetSpecsIdentifiableAbs, map[string]*bintree{}},
			"_api.info": &bintree{specsetSpecs_apiInfo, map[string]*bintree{}},
			"_parameter.mapping": &bintree{specsetSpecs_parameterMapping, map[string]*bintree{}},
			"_type.mapping": &bintree{specsetSpecs_typeMapping, map[string]*bintree{}},
			"object.spec": &bintree{specsetSpecsObjectSpec, map[string]*bintree{}},
			"regolithe.ini": &bintree{specsetSpecsRegolitheIni, map[string]*bintree{}},
			"root.spec": &bintree{specsetSpecsRootSpec, map[string]*bintree{}},
		}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"json-schema-resourcename.gotpl": &bintree{templatesJsonSchemaResourcenameGotpl, map[string]*bintree{}},
		"json-schema-restname.gotpl": &bintree{templatesJsonSchemaRestnameGotpl, map[string]*bintree{}},
		"json-schema.gotpl": &bintree{templatesJsonSchemaGotpl, map[string]*bintree{}},
		"spec-md.gotpl": &bintree{templatesSpecMdGotpl, map[string]*bintree{}},
		"toc-md.gotpl": &bintree{templatesTocMdGotpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

