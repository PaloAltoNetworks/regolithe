// Code generated by go-bindata.
// sources:
// schema/regolithe.json
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaRegolitheJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4f\x6f\xdb\x3a\x12\xbf\xfb\x53\x0c\xd4\x02\xbd\xb4\x9b\x3d\x2c\x7a\xc8\xad\x58\xec\xa1\xc0\x02\xaf\x68\xdf\xad\x08\x82\x91\x34\xb2\xa6\xa1\x48\x95\xa4\x9c\x18\x45\xbe\xfb\x03\x49\xc9\xb6\x62\xc9\x36\x6d\x3a\x45\x73\x49\x42\x72\x46\xbf\x19\xce\x9f\x1f\xc9\x5f\x0b\x00\x80\xec\xad\x29\x6a\x6a\x30\xbb\x85\xac\xb6\xb6\xbd\xbd\xb9\xf9\x61\x94\xfc\x10\x46\xff\xa5\xf4\xf2\xa6\xd4\x58\xd9\x0f\xff\xfe\x78\x13\xc6\xde\x64\xef\x83\xa4\x65\x2b\xc8\xc9\x7d\xa5\xa5\x12\x6c\x6b\x82\x6f\x2d\x15\x5c\x71\x81\x96\x95\x1c\xd6\x95\x64\x0a\xcd\xad\x1f\xba\x85\xec\x93\x04\xb4\x56\x73\xde\x59\x02\x55\x01\x82\x99\x92\xb2\xeb\xd6\x2b\x57\xf9\x0f\x2a\x6c\xf6\x7e\x11\x86\x5b\xad\x5a\xd2\x96\xc9\x64\xb7\x10\x4c\xf0\xe3\x1b\x95\xe3\xf1\x91\x2a\xd4\x1a\xd7\xbd\xfe\xcd\x24\x5b\x6a\xf6\x65\xa6\x21\xec\xad\x50\x92\xfe\xaa\xb2\x5b\xf8\xbe\x37\xe5\x7e\x7e\x65\x6f\x35\xb9\xe9\xec\xcd\x4d\x49\x15\x4b\x76\x06\x9a\x9b\x0d\xd6\xec\x79\x4f\xee\x6e\x34\xb2\x9d\x7f\xde\x7e\x3d\x2b\x6a\x16\xa5\x26\xf9\x07\x58\xda\xf2\x99\x36\x36\xaa\x24\x31\x6f\xe0\x24\xd0\xdf\x61\x61\xc0\x19\x61\xe3\x62\xc7\xd2\x0c\xcb\xd2\xeb\x41\xf1\x65\x37\xae\x2b\x14\x86\xfa\x25\x9a\x7e\x76\xac\xa9\x1c\x21\xeb\xdd\xe3\xff\xbf\x1b\x52\x63\x07\xd6\x38\x37\xc2\x62\xd8\x73\xe6\x4c\x2e\x6d\xe6\x51\x30\x9a\x99\x49\x98\xc8\xec\xff\xb3\xb1\x3e\xa3\x83\x1c\x58\x05\x9a\x5a\x4d\x86\xa4\x9d\x49\xf3\xd9\x7d\x9a\x8a\xe0\xcd\xa2\xf9\x7d\xde\xd3\x63\xac\x66\xb9\xcc\x26\x17\xee\xef\xda\xf3\x44\x5c\x14\x9a\xd0\xd2\xc9\x4e\xf8\xbb\xa6\xad\xd5\x54\x42\x08\x38\x28\x50\x42\x4e\x10\x94\x95\xc7\xac\xcf\x95\x12\x84\x72\x1f\xf6\x14\xc0\x92\x04\xc5\x01\x9c\xc7\x17\x74\xa5\xc6\xb7\xfb\xfd\xd3\xbd\xb8\x33\xe4\xa2\xca\x4e\x3a\xf6\x18\xd2\xb9\xfd\x9f\x02\x4a\xd2\xb2\x5d\xdf\x4b\x6c\x4e\xf7\xe6\x7f\xb1\x21\xf1\xa1\x40\x43\x25\xac\x48\x9b\x11\x58\x63\x83\xb2\x94\x18\x9f\x2c\xc9\x32\x3e\x27\x73\x34\x34\xce\x40\xb0\x35\x9b\x17\x43\xbd\x76\xf8\x93\xf2\x73\x49\x36\x51\x72\x6a\xb2\x9a\x69\x95\x38\xfc\x5b\x2c\x1e\x70\x19\x57\x40\x5c\xd4\x0c\x61\xd4\xcb\x9f\x9f\x02\x71\x68\x35\xaf\x12\x94\x3b\x36\x30\x68\x4a\x89\x4e\x93\x51\x9d\x2e\x28\x2e\x47\x1d\xc6\x56\x74\x1a\xc5\xab\xa4\xe8\x56\x69\x0c\xc0\x4e\xf2\xcf\xae\xdf\xf9\x8d\x43\x59\x2e\x3d\xce\xf4\xb5\x4e\x2b\x75\x71\xda\x60\x61\x0d\xa0\x09\x9e\x54\xca\xc6\x75\xf8\xa8\x8d\xef\xda\x32\x5d\x13\x0e\xca\x2e\xc8\xf2\xc5\x01\xb8\x27\x70\xba\xcd\xd2\x49\x6e\xb7\x99\x1d\x0a\xc7\xc1\x10\x3b\x9a\x24\x47\xfa\xdc\x91\x7e\x3d\x9a\xbd\x5b\x4c\x52\x75\x47\xf2\xa3\xb9\xe5\x19\xac\xca\x1f\x7b\xfa\xad\x34\x2f\x08\x15\x54\x5a\x35\x3e\x10\x8b\x4e\x6b\xc7\x37\xaf\x17\x8b\xf1\x7c\x6b\x1a\x7a\xcf\xb5\x5e\x17\x7a\xab\xa9\xf0\xc1\x1f\x0f\x1f\x5b\x76\x75\x7d\x47\x47\x4a\x68\xb1\x6d\x7c\xd2\xa5\xbe\x83\xaf\xf8\x75\x9d\x1a\x5f\xef\x37\x12\xd0\x39\xde\x88\x06\x10\x04\xcb\x07\x77\x62\xb2\x2f\x6c\x4b\x59\xf4\xcf\xa8\xa2\x93\x6e\xee\x0b\xe8\xd5\x9c\xfc\x3a\xf5\x75\xbb\x6f\x2f\xaa\xdc\xc4\x97\xb7\xf7\x4b\xf1\xa5\x0e\x85\x50\x8f\x54\xde\x17\x35\xea\xd3\x89\xfb\x57\x5a\xd2\x53\x0b\xb6\x46\x7f\x76\xf6\xbb\xbc\x73\x71\xd6\x74\xc6\x42\xad\xa4\xd2\x2e\x68\x72\x82\x15\x0a\x3e\x9a\x91\x31\xc1\xb2\x85\xad\xb8\x88\xb8\x05\xf8\x14\xe4\x1c\xa0\x8e\x0c\x54\x4a\x03\xbe\xb8\xf2\x73\x70\xe0\x7f\xb2\x6b\xfe\x9c\x53\x06\x76\x56\x2d\x49\x92\x8e\x2e\x9e\x5b\xcb\xd9\xc0\x48\x0d\xe4\x6b\x9f\x3d\x39\x16\x0f\x24\xd3\x96\x53\xdf\x17\x59\xc9\x7b\x25\xc5\xfa\x4c\xbc\x2e\xdb\x9d\xb8\x0b\x2f\x43\x16\xca\xce\x07\x61\x68\xb9\xe0\x82\xfe\x1a\x1d\xaa\xc2\x4e\xd8\x7b\xa5\x4b\xd2\x51\xb8\x7d\xbc\x0d\xc4\x7e\xe4\xf4\xa1\xc8\xf6\xba\xc1\xeb\x76\x96\x3c\xd0\x6c\x70\x5d\x04\xde\x43\x89\xbc\xeb\x08\xd0\xa6\x8d\x38\x02\xf2\xfb\x90\x27\x5b\xb8\xef\x21\x63\x69\x69\x49\xda\xfd\x29\x3b\x21\xc2\xef\x26\x0f\x23\x43\x6f\xd9\xa4\xc6\xdd\x35\xf9\xc3\x68\x37\xae\xc4\x1f\x12\xde\x32\x9d\xea\xf7\xc8\x8b\x9b\x56\x99\x4b\xfc\xd6\x76\xb9\xe0\x42\xac\x61\xd0\x74\xa2\xf7\x66\x96\xf5\x11\xe7\x56\x5a\xdd\xd1\x69\x46\x54\x2c\x2c\x69\xcc\x45\x5c\x74\x8f\x4b\x4a\xde\xd3\x1e\xd7\x19\x82\x42\x97\x8b\x6d\xa7\x9d\x59\x26\x69\x50\x54\x4a\x13\x2f\xe5\xbd\x4b\xf4\xf3\x6b\x36\xf4\x6a\x92\xd7\x8b\x4a\xe9\x06\xe3\x68\x6f\x10\x39\x39\x52\xc9\x35\xd9\xb9\x37\x8d\x80\x41\xd3\x9c\x74\xd0\xd0\x20\x8b\x43\x0b\xda\x5a\xc9\x83\x1a\x3e\x7f\x59\xfd\xe7\xc8\xfc\xc7\x43\xf3\x05\x97\xfa\xd0\xbc\xe7\xb4\x93\xd3\xa7\x15\xb5\x25\x59\x1b\xd9\x6b\xb6\xf1\xf1\xc8\x42\x40\x8d\x2b\x02\x84\x6d\x63\xef\x55\xa6\x8c\x15\x2e\xdd\xb1\xbd\xe2\xb3\x91\xee\x34\x42\x84\x06\x59\xc2\x8e\xca\xcb\x6a\x49\xb8\xbb\xfa\xdc\xf3\x31\x57\x4e\x4e\x33\x49\x96\xf4\x94\xc0\x1a\x09\x41\x53\x4a\x77\x37\xf8\x74\x2f\x48\x2e\x6d\x1d\x05\xb0\xc1\x27\x6e\xba\x06\x82\xe8\x3e\x1b\x19\xc8\x6f\xdf\x39\x8e\x20\x1e\x5a\xf8\xc9\x88\xe3\x89\xc7\x00\x78\x86\x3d\x0d\x78\x37\x64\x22\x25\x60\x96\x67\xb9\x98\xe5\x6f\x73\x31\xcb\x73\x5c\xdc\x03\xfe\x0d\x2e\x8e\xbe\x85\xde\x7d\x78\xb8\x0a\x0d\xf2\xdc\x3b\x21\x81\xd8\x70\xf9\xab\xf0\x87\x56\x73\x83\x7a\x7d\x19\x7f\x08\x75\x0a\x7a\x5d\xc9\x49\x84\x26\x2c\x2f\x39\xe5\xb1\x01\xa7\xc2\x9f\xf4\x12\x03\xdb\xdc\xbe\x9c\x8d\xab\xd7\x90\x12\x96\xa1\x42\x47\xde\x35\x8e\x40\x05\x79\x40\x59\x82\xa9\x55\x27\xca\x70\x97\x8b\xc2\xc2\x23\xdb\x1a\x0a\xd4\x69\x1f\xbd\x4c\x7a\x7e\x62\xd2\xf3\x13\x63\xd5\x45\x7b\xdd\xcb\xa7\x3a\xd4\x9c\x4c\x42\x4c\x97\xf7\xca\xe3\xab\x64\x83\x6d\xeb\x9f\xe8\x14\xb4\x5c\x3c\xf8\x82\xf4\x58\x93\xf4\xe5\x33\x14\x75\xe3\x6f\x4e\xac\x82\x77\xf4\x64\x49\x4b\x14\xef\x52\x96\x53\xab\x51\x1a\x26\x79\x41\x3c\x6f\x55\xa4\x0c\x87\x68\x9f\x7a\x77\xa9\x2a\xba\xeb\x9c\x7d\xf0\x39\x28\x0f\x81\x9f\x1e\xea\xc8\x7e\x49\x25\x14\xce\x39\xce\x2f\x38\x1c\xb0\x5b\xa8\x07\xe6\x05\x9b\x83\x9f\x38\xf8\x4e\xe0\x57\x58\x9e\x7d\xe1\x0e\x08\xfa\xd0\xbc\xe4\x14\x15\xce\x00\x17\x74\xc9\x20\x9f\xf4\xd1\xd8\xab\xfc\x56\xa8\xc8\x50\x34\x4e\x62\x60\x41\x9d\xe4\x82\xed\xfa\x5c\x52\x74\x76\x78\x2e\x85\xca\xf1\xe0\xc1\x5b\xa8\x22\x62\xcb\x46\x23\x57\x7b\x53\x99\x7b\x53\xf6\x5e\x89\x7b\x6b\x1e\x23\x7f\x5e\x3c\x2f\xfe\x09\x00\x00\xff\xff\x13\x5f\x8d\xc2\xb2\x2c\x00\x00")

func schemaRegolitheJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaRegolitheJson,
		"schema/regolithe.json",
	)
}

func schemaRegolitheJson() (*asset, error) {
	bytes, err := schemaRegolitheJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/regolithe.json", size: 11442, mode: os.FileMode(420), modTime: time.Unix(1520976503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/regolithe.json": schemaRegolitheJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"regolithe.json": &bintree{schemaRegolitheJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

