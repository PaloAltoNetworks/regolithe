// Code generated by go-bindata.
// sources:
// schema/regolithe.json
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaRegolitheJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4f\x6f\xdb\x3a\x12\xbf\xe7\x53\x0c\xd4\x02\xbd\xb4\x9b\x3d\x2c\x7a\xc8\xad\xbb\xd8\x43\x81\x07\xbc\xa2\x7d\xb7\xa2\x08\x28\x69\x64\x4d\x43\x91\x2a\x49\x39\x31\x8a\x7c\xf7\x07\x92\x92\x6c\xd9\x92\x2c\xca\x74\xfa\xda\x4b\x13\x92\x33\xfa\xcd\x70\xfe\xfc\x48\xe6\xe7\x0d\x00\x40\xf2\x5a\x67\x25\x56\x2c\xb9\x83\xa4\x34\xa6\xbe\xbb\xbd\xfd\xae\xa5\x78\xe7\x47\xff\x25\xd5\xe6\x36\x57\xac\x30\xef\xfe\xfd\xfe\xd6\x8f\xbd\x4a\xde\x7a\x49\x43\x86\xa3\x95\xfb\x8c\x1b\xc9\xc9\x94\x08\x5f\x6a\xcc\xa8\xa0\x8c\x19\x92\xa2\x5b\x97\xa3\xce\x14\xd5\x6e\xe8\x0e\x92\x0f\x02\x98\x31\x8a\xd2\xc6\x20\xc8\x02\x18\xe8\x31\x29\xb3\xab\x9d\x72\x99\x7e\xc7\xcc\x24\x6f\x6f\xfc\x70\xad\x64\x8d\xca\x10\xea\xe4\x0e\xbc\x09\x6e\xbc\x57\x39\x1c\x1f\xa8\x62\x4a\xb1\x5d\xab\xbf\x9f\x3c\x42\xf7\x07\x69\xe3\x50\x1d\x42\xb4\xa6\x29\xac\x15\x6a\x14\x06\x73\xe8\x31\x0d\x34\x91\xc1\xea\xf4\xeb\xe3\xc6\x9c\xac\x90\x02\xff\x2c\x92\x3b\xf8\x7a\x32\x65\xff\xfd\x4c\x5e\x2b\xb4\xd3\xc9\xab\xdb\x1c\x0b\x12\x64\xf1\xea\xdb\x1e\x65\xf2\x7c\x22\xf7\x6d\x30\xb2\x9f\x7f\xde\x7f\x3d\xc9\x4a\xe2\xb9\x42\x11\xc7\x67\x4e\x1b\xb0\x9a\xf4\x3f\xdb\x69\x35\xad\x74\x57\x25\x73\xe4\xa7\xbe\x3a\x72\xc7\x7f\x99\x46\x20\x51\x48\x55\xb9\x88\x5e\xee\x8c\x59\x8b\x67\xac\x9d\xb2\xd4\xe3\x1d\xda\xba\xb7\xd3\x8f\xb7\xf6\x25\x2c\xcf\x9d\x14\xe3\x9f\x0e\x53\xac\x60\x5c\x63\xbb\x44\xe1\x8f\x86\x14\xe6\x03\x0c\xad\x53\xdc\xef\xdf\xba\x2c\x3d\x00\x31\x4c\x53\xbf\x18\x4e\x5c\x38\x91\xd6\xfd\x3c\xe3\xc4\xf4\xc4\xe4\xd8\x1e\xf4\x69\xec\xe5\xc0\xc8\xbd\xfb\x27\x2a\xce\x89\xca\xb9\x14\xe8\x17\x4d\xc7\xef\x89\x1e\x6d\x14\x89\x4d\x32\xba\xf0\x34\x1e\x9f\x47\xe2\x3d\x53\xc8\x0c\x2e\x76\xc2\x5f\xa3\x41\x07\x19\x13\x90\x22\x78\x65\xf9\x39\xeb\x53\x29\x39\x32\x71\x0a\x7b\x0c\x60\x8e\x1c\xc3\x00\x4e\xe3\xf3\xba\x62\xe3\x3b\xfc\xfe\x72\x2f\x1e\x0c\x2d\xce\xe6\x13\xa4\x53\xfb\x3f\x06\x14\x85\x21\xb3\xbb\x17\xac\x5a\xee\xcd\xff\xb1\x0a\xf9\xbb\x8c\x69\xcc\x61\x8b\x4a\x0f\xc0\x6a\xe3\x95\xc5\xc4\xf8\x64\x50\xe4\xe1\x39\x99\xda\xfa\x38\xc8\x40\x30\x25\xe9\xa3\xa1\x56\x3b\xfc\x4e\xf9\xb9\x41\x13\x29\x39\x15\x1a\x45\xb8\x8d\x1c\xfe\x35\xcb\x1e\xd8\x26\xac\x80\xd8\xa8\xe9\xc2\xa8\x95\x7f\x99\x14\xa8\x15\x6d\x23\x54\x3b\xd2\xd0\x69\x8a\xe9\x4a\x85\x5a\x36\x2a\xc3\xb0\x14\xb5\x18\x6b\xde\x28\xc6\x5f\x24\x43\xf7\x4a\x43\x00\x36\x82\x7e\x34\xed\xc6\xf7\x0e\x25\xb1\x71\x38\xe3\xef\xb3\x92\xf2\xe2\xac\x61\x99\xd1\xc0\xb4\xf7\xa4\x94\x26\xac\xc1\x07\x6d\x7c\x53\xe7\xf1\x7a\xb0\x57\x76\x41\x92\xdf\xcc\xc0\x5d\x40\xe9\xfa\xa5\xa3\xd4\xae\x9f\xed\xea\xc6\x6c\x88\x9d\x4d\x92\x33\x6d\xee\x4c\xbb\x3e\x22\xb1\xa3\xfc\xdc\x32\xfb\x60\x6a\xb9\x82\x54\xf9\x83\x8e\xdf\x4a\x7d\xc4\xa7\xa0\x50\xb2\x72\x81\x98\x35\x4a\x59\xba\x79\xbd\x58\x0c\xa7\x5b\xe3\xd0\x5b\xaa\xf5\xb2\xd0\x6b\x85\x99\x0b\xfe\x70\xf8\xac\x26\x5b\xd7\x0f\x74\xc4\x84\x16\xda\xc5\x47\x5d\xea\x1a\xf8\x96\x5e\xd6\xa9\xe1\xf5\xbe\x97\x80\xc6\xd2\x46\xa6\x81\x01\x27\xf1\x60\x0f\x4c\xe6\xc8\xb6\x98\x45\x7f\x45\x15\x1d\x75\x73\x5b\x40\xaf\xe6\xe4\x97\xa9\xaf\xfb\x7d\x9b\x3a\xaa\x1f\x16\xb9\xfe\xce\x67\xc5\x29\x9a\xcb\x47\xcc\xef\xb3\x92\xa9\xe5\xbc\xfd\x33\x6e\xf0\xa9\x06\x53\x32\x77\x74\x76\xbb\x7c\x70\x3f\x56\x35\xda\x40\x29\x85\x54\x36\x68\x52\x84\x2d\xe3\x74\x36\x23\x43\x82\x65\x0f\x5b\x52\x16\x70\x09\xf0\xc1\xcb\x59\x40\x0d\x6a\x28\xa4\x02\x76\x74\xf9\x68\xe1\xc0\xff\x45\x53\xfd\x3e\x87\x0c\xd6\x18\xb9\x41\x81\x2a\xb8\x78\xee\x2d\x27\x0d\x03\x35\x90\xee\x5c\xf6\xa4\x2c\x7b\x40\x11\xb7\x9c\xba\xbe\x48\x52\xdc\x4b\xc1\x77\x2b\xf1\xda\x6c\xb7\xe2\x36\xbc\x34\x1a\xc8\x1b\x17\x84\xbe\xe5\x82\x0d\xfa\x6b\x74\xa8\x82\x35\xdc\xdc\x4b\x95\xa3\x0a\xc2\xed\xe2\xad\x23\xf6\x03\xa7\x77\x45\xb6\xd5\x0d\x4e\xb7\xb5\xe4\x01\x27\x83\xeb\x22\xf0\x0e\x4a\xe0\x55\x87\x87\x36\x6e\xc4\x19\x90\x5f\xbb\x3c\xd9\xc3\x7d\x0b\x09\x09\x83\x1b\x54\xf6\x47\xd1\x70\xee\xff\xaf\x52\x3f\xd2\xf5\x96\x3e\x35\xbe\x5d\x93\x3f\x0c\x76\xe3\x4a\xfc\x21\xe2\x25\xd3\x52\xbf\x07\xde\xdb\xd4\x52\x5f\xe2\xb7\xba\x49\x39\x65\x7c\x07\x9d\xa6\x85\xde\x9b\x58\xd6\x46\x9c\x5d\x69\x54\x83\xcb\x8c\x28\x88\x1b\x54\x2c\xe5\x61\xd1\x3d\x2c\x29\x69\x4b\x7b\x6c\x67\xf0\x0a\x6d\x2e\xd6\x8d\xb2\x66\xe9\xa8\x41\x51\x48\x85\xb4\x11\xf7\x36\xd1\xd7\xd7\x6c\x68\xd5\x44\xaf\x17\xfe\xb1\x22\x08\x99\x17\x59\x1c\xa9\x68\x9b\xec\xd4\x53\x8d\xc7\xa0\x70\x4a\xda\x6b\xa8\x18\xf1\xb9\x05\x75\x29\xc5\xac\x86\x8f\x9f\xb6\xff\x39\x33\xff\x7e\x6e\x3e\xa3\x5c\xcd\xcd\x3b\x4e\x3b\x3a\xbd\xac\xa8\x6d\xd0\x98\xc0\x5e\xb3\x8f\x8f\x47\xe2\x1c\x4a\xb6\x45\x60\xb0\x6f\xec\xad\xca\x98\xb1\x42\xb9\x3d\xb6\x17\xb4\x1a\xe9\x41\x23\x64\x50\x31\x12\x70\xa0\xf2\xb2\x5a\xe2\xef\xae\x3e\xb6\x7c\xcc\x96\x93\x65\x26\x89\x1c\x9f\x22\x58\x23\xc0\x6b\x8a\xe9\xee\x8a\x3d\xdd\x73\x14\x1b\x53\x06\x01\xac\xd8\x13\x55\x4d\x05\x5e\xf4\x94\x8d\x74\xe4\xb7\xed\x1c\x67\x10\x77\x2d\x7c\x31\xe2\x70\xe2\xd1\x01\x9e\x60\x4f\x1d\xde\x9e\x4c\xc4\x04\x4c\x62\x95\x8b\x49\xfc\x32\x17\x93\x58\xe3\xe2\x16\xf0\x2f\x70\x71\xf0\x2d\xf4\xe1\xbb\xc3\x55\x68\x90\xe3\xde\x11\x09\x44\xcf\xe5\xaf\xc2\x1f\x6a\x45\x15\x53\xbb\xcb\xf8\x83\xaf\x53\xd0\xea\x8a\x4e\x22\x14\xb2\xfc\x92\x53\x1e\x69\xb0\x2a\xdc\x49\x2f\x32\xb0\xfe\xf6\x65\x35\xae\x56\x43\x4c\x58\x1a\x33\x15\x78\xd7\x38\x00\xe5\xe5\x81\x89\x1c\x74\x29\x1b\x9e\xfb\xbb\x5c\xc6\x0d\x3c\x92\x29\x21\x63\x2a\xee\xa3\x97\x8e\xcf\x4f\x74\x7c\x7e\xa2\x8d\xbc\x68\xaf\x5b\xf9\x58\x87\x9a\xc5\x24\x44\x37\x69\xab\x3c\xbc\x4a\x56\xac\xae\xdd\x13\x9d\x84\x9a\xb2\x07\x57\x90\x1e\x4b\x14\xae\x7c\xfa\xa2\xae\xdd\xcd\x89\x91\xf0\x06\x9f\x0c\x2a\xc1\xf8\x9b\x98\xe5\xd4\x28\x26\x34\xa1\xb8\x20\x9e\xf7\x2a\x62\x86\x43\xb0\x4f\x9d\xbb\x0e\xff\x04\x70\xa1\x9b\x56\x1f\x7c\x66\xe5\xc1\xf3\xd3\xb9\x8e\xec\x96\x14\x5c\xb2\x29\xc7\xb9\x05\xf3\x01\xbb\x87\x3a\x33\xcf\x49\xcf\x7e\x62\xf6\x9d\xc0\xad\x30\x34\xf9\xc2\xed\x11\xb4\xa1\x79\xc9\x29\xca\x9f\x01\x2e\xe8\x92\x5e\x3e\xea\xa3\xb1\x53\xf9\x25\x93\x81\xa1\xa8\xad\x44\xc7\x82\x1a\x41\x19\x99\xdd\x5a\x52\xb4\x3a\x3c\x37\x5c\xa6\x6c\xf6\xe0\xcd\x65\x16\xb0\x65\x83\x91\xab\xbd\xa9\x4c\xbd\x29\x3b\xaf\x84\xbd\x35\x0f\x91\x3f\xdf\x3c\xdf\xfc\x1d\x00\x00\xff\xff\x31\x0c\xec\x4b\x3c\x2d\x00\x00")

func schemaRegolitheJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaRegolitheJson,
		"schema/regolithe.json",
	)
}

func schemaRegolitheJson() (*asset, error) {
	bytes, err := schemaRegolitheJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/regolithe.json", size: 11580, mode: os.FileMode(420), modTime: time.Unix(1520981591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/regolithe.json": schemaRegolitheJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"regolithe.json": &bintree{schemaRegolitheJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

