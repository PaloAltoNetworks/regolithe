// Code generated by go-bindata.
// sources:
// schema/rego-abstract.json
// schema/rego-api.json
// schema/rego-attribute.json
// schema/rego-info.json
// schema/rego-model.json
// schema/rego-spec.json
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaRegoAbstractJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x51\xb1\x4e\xc3\x30\x10\xdd\xf3\x15\x27\xd3\xb1\x69\x98\x18\xb2\xb1\x23\x81\x60\x44\x0c\xae\x7d\x49\xae\x4a\x6d\xeb\x7c\x0c\x55\x95\x7f\x47\x8e\x49\x4a\x08\x0c\x48\x0c\xcd\x10\x29\xef\xdd\x7b\xef\xde\xe5\x5c\x00\x00\xa8\x4d\x34\x1d\x1e\xb5\xaa\x41\x75\x22\xa1\xae\xaa\x43\xf4\xae\xcc\xe8\xce\x73\x5b\x59\xd6\x8d\x94\xb7\x77\x55\xc6\x6e\xd4\x36\x2b\x85\xa4\xc7\xa4\x7b\xc6\xd6\xf7\x24\x1d\xc2\x4b\x40\x43\x0d\x19\x2d\xe4\xdd\x34\x67\x31\x1a\xa6\x30\x42\x35\xa8\x7b\x07\x5a\x84\x69\xff\x2e\x08\xbe\x01\x0d\xf1\x27\x95\x9c\xc2\x68\xee\xf7\x07\x34\x32\xa1\xda\x5a\x4a\x53\xba\x7f\x62\x1f\x90\x85\x30\xaa\x1a\x1a\xdd\x47\xdc\x16\x79\x26\x7c\x65\x72\xcb\xac\x9d\x52\x97\xf8\x22\x4d\x33\xeb\xd3\x67\xd8\x4c\x7e\x2b\xf0\x40\x51\xc6\xc5\x67\xbf\xf4\x95\xea\x33\x06\xc6\x88\x4e\xd0\xc2\x62\xef\xd9\x8a\x04\x8f\xeb\xf8\xdf\x0b\x2f\x26\xbc\xc3\xc7\x46\xd5\xf0\xba\xa2\xd2\x73\x56\x1b\xc6\x44\x2b\xc6\xd6\x97\xf3\x76\xbb\xf4\x3f\xd5\xb0\xd2\xbc\x2d\x90\x0b\x3f\x5c\x92\x95\xe9\xa8\xb7\x8c\xee\x7f\x0e\x36\xba\x81\x0e\x74\x9d\x07\x0b\xf4\xe7\x53\x15\xf9\x3d\x14\x1f\x01\x00\x00\xff\xff\x95\x75\x4d\x4c\x4d\x03\x00\x00")

func schemaRegoAbstractJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaRegoAbstractJson,
		"schema/rego-abstract.json",
	)
}

func schemaRegoAbstractJson() (*asset, error) {
	bytes, err := schemaRegoAbstractJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/rego-abstract.json", size: 845, mode: os.FileMode(420), modTime: time.Unix(1520999747, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaRegoApiJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x6f\xdb\x30\x0c\xc5\xef\xfe\x14\x84\xb6\x63\x32\xef\xb4\x83\x6f\xfb\x06\xc3\xb6\xdb\x30\x0c\xb4\x44\xdb\xcc\x14\x49\xa5\xe8\x02\x45\x90\xef\x5e\xd8\xca\xbf\x02\x2e\x8a\x26\xcd\xc5\x87\xe7\xf7\xa8\x1f\x1f\xb8\xab\x00\x00\xcc\xe7\x6c\x07\xda\xa2\x69\xc0\x0c\xaa\xa9\xa9\xeb\x4d\x8e\x61\x5d\xd4\x2f\x51\xfa\xda\x09\x76\xba\xfe\xfa\xad\x2e\xda\x27\xb3\x2a\x49\x65\xf5\x34\xe5\x7e\x52\x1f\x3d\xeb\x40\xf0\x2b\x91\xe5\x8e\x2d\x2a\xc7\x70\xf4\x39\xca\x56\x38\xcd\x52\x03\xe6\x7b\x00\x54\x15\x6e\x47\x25\x88\x1d\x20\xe4\xa5\x94\x3e\xa5\x79\x78\x6c\x37\x64\xf5\xa8\xa2\x73\x3c\xb9\xd0\xff\x90\x98\x48\x94\x29\x9b\x06\x3a\xf4\x99\x0e\x16\xa1\x87\x91\x85\x9c\x69\xe0\xcf\xac\x1c\xd4\xac\xff\x02\x6e\xc9\xcc\xda\xdf\x55\x55\xdc\xe9\x72\xcc\xee\xec\xb7\x42\xa8\xf4\x42\x5b\x5a\xe6\xf7\x40\x60\x07\xf6\x0e\x0a\x67\x06\x8b\x01\x5a\x82\x92\x77\xd0\x49\xdc\xc2\x54\x8d\x1d\x45\x28\xe8\xe2\xb2\xa7\xe9\xc7\xa5\xdb\x18\x3d\x61\x30\xa7\xbf\xfb\xb3\xd1\x38\xf2\x74\x0b\x5a\xc9\xdf\x09\x2d\x09\xd9\x69\xf1\x77\xe0\x61\x62\xe0\x0c\x17\xd9\x6b\x9e\xee\x49\xaf\xaf\x44\x48\x85\x1f\xf9\x3e\xa5\x9c\x4f\xef\x2d\xbe\x93\x13\xc6\x4c\x0e\x30\x03\x82\xe7\xf0\x1f\x34\x16\xa6\x0b\xf6\xd7\x50\xb2\x0a\x87\x7e\x99\x64\x4c\xee\xa6\xa3\x2e\xf9\x8f\x2b\xa9\x2a\xdf\x7d\xf5\x1c\x00\x00\xff\xff\x2b\x2e\x26\x33\x8c\x04\x00\x00")

func schemaRegoApiJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaRegoApiJson,
		"schema/rego-api.json",
	)
}

func schemaRegoApiJson() (*asset, error) {
	bytes, err := schemaRegoApiJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/rego-api.json", size: 1164, mode: os.FileMode(420), modTime: time.Unix(1520999528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaRegoAttributeJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xcd\x6e\xdc\x38\x0c\xbe\xe7\x29\x88\xd9\x05\x7a\x49\x37\x7b\x58\xf4\x90\x5b\x0f\x7b\xe8\xad\x68\xf7\x56\x14\x01\x6d\xd3\x36\x1b\x59\x72\x25\x3a\x99\x41\xd1\x77\x5f\x48\xb2\x67\x3c\x13\x39\xb1\xd5\xf4\xd2\x26\x94\x48\x7e\xfc\x11\x3f\x3a\x3f\xae\x00\x00\x76\x7f\xba\xb2\xa5\x0e\x77\xb7\xb0\x6b\x45\xfa\xdb\x9b\x9b\x6f\xce\xe8\xb7\x51\xfa\x97\xb1\xcd\x4d\x65\xb1\x96\xb7\x7f\xbf\xbb\x89\xb2\x3f\x76\xd7\x51\x53\x58\x14\x79\xbd\x4f\xd4\x18\xc5\xd2\x12\x7c\xee\xa9\xe4\x9a\x4b\x14\x36\x7a\xba\x57\x91\x2b\x2d\xf7\x41\x74\x0b\xbb\xf7\x1a\x50\xc4\x72\x31\x08\x81\xa9\x01\xc1\xa5\xb4\xe4\xd0\x07\xe3\xa6\xf8\x46\xa5\x4c\x52\xac\x2a\xf6\xb7\x50\x7d\xb4\xa6\x27\x2b\x4c\x6e\x77\x0b\x35\x2a\x47\xe3\x15\x4b\xdf\x07\xb6\x54\xed\x6e\xe1\x4b\x90\x04\xa9\xc6\x8e\x46\x23\x27\xf3\xb3\xdf\xe7\x20\x83\xf4\xeb\xf5\x55\xb4\xd7\xcf\x1d\xfd\x38\x69\xa0\x52\xe6\x91\xaa\xbb\xb2\x45\x7b\x7e\x94\x8a\xfa\x13\x35\xb4\xef\x41\x5a\x14\x1f\xb1\x58\xd6\xcd\x2c\x0f\xdd\xe0\x04\x5a\xa3\x8d\x05\x31\x50\x10\x3c\xa0\xe2\x6a\x06\xf0\x2c\x27\x51\x7d\x77\x3c\xfc\x79\x9d\x82\x65\xb8\xa4\x97\x81\xbd\x8f\xf7\xbd\xc3\x81\x1c\xd4\xc6\x02\x5e\x54\xc8\xbb\x85\x7f\xf5\xd0\x2d\xe1\x41\x6b\xf1\x70\x79\xc8\x42\xdd\x53\xf7\xcf\xc6\x11\x62\x49\x47\x35\x88\x69\x48\x93\x45\x09\x95\x7d\x3e\xa6\xff\x5a\x9a\x45\xc0\x0e\xce\xd4\xa1\x38\x80\x6f\xd6\x02\xcb\x7b\xd2\x8b\x49\x2e\x8c\x51\x84\x3a\x9d\xe5\xd2\x52\xe8\xd6\x3b\xa3\xd5\x61\x23\x9e\x12\x35\x78\x35\x5f\x66\x47\x02\xd5\x10\x9a\x21\x98\x24\xf0\xcd\x36\x7f\x08\xdb\x70\x55\x54\xe3\xa0\xe4\xce\xd8\x8a\xec\x2a\x5c\xa1\xee\xa1\xca\x97\x49\x1b\x1c\x55\x80\x0e\x46\x9b\x10\x6c\x7a\xa4\xf7\xf4\xa4\xd8\x9b\xc0\x05\x97\xab\xc0\x4d\xae\xd3\x20\x17\x40\x7c\x99\xfa\xf1\x04\xe7\x1a\x76\xac\x85\x1a\xb2\xfe\x47\x3d\x28\x15\xff\xef\x8a\x28\x99\x86\xcc\xb1\x25\xbf\x2e\x04\xd0\x5b\x2a\xf3\x5a\x70\xa6\x9b\x97\xbb\xb9\xf9\x35\x99\x3b\x8a\xd6\xe6\xed\xd9\xb1\x42\xfb\xde\xb8\x9c\xb8\xfb\xa1\x50\x5c\xaa\x03\x4c\x16\x5e\x88\xfe\xfa\xd2\x7c\xe8\x00\x7f\x43\xec\x40\x69\x70\x35\x2b\x21\x8b\x85\x5a\xd7\x55\xe7\x4f\xb1\xa0\xd8\xe9\x7e\xf2\x45\x43\xbe\xc7\xfb\xc1\x7a\xb8\x2e\xab\x58\xb5\xb1\xc4\x8d\xbe\xf3\x0f\x65\xfb\xac\x82\x51\x3d\xfb\x9d\xd5\xc6\x76\x28\xab\x3c\xc7\xab\x2f\x76\x08\xf9\xe1\x3f\xe7\xd3\x93\x2f\x4b\x97\xb7\xa3\x46\x87\xac\x52\x07\x7d\x6b\x74\x52\xe3\xc3\xc7\x87\x7f\x16\xe4\xef\x52\xf2\x92\x2b\x9b\x92\x57\x28\x74\x4e\x29\xe9\xc7\xdc\x90\xc8\xca\x19\x79\xaa\xcf\x23\x2b\x05\x2d\x3e\x10\x20\x9c\x08\x65\x34\x95\x53\x2b\xae\x48\x0b\xd7\xbc\x19\xc9\x6c\x40\x23\x74\xc8\x1a\x66\xa6\xb6\xbd\xb1\x41\xf3\xf7\x81\x3e\x8c\x7c\xed\x9f\x59\x1a\xaa\xae\x68\xff\x0b\x28\x35\x44\x0b\x39\x69\xea\x70\x7f\xa7\x48\x37\xd2\xae\x02\xd0\xe1\x9e\xbb\xa1\x83\xa8\xf2\x94\xdd\xa6\xa5\x66\x9c\x78\x0b\x88\x26\xca\x58\x44\xb4\x9e\xc8\x26\x40\x0b\x6c\x3b\xe1\x39\x92\x54\x0e\x20\xd6\x9b\x52\xc4\xfa\xb7\xa7\x88\xf5\x96\x14\x8d\x80\x7e\x63\x8a\xc2\x47\xc0\x1a\x2c\xfe\xe2\xab\xd0\x66\xd8\x99\x5e\x81\x98\x8e\xbb\xd7\x2f\xf1\x52\x6f\xb9\x43\x7b\xc8\xe3\xa5\xf8\x8e\x61\xb4\x91\x4d\x4e\x96\xb0\xca\xd9\x9a\xd9\x81\x57\x0d\x9b\x73\xa6\xe3\xe3\x77\xe1\x66\xbf\xa3\x66\x8e\x5b\x47\xa5\xa5\x75\x64\x7c\xe6\x34\xea\x01\xea\x0a\x5c\x6b\x06\x55\xf9\x7e\xa8\x08\x95\xc0\x23\x4b\x0b\x25\xda\xc5\x8e\x7c\x01\xd0\xab\xf1\x9e\xcb\xe7\x3d\x27\x26\xab\x16\xa3\x5e\xee\x12\xb9\x48\x6e\x6e\x28\x46\x23\xeb\xa7\x43\x87\x7d\xef\xdf\xa4\x18\xe8\xb9\xbc\x0f\x0f\xf5\xb1\x25\x1d\xc6\x46\x1c\x56\x2e\x7c\xe1\x89\x81\x37\xb4\x17\xb2\x1a\xd5\x9b\x9c\x31\x22\x16\xb5\x63\xd2\x19\x7d\x74\x52\xcd\x29\xd3\xea\x9c\x84\x70\x4d\xbd\x7a\x5a\xae\x5e\x30\x93\xf7\x21\xee\x23\x29\x26\x08\x47\xb5\x32\x78\x19\x70\x38\x48\x37\xc8\x09\x42\x42\xae\xd8\x25\x4d\x9d\xfd\x61\xea\x3c\x54\xee\xd2\x3b\xf1\xd8\x02\x6b\xb6\xd3\xb8\x93\x65\x4c\xe9\xa8\x97\x53\xeb\xa8\xfa\xb9\x34\x2b\x4b\xee\xfc\xcd\x89\x25\x07\xcd\x25\xcb\x61\x2b\x69\xae\x6e\x83\x46\x99\x02\x93\x1f\x14\xca\x94\xcf\xa4\xf4\x2a\xfe\xfb\xf3\xea\xff\x00\x00\x00\xff\xff\xba\xde\xef\x91\xef\x14\x00\x00")

func schemaRegoAttributeJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaRegoAttributeJson,
		"schema/rego-attribute.json",
	)
}

func schemaRegoAttributeJson() (*asset, error) {
	bytes, err := schemaRegoAttributeJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/rego-attribute.json", size: 5359, mode: os.FileMode(420), modTime: time.Unix(1520999472, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaRegoInfoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x51\x3d\x4f\xf3\x30\x10\xde\xf3\x2b\x4e\x7e\xdf\xb1\x25\x4c\x0c\xd9\x3a\xb2\xa0\x0a\x24\x16\xc4\x70\x75\xce\xed\x55\x6e\x6c\xec\x0b\x02\x55\xfd\xef\xc8\x76\x03\x21\xc9\xc6\x92\x28\x4f\x9e\xaf\xbb\x3b\x57\x00\x00\xea\x7f\xd4\x07\x3a\xa1\x6a\x40\x1d\x44\x7c\x53\xd7\xc7\xe8\xba\x75\x41\x6f\x5c\xd8\xd7\x6d\x40\x23\xeb\xdb\xbb\xba\x60\xff\xd4\xaa\x28\x85\xc5\x52\xd2\x3d\xd2\xde\x59\x96\x03\xc1\x93\x27\xcd\x86\x35\x0a\xbb\x6e\xe0\xb5\x14\x75\x60\x9f\xa1\x06\xd4\xa6\x03\x14\x09\xbc\xeb\x85\xc0\x19\x40\x88\x4b\x2a\xf9\xf4\xd9\xdc\xed\x8e\xa4\x65\x40\xb1\x6d\x39\xb1\xd0\x6e\x83\xf3\x14\x84\x29\xaa\x06\x0c\xda\x48\x57\x4a\xa0\xb7\x9e\x03\xb5\xaa\x81\x97\x8c\x64\xd4\x07\x32\xfc\x71\xb5\x29\x3c\xe7\x64\xfc\xfd\x4e\x21\xa6\xfc\x8c\xbc\xae\xaa\xea\xaa\x1b\xc5\x9c\x67\x7e\x63\xec\x57\xed\x28\x81\xbb\xfd\xc8\x7f\x69\x15\xdb\x6c\x02\xe2\xa0\x8f\x94\x5e\x1a\xad\x05\xf4\x1c\xe7\x42\x83\xbd\x95\x24\x42\xcf\xea\xfb\xe7\x65\x3a\xd0\xdf\x0a\x3d\xe0\x29\xdf\x24\xdd\x32\xd9\x2d\x9e\x66\xa9\x54\xce\x5e\x6c\x35\xac\x75\x56\x6c\x12\xfd\x5c\x78\x43\xfa\x66\x7b\x3f\x8d\x9b\x4c\xf2\x93\x56\x95\xe7\xa5\xfa\x0a\x00\x00\xff\xff\x68\xee\x23\x7f\xd3\x02\x00\x00")

func schemaRegoInfoJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaRegoInfoJson,
		"schema/rego-info.json",
	)
}

func schemaRegoInfoJson() (*asset, error) {
	bytes, err := schemaRegoInfoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/rego-info.json", size: 723, mode: os.FileMode(420), modTime: time.Unix(1521000357, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaRegoModelJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\x4d\x8f\xd3\x30\x10\xbd\xf7\x57\x8c\x02\xc7\x2d\xe5\xc4\xa1\x37\xc4\x95\x03\x02\x6e\x08\xa1\xa9\x3d\x4d\x67\x71\x6d\xef\x78\x52\x51\xad\xfa\xdf\x51\xe3\xa4\x1f\x69\x43\x43\xba\xd2\x5e\x2a\xf5\x65\x66\xfc\xe6\xbd\xe7\xe4\x79\x02\x00\x50\xbc\x4d\x66\x45\x6b\x2c\xe6\x50\xac\x54\xe3\x7c\x36\x7b\x4c\xc1\x4f\x33\xfa\x2e\x48\x39\xb3\x82\x4b\x9d\xbe\xff\x30\xcb\xd8\x9b\xe2\x21\x77\x2a\xab\xa3\x7d\xdf\x57\x2a\x83\x63\x5d\x11\x7c\x8b\x64\x78\xc9\x06\x95\x83\x6f\xeb\x2c\x25\x23\x1c\x6b\x68\x0e\xc5\x47\x0f\xa8\x2a\xbc\xa8\x94\x20\x2c\x01\x21\x5d\xeb\xd2\x6d\xac\x87\x87\xc5\x23\x19\x6d\x51\xb4\x96\xf7\x55\xe8\xbe\x48\x88\x24\xca\x94\x8a\x39\x2c\xd1\x25\x6a\x4a\x84\x9e\x2a\x16\xb2\xc5\x1c\x7e\xd4\x48\x8d\x46\x34\xbf\xb1\xa4\x66\x4e\x53\x98\xf4\x97\xc7\x75\x17\x0c\x95\x18\xba\x78\x40\x5e\x59\xb7\x17\xf0\xe9\x72\x35\xfa\xf3\x61\x92\x79\xc4\x53\x82\xcf\xc7\x0e\x74\x8c\xa9\x03\x5e\xd3\xe9\x33\x27\xad\xf5\xc9\xf5\xa0\x01\x84\xa2\x50\x22\xaf\x3d\xa2\x1d\x46\xb5\xe2\xa1\x08\x6e\xbb\x0f\x59\x69\x7d\x79\xfc\x59\x5f\x52\x61\x5f\x16\x67\x05\xbb\xc3\xbf\xdd\xc9\xfe\x46\x08\x95\x6e\x2e\xf3\x7d\x45\x47\xf6\x64\x21\xbb\x0a\x06\x3d\x2c\x08\xf2\x10\xdb\xb7\xc5\x22\x04\x47\xe8\x8b\xab\x04\x2c\x39\x1a\x46\xa0\xff\xfc\x3c\x63\xec\xf9\xa7\xe7\xdc\x56\xe1\x04\xda\xbb\xab\x57\x85\xe9\x63\xd2\xf5\x65\xd7\x13\xd0\x5b\x44\x3e\xe1\x9a\xdc\xd4\x60\x22\x0b\x1b\x92\x74\x46\xe6\xf2\x56\x0c\xe7\xf0\x47\xc9\xdb\xe1\xd9\x5e\x60\xa2\xf3\x24\x83\xae\x38\x75\xa0\x66\x2a\xbc\x66\xce\x4b\xd2\x3b\x43\x2e\xa4\xc2\xb4\x19\x19\xb3\xf6\xfd\x35\x84\xc3\xde\xbd\xd6\xce\xa6\xef\x65\xa3\x16\x85\x37\x77\xdc\x7a\x4e\xd0\x4e\x18\x23\xc5\xf9\x2b\x7a\x08\x87\xe8\x2a\x41\xf7\xa2\x49\x3f\x36\x0f\x21\x50\x79\x7e\xaa\x1a\x63\x0e\x82\xb0\x2f\x6b\x1e\xe3\x7d\x90\x10\x46\xa7\x12\x8d\x26\xc0\x94\x95\x08\x41\x87\x7d\x50\xfe\x69\x4c\x15\xed\xfd\xdf\x82\x3c\xe4\x3f\x2e\xc9\x24\xff\xee\x26\x7f\x03\x00\x00\xff\xff\xd1\x2d\x3f\xc2\xd1\x08\x00\x00")

func schemaRegoModelJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaRegoModelJson,
		"schema/rego-model.json",
	)
}

func schemaRegoModelJson() (*asset, error) {
	bytes, err := schemaRegoModelJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/rego-model.json", size: 2257, mode: os.FileMode(420), modTime: time.Unix(1520999576, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _schemaRegoSpecJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\xb1\x6e\x83\x30\x10\xdd\xf9\x8a\x93\x9b\x31\x09\x9d\x3a\xb0\xb5\x73\xa5\x56\xed\x58\x65\x70\xf0\x11\x2e\x02\xdb\x3d\x5f\x86\x28\xe2\xdf\x2b\x4c\x02\x21\xa4\x51\xa5\x76\x28\x9b\xdf\xbd\x7b\x7e\xef\x01\x87\x04\x00\x40\xcd\x42\x5e\x62\xad\x55\x06\xaa\x14\xf1\x59\x9a\x6e\x83\xb3\x8b\x0e\x5d\x3a\xde\xa4\x86\x75\x21\x8b\xfb\x87\xb4\xc3\xee\xd4\xbc\xdb\x14\x92\x0a\xdb\xbd\x37\xdc\xb8\x8a\xa4\x44\x78\xf7\x98\x53\x41\xb9\x16\x72\xf6\xc4\x33\x18\x72\x26\x1f\xa1\x0c\xd4\xa3\x05\x2d\xc2\xb4\xde\x09\x82\x2b\x40\x43\xb8\xb6\x25\x7b\x1f\xc5\xdd\x7a\x8b\xb9\x9c\x50\x6d\x0c\xb5\x2c\x5d\xbd\xb2\xf3\xc8\x42\x18\x54\x06\x85\xae\x02\x1e\x29\x8c\x9f\x3b\x62\x34\x2a\x83\x8f\x88\x44\xb4\x76\x06\x2b\x15\xcf\xab\x79\xd2\x31\xfd\xb9\xc4\x61\xe0\xf6\xf6\xc6\xf8\xc8\x96\x66\xd6\xfb\xa3\xab\x7e\x78\x91\xf4\x99\x82\xc4\x84\xbd\x5e\x7b\x6a\x7b\x62\xf4\x8c\x01\xad\xa0\x81\x51\xc0\x5e\x8a\x04\xeb\xe9\xf5\xdf\x37\x33\x62\x38\x8b\x2f\xc5\x28\xff\xf9\x73\x50\x33\xc6\x76\xac\x18\x37\x6e\xd1\xbb\x5b\xb6\x2f\x5e\x35\x93\x9d\xd5\x08\x19\xe6\xcd\x70\xb3\xca\x4b\xaa\x0c\xa3\xfd\x9b\xc2\xa2\x1a\x68\x4f\xff\xb3\x30\x4f\xbf\xa9\xaa\xfb\x12\x27\x3d\x5d\x54\xf1\xa4\x03\x02\xd9\xc2\x71\x1d\x7f\x8b\x9f\x17\x71\x33\xed\x8d\xa4\x17\x29\xa3\xcd\x6b\x39\x87\x8c\x1d\xde\x24\x4d\xf2\x15\x00\x00\xff\xff\x49\xc5\x5f\x85\x4c\x04\x00\x00")

func schemaRegoSpecJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaRegoSpecJson,
		"schema/rego-spec.json",
	)
}

func schemaRegoSpecJson() (*asset, error) {
	bytes, err := schemaRegoSpecJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/rego-spec.json", size: 1100, mode: os.FileMode(420), modTime: time.Unix(1520999697, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/rego-abstract.json": schemaRegoAbstractJson,
	"schema/rego-api.json": schemaRegoApiJson,
	"schema/rego-attribute.json": schemaRegoAttributeJson,
	"schema/rego-info.json": schemaRegoInfoJson,
	"schema/rego-model.json": schemaRegoModelJson,
	"schema/rego-spec.json": schemaRegoSpecJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"rego-abstract.json": &bintree{schemaRegoAbstractJson, map[string]*bintree{}},
		"rego-api.json": &bintree{schemaRegoApiJson, map[string]*bintree{}},
		"rego-attribute.json": &bintree{schemaRegoAttributeJson, map[string]*bintree{}},
		"rego-info.json": &bintree{schemaRegoInfoJson, map[string]*bintree{}},
		"rego-model.json": &bintree{schemaRegoModelJson, map[string]*bintree{}},
		"rego-spec.json": &bintree{schemaRegoSpecJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

