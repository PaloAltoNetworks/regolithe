package spec

// AttributeFormat represent the allowed format for an attribute.
type AttributeFormat string

// Various values for an AttributeFormat.
const (
	AttributeFormatFree  AttributeFormat = "free"
	AttributeFormatEmail AttributeFormat = "email"
	AttributeFormatPhone AttributeFormat = "phone"
	AttributeFormatIPv4  AttributeFormat = "ipv4"
	AttributeFormatIPv6  AttributeFormat = "ipv6"
	AttributeFormatCIDR  AttributeFormat = "cidr"
	AttributeFormatDate  AttributeFormat = "date"
)

// AttributeUniqueScope represent the unique scope for an attribute.
type AttributeUniqueScope string

// Various values for an AttributeUniqueScope.
const (
	AttributeUniqueScopeLocal  AttributeUniqueScope = "local"
	AttributeUniqueScopeGlobal AttributeUniqueScope = "global"
)

// AttributeType represents the various type for an attribute.
type AttributeType string

// Various values for AttributeType.
const (
	AttributeTypeString AttributeType = "string"
	AttributeTypeInt    AttributeType = "integer"
	AttributeTypeFloat  AttributeType = "float"
	AttributeTypeBool   AttributeType = "boolean"
	AttributeTypeEnum   AttributeType = "enum"
	AttributeTypeList   AttributeType = "list"
	AttributeTypeObject AttributeType = "object"
	AttributeTypeTime   AttributeType = "time"
	AttributeTypeExt    AttributeType = "external"
)

// AttributeNameConverterFunc is the type of a attribute name conveter.
type AttributeNameConverterFunc func(name string) string

// AttributeTypeConverterFunc is the type of a attribute type conveter.
type AttributeTypeConverterFunc func(typ AttributeType, subtype string) (converted string, provider string)

// An Attribute represents a monolithe specification attribute.
type Attribute struct {
	AllowedChars   string          `json:"allowed_chars,omitempty"`
	AllowedChoices []string        `json:"allowed_choices,omitempty"`
	Autogenerated  bool            `json:"autogenerated,omitempty"`
	CreationOnly   bool            `json:"creation_only,omitempty"`
	DefaultOrder   bool            `json:"default_order,omitempty"`
	DefaultValue   interface{}     `json:"default_value,omitempty"`
	Deprecated     bool            `json:"deprecated,omitempty"`
	Description    string          `json:"description,omitempty"`
	Exposed        bool            `json:"exposed,omitempty"`
	Filterable     bool            `json:"filterable,omitempty"`
	ForeignKey     bool            `json:"foreign_key,omitempty"`
	Format         AttributeFormat `json:"format,omitempty"`
	Getter         bool            `json:"getter,omitempty"`
	Identifier     bool            `json:"identifier,omitempty"`
	Index          bool            `json:"index,omitempty"`
	MaxLength      uint16          `json:"max_length,omitempty"`
	MaxValue       float64         `json:"max_value,omitempty"`
	MinLength      uint16          `json:"min_length,omitempty"`
	MinValue       float64         `json:"min_value,omitempty"`
	Name           string          `json:"name,omitempty"`
	Orderable      bool            `json:"orderable,omitempty"`
	PrimaryKey     bool            `json:"primary_key,omitempty"`
	ReadOnly       bool            `json:"read_only,omitempty"`
	Required       bool            `json:"required,omitempty"`
	Secret         bool            `json:"secret,omitempty"`
	Setter         bool            `json:"setter,omitempty"`
	Stored         bool            `json:"stored,omitempty"`
	SubType        string          `json:"subtype,omitempty"`
	Transient      bool            `json:"transient,omitempty"`
	Type           AttributeType   `json:"type,omitempty"`

	ConvertedName string `json:"_"`
	ConvertedType string `json:"_"`
	TypeProvider  string `json:"_"`
	Initializer   string `json:"_"`
}
