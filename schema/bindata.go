// Code generated by go-bindata.
// sources:
// gen.sh
// rego-abstract.in
// rego-abstract.json
// rego-attribute.in
// rego-info.json
// rego-spec.in
// rego-spec.json
// rego-type-mapping.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcf\x31\x0a\x02\x31\x10\x85\xe1\x3e\xa7\x18\x57\x21\x5a\x24\x39\x80\x20\x28\x58\xd8\xca\x5a\x87\x49\x8c\xd9\xa8\x9b\x84\xcc\x78\x7f\x71\xd9\x42\x6c\x2d\xdf\x5f\x7c\xf0\x96\x0b\xe3\x52\x36\x0e\x69\x10\xa2\x86\xf6\x04\x55\x03\x48\x32\xd6\xee\xfb\xfe\x7c\x3a\x5c\xfa\xa3\xb5\x46\x76\xab\xb5\x47\x86\x16\x62\x51\xc8\xdc\x92\x7b\x71\xd0\x29\x6f\x3a\x69\xa2\x9c\xbb\x23\x6e\xe8\x59\xa7\x0c\xbb\x9f\x74\xa7\x92\xff\xf5\xa9\x06\xff\x65\x4f\x73\x72\x45\x1b\x41\xdd\x40\x7f\xae\x5c\x91\x51\xc7\xb2\x15\xb1\xa8\x79\x82\xaa\x8f\x08\xe4\x87\x30\x22\x68\xf1\x0e\x00\x00\xff\xff\x19\x53\xac\x2b\xf3\x00\x00\x00")

func genShBytes() ([]byte, error) {
	return bindataRead(
		_genSh,
		"gen.sh",
	)
}

func genSh() (*asset, error) {
	bytes, err := genShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.sh", size: 243, mode: os.FileMode(493), modTime: time.Unix(1532992790, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\xc4\x30\x10\x44\xfb\x7c\xc5\x2a\x47\x79\x87\xa9\x28\xd2\x1d\x12\x05\x1d\x42\xa1\x8e\x36\xf6\x9a\xf8\x64\x6c\x6b\x77\x4f\x08\xa1\xfc\x3b\x4a\x0c\xe1\xa0\xa0\xb3\x76\xde\x78\x46\xf3\xd1\x00\x00\xb4\x57\x62\x27\x7a\xc5\xb6\x83\x76\x52\x2d\x9d\x31\x27\xc9\xe9\x50\xaf\xd7\x99\x5f\x8c\x63\xf4\x7a\xb8\xb9\x35\xf5\xb6\x6b\xf7\xd5\xa9\x41\x23\x2d\xbe\xe3\x28\xca\x68\xf5\x5b\x70\x24\x96\x43\xd1\x90\xd3\x2a\x27\xc0\x2f\x02\x30\xc6\xfc\x26\xa0\x19\x1c\xd9\x88\x4c\x80\x20\xa4\x90\x3d\x8c\x28\x04\xa8\xca\x61\x3c\x2b\x09\x60\x72\x26\x33\x30\x45\x5c\x7e\x12\xd0\x09\x15\x2c\x26\x18\x09\x98\xce\x42\x0e\x42\xd2\x0c\x59\x27\x62\x90\x42\x36\xf8\x60\x2b\xbc\x75\x7c\x2f\x6b\xc5\x3c\x9e\xe8\xa7\x20\x3a\x17\x16\x0c\xe3\x23\xe7\x42\xac\x81\xa4\xed\xc0\x63\x14\xda\x37\x95\x29\x97\x4a\xdd\xaa\x7a\xb7\x86\xbf\xee\x75\x4b\x26\xbf\xa4\xed\x8c\x23\x1f\xd2\x9a\x21\xe6\xc2\xb1\xe1\xf3\xfa\x9a\xb7\xc1\x36\xfa\xdf\xb0\x61\x38\xf6\xfd\xd3\xc3\xdd\x73\x7f\x3f\x0c\x7f\xff\x6a\xe6\xe6\x33\x00\x00\xff\xff\x33\x37\x6b\x77\xd3\x01\x00\x00")

func regoAbstractInBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractIn,
		"rego-abstract.in",
	)
}

func regoAbstractIn() (*asset, error) {
	bytes, err := regoAbstractInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.in", size: 467, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x0c\xdc\x02\x05\xde\x37\xae\xbb\xc0\xa2\x40\x73\xcb\xa1\x87\x00\x7b\x28\x16\x7b\x6a\x90\x06\x23\x71\x64\xb1\xa5\x48\x75\x48\x39\xf6\x2e\xf2\xdf\x17\x24\x25\x59\x4e\xfc\x21\x5b\x8a\xd3\xed\xa5\x8e\x38\x1c\xce\x33\x1f\x0f\x87\x94\xfe\xb9\x00\x00\x98\xbc\xb5\x69\x4e\x05\x4e\xae\x60\x92\x3b\x57\x5e\xcd\x66\xdf\xad\xd1\xd3\xf8\xf4\xbd\xe1\xf9\x4c\x30\x66\x6e\xfa\xe1\xe3\x2c\x3e\x7b\x33\xb9\x8c\x33\x9d\x74\x8a\xfc\xbc\xeb\xc4\x3a\xc6\xd4\x35\x03\x82\x6c\xca\xb2\x74\xd2\xe8\x30\xac\x01\x6b\x09\x40\xa5\xcc\x83\x05\x67\x40\x50\xaa\x90\x09\x10\x2c\x39\x30\x19\x24\x68\x09\xd0\x39\x96\x49\xe5\xc8\x02\x6a\x31\x33\x0c\x4c\x0a\xbd\x26\x0b\x2e\x47\x07\x29\x6a\x48\x08\x98\x2a\x4b\x02\xa4\x76\x06\x8c\xcb\x89\xc1\x96\x94\xca\x4c\xa6\x51\xb8\xb5\x71\x55\x06\x13\x4d\xf2\x9d\xd6\x06\xa2\x10\xd2\x8b\xa1\xfa\xc2\xa6\x24\x76\x92\xec\xe4\x0a\x32\x54\x96\x2e\x2f\xa2\x4c\xd9\x1d\x89\xbe\x8a\x73\x5b\x0b\x37\x9e\x47\x5f\x32\x65\x7e\xb5\x37\x33\x41\x99\xd4\x61\x0d\x3b\xeb\xcc\x68\xc5\x1f\xc3\xaf\xc7\xd6\x61\xad\x74\xff\xc5\xb6\x42\x6b\x47\x9f\xc4\xe0\x0f\x69\x83\x93\x17\xc4\x56\x1a\x4d\xa2\xe3\xe9\xf7\x4f\xe7\xee\x77\xcf\x86\x68\x89\xce\x11\xeb\x2f\xdb\x9d\xd5\x8a\x7d\x5b\xdc\x7e\x98\x7e\xba\xfb\xff\xdb\xad\xc3\x1b\x70\x90\x19\x57\x4f\x2c\x3a\x84\xaa\x93\x35\x52\x03\x42\x89\xec\x64\x5a\x29\xe4\x06\xf0\x7b\xb8\x71\xf0\x20\x95\x82\xca\x67\x99\x52\xdd\x39\x19\x9b\x02\x5c\x4e\x50\x32\x2d\xa4\xa9\x6c\x33\x2b\x24\x21\xa0\x10\x60\x18\xcc\x82\xf8\x81\xa5\xa3\x20\x6a\x34\xd9\x26\x87\xc5\x53\x0f\xb6\xf6\x4a\x47\xc5\x76\x97\xf4\x0b\xe3\x3e\xf0\x7f\x52\xc9\x64\x49\x3b\x6f\xe5\x1a\x8e\xf7\x87\x37\x90\x9b\x61\x12\x10\x75\xef\xb2\x32\x28\x67\xfa\x59\x49\x26\x31\xb9\x82\xdb\x9d\x52\x41\x52\x63\x41\x7b\x34\xad\x41\x1d\x90\xe9\xc2\xd9\x29\x79\xb7\xc7\xe4\xfe\x69\xba\x31\x6d\x47\x61\x6f\x5f\xc2\xd3\x15\x89\xfb\x34\x47\x3e\x2c\xfe\x0c\x56\x88\xd2\x9c\x96\x65\xe4\x2e\x04\xeb\x58\xea\x79\x27\x58\x45\x65\x1d\xe4\x46\x1b\xf6\x9c\x98\x10\x2c\x50\x49\x71\xc0\x75\xd0\xcd\x9b\xa8\x72\xb7\x07\x61\xcd\x33\x3d\x60\x1a\x99\xf6\xf0\xcb\x36\xa0\xd7\x51\x87\x07\x50\xf9\x9a\x32\xfc\x3c\x2d\x57\x25\xc1\x67\x5d\x15\xc7\xe0\xdb\xc7\x07\x1b\x13\x0e\xd7\xda\x56\xfd\xb5\xff\x0e\x2f\x00\x1d\xbe\xf3\x13\xbf\xdd\x5e\x4f\xbf\xfe\x36\xfd\x74\x77\x8b\xd3\xbf\xaf\xa7\x5f\x3d\xc1\xfd\xef\xed\xfe\x40\x40\x4b\xfd\x3b\x47\x0f\x85\xaa\x72\x66\x4e\x9a\x18\x5d\x28\xd6\xe3\x03\xf5\x57\xde\xd9\x66\x41\x5a\xd8\x50\x09\xc9\x2a\xd0\x47\x82\xe9\x0f\xd2\x47\x65\x62\x62\x8c\x22\xdc\x53\xcc\x7d\xf0\xa5\x4c\x61\x07\xbf\x37\x5a\xad\x46\xc0\xe7\xfb\x05\xaf\xca\xd7\x96\x6f\x34\x44\x15\x2a\x30\x2c\x43\xe0\x99\x20\x2c\x77\x76\x9c\x82\x32\xac\x94\xbb\x37\x2c\x88\x4f\xc6\x19\x8a\xad\x61\xfc\x8d\xa0\x86\xf6\x08\xfd\x16\x15\xd6\x81\xb0\x8e\x47\xfe\x83\x7a\x55\xd3\x8b\x80\x0d\xe6\x9e\x0c\xb6\x81\xb2\x1d\xf4\x11\xa0\x6e\x1b\x52\x59\xc3\xbb\x84\x89\xd4\x8e\xe6\xc4\xfe\xa7\xae\x94\x8a\xff\x17\x49\x7c\xd2\xec\xce\x2d\x5f\xdc\x0d\x74\x48\xc9\x94\x8e\x57\xc2\x1d\x7d\xe7\x8f\x6d\xd7\xb4\x53\x23\xdb\x3e\x1a\x12\xd7\x51\xf6\x42\x5a\x62\x51\x2a\x1a\x90\xab\x9f\xa3\x86\x3a\x4f\xfd\x46\xf8\xdf\x4d\x54\x5a\x96\xc6\x8e\x95\xa5\x65\x95\x28\x99\xaa\x15\x34\x5a\x4f\xc8\xd5\x1e\x53\x6a\x9e\xf0\xb3\x1c\x57\x34\x2c\x1d\x32\xa9\x1c\x31\x26\xea\x74\xde\xda\xdc\x8c\x12\x8a\xdc\xec\xf3\x22\x2a\xf7\xac\x5c\x56\xec\x5d\x62\xcf\x5e\xbe\x99\x61\x92\x73\x7d\xef\xb7\x85\x71\xba\x09\xa8\x55\xbe\xca\x4e\x93\x19\x2e\xd0\x9d\x8c\x24\x4e\x3f\x89\x83\xc8\xf7\xb5\x87\x0e\x4f\x6b\x3b\x99\xfa\x68\x8d\x9a\x0b\x94\xaa\x77\x83\x9a\x1b\xdd\x5b\xf3\xcd\x97\xc5\xef\x47\xc8\x7e\xec\x2b\x9b\x4a\xc1\x7d\x65\x05\xba\x03\x25\xea\xff\x0d\x63\xb1\x39\xf9\xae\x7d\x84\xfc\x0e\x37\x08\x39\x2e\x08\x10\xd6\x2d\x73\xad\xfe\xdc\xb9\x2e\x05\x69\x27\x33\x39\x0a\xb2\x4e\xcb\x88\x50\xa0\xd4\xd0\x51\xff\x32\x3c\x5d\x69\xf9\xb3\xa2\x9b\xfa\xd8\xe6\xa9\x7a\x98\x3b\xb4\xa0\xe5\xc8\x9e\xd0\x10\xb5\x9e\x3b\xb4\x05\x2e\xef\x15\xe9\xb9\xcb\x4f\x06\x54\xe0\x52\x16\x55\x01\x51\xcd\xf3\x33\x42\x73\x1e\xef\x7d\xfe\x6d\x11\x36\xfd\xc7\x60\x84\xc3\x8e\x03\x0d\xc0\x1d\x67\xa0\x06\x5f\xdb\x2d\x9d\x1b\xa0\xd4\x83\x43\x28\xf5\x2f\x1d\x42\xa9\x87\x86\xb0\x06\xf8\x8b\x86\x30\xdc\x74\x9e\x8a\xcd\x4f\x7e\xf5\xc3\x8c\x29\xa4\xbb\xa7\xa2\x74\xa7\x35\x77\x37\x59\xa0\xe5\xcb\x27\x71\xa9\xdb\x58\xc1\xa6\x2c\x49\x80\xcc\x20\x2c\x01\x86\x21\x1e\x48\xce\xcc\x96\xe1\x6e\xe3\x85\x5a\xf4\xf6\xde\xe4\xd5\x3a\xf4\x92\x65\x81\xbc\x1a\xaf\x43\x8f\xbb\x1b\xd4\x7a\x5f\xa5\x4d\x67\x42\x31\xd6\x0d\x9f\xb4\xe0\xd5\x85\x5b\xbe\x57\x00\xd2\xbe\x36\x19\x05\x47\xad\xed\xdc\x30\x2c\xa5\x4c\xa7\x1f\x9b\x36\x40\x44\x5d\xe1\xcd\x99\xcd\x4d\xa5\x44\xe0\x0a\x42\xe5\xe0\x41\xba\x1c\x52\xe4\xa3\x78\x70\x24\x80\x2f\x7a\x02\xb0\xaf\x73\x02\xb0\xce\x8c\x96\x7b\xb5\xae\x97\xbe\x92\x19\xdc\xe6\xdb\x2a\xa9\x0d\x18\xb6\x2f\x17\x58\x96\x9e\xd7\x9d\x81\x52\xa6\x3f\x02\xd9\x3f\xe4\xa4\xc3\x5e\x17\xdb\x0e\x1b\xde\x18\x38\x03\xef\x68\xe9\x88\x35\xaa\x77\xe7\xde\xc0\x1d\xa3\xb6\x92\xf4\x48\xb5\xb9\x56\x77\xee\x54\x1d\x14\xb3\x10\x8e\xee\x7b\xfe\x13\xc2\x30\xfa\x15\xce\x71\x2f\x0e\xfb\xf7\xb0\x41\x3c\x53\x06\xfb\x04\x29\x08\xf7\x2f\x44\x68\x61\xf6\x94\x55\xd2\xf6\x36\xe3\xe0\x17\x0c\x1b\xd2\x4e\x1e\xfc\x8c\xa0\x95\x6d\xca\x6f\xf0\x3d\xd1\xce\xd1\xed\x23\xcf\x9f\x6e\x3e\x59\xff\x55\x7f\xcf\x73\xf1\x78\xf1\x6f\x00\x00\x00\xff\xff\xe1\x5e\xb6\xd9\x57\x25\x00\x00")

func regoAbstractJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractJson,
		"rego-abstract.json",
	)
}

func regoAbstractJson() (*asset, error) {
	bytes, err := regoAbstractJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.json", size: 9559, mode: os.FileMode(420), modTime: time.Unix(1533001346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAttributeIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4f\x6f\xdb\x36\x14\xbf\xf7\x53\x3c\x18\x05\x0a\x6c\x4d\xb1\x01\xc3\x80\xe6\x96\x43\x0f\x01\x76\x28\x86\x9d\x9a\xa6\xc6\xb3\xf8\x64\x71\xa1\x48\xf6\x91\x72\xec\x0d\xf9\xee\x03\x29\xc9\x96\x12\xdb\x92\x25\xc5\xee\x74\x49\x20\x3d\xfe\xf4\x7e\x7c\xff\x29\x43\xe3\x9a\xf9\x8d\xa5\xd9\x35\xcc\xcc\xe2\x6f\x4a\xfc\xec\xfd\x9b\xd6\x53\x41\x2e\x61\x69\xbd\x34\x3a\x08\xfd\x21\x9d\x07\x93\xc2\x8a\xd8\x49\xa3\x49\x00\x7a\xcf\x72\x51\x78\x72\x1f\x9e\xaf\x45\x21\x64\x58\x88\xea\x33\x1b\x4b\xec\x25\xb9\xd9\x35\xa4\xa8\x1c\x3d\x13\xb5\xe8\x3d\xb1\x6e\xc9\xfd\xdb\x12\x89\x62\xdf\x56\x77\xbf\x5c\x7d\xbc\xff\xf9\xeb\xdb\xbd\xcf\x5b\x7c\x90\x19\x37\xcf\x54\xea\xa2\xb5\x23\x03\x52\x03\x82\x45\xf6\x32\x29\x14\x72\xcd\xf8\x03\xdc\x7a\x78\x94\x4a\x41\xe1\x08\x50\xa9\xe6\x9a\x94\x4d\x0e\x3e\x23\xb0\x4c\x2b\x69\x0a\x57\xaf\x72\x80\x5a\x00\x0a\x01\x86\xc1\xac\x88\x1f\x59\x7a\x8a\xa2\x46\x93\x03\x41\x89\x42\x26\xf1\x7c\x0b\xb7\xfa\x4a\x4f\xf9\xfe\x3d\xe9\x67\xc7\x63\xe4\xff\x24\xcb\xe4\x48\xfb\xa0\xe5\x8e\x4e\xd8\x8f\xa0\x20\xd7\x8f\x49\x40\x89\x7d\x48\xcb\x08\xce\xf4\xbd\x90\x4c\x62\x76\x0d\x77\x07\xa5\xa2\xa4\xc6\x9c\x8e\x20\xed\x48\x75\xc8\x34\xe9\x1c\x94\xbc\x3f\xa2\x72\x7f\x3f\x6d\x2d\xb3\xc7\x9d\xb5\xfd\x0a\xa5\xcc\x23\x89\x79\x92\x21\x77\x8b\xbf\xa0\x15\xad\xb4\xa4\xb5\x05\x9f\xa1\x07\x04\xe7\x59\xea\x65\xc3\x58\x79\xe1\x3c\x64\x46\x1b\x06\x6f\x60\x41\xb0\x42\x25\x45\xc7\xd6\x41\xd3\x6f\x4a\xc8\xc3\x3b\x18\xae\xa7\x0e\x53\xec\x68\x1a\x99\xf4\xd8\x97\x7d\x44\x6f\x4a\x8c\x40\xa0\x08\x31\x65\xf8\xa5\x5b\x6e\x2c\xc1\x27\x5d\xe4\xa7\xf0\x3b\x96\x0f\x5a\x0b\xba\x63\x6d\x2f\x7e\xb5\x7f\xdd\x2f\x80\x46\xc2\x0b\x0b\xbf\xdd\xdd\x5c\x7d\xf9\xf5\xea\xe3\xfd\x1d\x5e\xfd\x73\x73\xf5\x25\x64\xb8\x9f\xbe\xbe\x3d\x6e\x89\x70\x3d\x8d\xb3\x55\xe1\xcd\x92\x34\x31\xfa\x18\xad\xa7\x5b\xea\xaf\x8c\x1a\x76\x91\x0e\x5a\x90\xb0\xd8\xc4\xfc\xb1\xc0\xe4\x81\xf4\x49\xae\xb8\x30\x46\x11\x1e\x89\xe6\x3e\xfc\x12\x26\x0c\x9a\xce\x8d\x56\x9b\x09\xf8\x25\xa8\x21\x40\x85\xe0\x72\xe4\x41\x14\x31\x04\xe3\x6b\x08\x42\x2a\x88\xaf\x3b\x3b\x4f\x41\x29\x16\xca\xcf\x0d\x0b\xe2\xc1\x3c\x63\xb4\xd5\x29\xbf\x65\xd4\xc2\x85\x2a\x1f\x6a\x54\x7c\x0f\xc4\xf7\x04\xe6\x0f\xd4\x2b\x9c\x5e\x85\x6c\x54\x77\x30\xd9\x9a\xca\x7e\xd2\x27\x90\xba\xab\xb3\xca\x8e\xde\x7b\x98\x49\xed\x69\x49\x1c\xfe\xd5\x85\x52\xe5\xdf\x7c\x51\xde\xa9\xcb\xf3\x36\x61\xdc\x8f\xdc\x10\xcb\x94\x4c\x17\xc2\x0d\xbc\xf3\xdb\xb6\xa9\xda\x50\xcb\x6e\x6f\x8d\xb1\xeb\x24\xc5\x90\xd6\x98\x5b\x45\x23\x7c\xf5\x53\x89\x50\xf9\x69\xa8\x84\xff\x5f\x47\xa5\xb5\x35\x6e\x2a\x2f\xb5\xc5\x42\xc9\x44\x6d\xa0\x46\x1d\xe0\xab\x3d\x96\x54\x79\x22\xac\xf2\x5c\xd0\x38\x77\x48\xa5\xf2\xc4\xb8\x50\xc3\xf3\x56\xbb\x18\x2d\xa8\xcc\xcd\xc1\x2f\x4a\xf0\x90\x95\x6d\xc1\x61\x4b\xdc\xd9\xc3\x37\x35\x4c\x72\xa9\xe7\xa1\x2c\x4c\xd3\x4d\x40\x05\x79\x91\x4a\x93\x1a\xce\xd1\x0f\x66\x52\x2e\x1f\x94\x83\x28\x34\xb6\x5d\xd3\xd3\x4e\x4f\xa6\x3e\xa8\x25\x72\x8e\x52\xf5\xee\x50\x33\xa3\x7b\x23\xdf\x7e\x5e\xfd\x76\x82\xec\xef\x7d\x65\x13\x29\xb8\xaf\xac\x40\xdf\x11\xa2\xe1\x1a\x97\xc5\x96\x14\xda\xf6\x09\xfc\x3b\x1e\x21\x64\xb8\x22\x40\xd8\xb5\xcc\x15\xfc\xb9\x7d\x5d\x0a\xd2\x5e\xa6\x72\x12\x66\x8d\x96\x11\x21\x47\xa9\xa1\x01\xff\x3a\x79\xba\xd0\xf2\x7b\x41\xb7\xd5\xdc\x16\x52\xf5\xb8\xed\xd0\x82\xd6\x13\xef\x84\x86\x12\xf5\xdc\xa6\xcd\x71\x3d\x57\xa4\x97\x3e\x1b\x4c\x28\xc7\xb5\xcc\x8b\x1c\x4a\x98\x97\x33\x42\x3d\x90\xf7\x1e\x80\xb7\x0c\xeb\xfe\x63\x34\xc3\x71\xe3\x40\x4d\xf0\xc0\x0c\x54\xf3\xdb\x76\x4b\xe7\x26\x28\xf5\x68\x13\x4a\xfd\x43\x9b\x50\xea\xb1\x26\xac\x08\xfe\xa0\x26\x8c\x47\x9d\x43\xb9\x85\xc5\x17\x1f\x66\x4c\x2e\xfd\x9c\x72\xeb\x87\x35\x77\xb7\x69\x4c\xcb\xef\x9f\xd9\xa5\x6a\x63\x05\x1b\x6b\x49\x80\x4c\x21\xbe\x02\x0c\x43\x39\x90\x9c\x39\x5b\xc6\xb3\x8d\x57\x6a\xd1\xb7\xe7\x26\x17\xeb\xd0\x2d\xcb\x1c\x79\x33\x5d\x87\x5e\x56\x37\xa8\x70\x2f\xd2\xa6\x33\xa1\x98\xea\x84\x4f\x3a\x08\x70\xf1\x94\xef\x02\x44\xb6\xdf\x4d\x26\xe1\x51\xa1\x9d\x9b\x86\xa3\x84\x69\xf8\xd8\xd4\x22\x51\x62\xc5\x4f\x67\x2e\x33\x85\x12\x31\x57\x10\x2a\x0f\x8f\xd2\x67\x90\x20\x9f\x94\x07\x27\x22\xf8\xaa\x13\x80\xbb\xcc\x04\xe0\xbc\x99\xcc\xf7\x2a\xac\xd7\x3e\x92\x19\xdd\xe6\xbb\x62\x51\x29\x30\xae\x2e\xe7\x68\x6d\xc8\xeb\xde\x80\x95\xc9\x43\x4c\xf6\x8f\x19\xe9\x58\xeb\xca\xb6\xc3\xc5\x2f\x06\xde\xc0\x3b\x5a\x7b\x62\x8d\xea\xdd\xb9\x0b\xb8\x67\xd4\x4e\x92\x9e\x28\x36\x77\x70\xe7\x76\xd5\x51\x36\x8b\xe6\x68\x7e\xe8\x1f\x60\x86\xc9\x8f\x70\x4e\xfb\x72\xd8\xbf\x87\x8d\xe2\xa9\x32\xd8\xc7\x48\x51\xb8\x7f\x20\xc2\x96\x66\x4f\x59\x25\x5d\x6f\x35\x3a\x7f\xc2\xd0\x92\xf6\xb2\xf3\x77\x04\x5b\xd9\x3a\xfc\x46\x9f\x13\x1d\x7c\xba\xff\xc9\xcb\xbb\xed\x3b\x4f\x6f\xfe\x0b\x00\x00\xff\xff\x7f\x2e\xce\xf9\x94\x23\x00\x00")

func regoAttributeInBytes() ([]byte, error) {
	return bindataRead(
		_regoAttributeIn,
		"rego-attribute.in",
	)
}

func regoAttributeIn() (*asset, error) {
	bytes, err := regoAttributeInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-attribute.in", size: 9108, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoInfoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x4e\xc3\x40\x0c\xc7\xf7\x3c\x85\x75\x30\xb6\x0d\x13\x43\x36\xc6\x0e\xa0\x4e\x2c\x88\xc1\x4d\x7c\xad\xab\x34\x77\xd8\x0e\x02\x55\x7d\x77\x74\xb9\xa6\x4a\x3f\x36\x96\x44\xf9\xd9\xff\x8f\xf8\x50\x00\x00\xb8\x47\xad\xb7\xb4\x47\x57\x81\xdb\x9a\xc5\xaa\x2c\x77\x1a\xba\x79\xa6\x8b\x20\x9b\xb2\x11\xf4\x36\x7f\x7a\x2e\x33\x7b\x70\xb3\xac\x34\xb6\x96\x92\x6e\xd9\xf9\x30\xc2\x86\xb4\x16\x8e\xc6\xa1\x4b\xa3\x57\x32\x04\xee\x7c\x90\x3d\x26\x06\xb8\x0e\xbd\x01\x82\x92\x41\xf0\xa0\x91\x6a\xf6\x5c\x0f\x43\x5d\x9c\xad\x7f\xe3\xe0\x1c\xd6\x3b\xaa\x6d\xa4\xd8\x34\x9c\xf6\xb0\x5d\x49\x88\x24\xc6\xa4\xae\x02\x8f\xad\xd2\x69\x45\xe8\xab\x67\xa1\xc6\x55\xf0\x31\x90\x81\x46\x21\xcf\x3f\x27\x9b\xbc\x17\x82\x4d\xbf\xbf\x49\x34\x55\x1e\xc8\xe7\xac\x28\x4e\xba\x49\xcc\xe1\xc6\x6f\xca\x2e\x6a\xab\x09\x77\x9b\x89\xff\xbd\xd3\xac\x06\x13\xb0\x00\xbd\x52\x7a\xd5\xd8\xb6\x80\x91\xd5\x9d\x75\xc7\xeb\xca\xff\x8b\x7c\xc3\x3d\xa5\xab\xdb\x96\x20\xd9\x5d\x9e\xff\x56\xec\xb1\x6f\x53\x66\xce\xbe\xdb\x6a\x3c\xdc\x4d\xb1\xab\xe8\xf7\xbc\x37\xa6\xbf\xac\x96\xd7\x71\xe3\x9f\x70\x67\xb4\x21\x99\xc4\x15\xf9\x79\x2c\xfe\x02\x00\x00\xff\xff\xb8\x06\xde\x01\xb3\x02\x00\x00")

func regoInfoJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoInfoJson,
		"rego-info.json",
	)
}

func regoInfoJson() (*asset, error) {
	bytes, err := regoInfoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-info.json", size: 691, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x4d\x6f\xdc\x36\x10\xbd\xfb\x57\x0c\x94\x1e\x37\xd9\x9e\x7a\xd8\x9b\x5b\x07\x68\x80\xb6\x08\x5c\xf7\x14\x18\x8b\x59\x71\xb4\xcb\x84\x22\x65\x92\xb2\x63\x04\xfb\xdf\x0b\x52\x12\xf5\xad\x95\xdc\xf5\x06\xe9\x25\xb1\xc9\x99\xe1\xe3\xcc\x3c\xea\x91\xfe\x76\x05\x00\x10\xfd\x64\xe2\x03\xa5\x18\x6d\x20\x3a\x58\x9b\x6d\xd6\xeb\xcf\x46\xc9\xb7\xc5\xe8\x3b\xa5\xf7\x6b\xa6\x31\xb1\x6f\x7f\xfe\x65\x5d\x8c\xbd\x89\x56\x85\xa7\xe5\x56\x90\xf3\xfb\x3b\xa3\x98\x27\x3c\x46\xcb\x95\xac\x66\x19\x99\x58\xf3\xcc\x0f\x6d\x20\xba\xa5\x4c\x93\x21\x69\x0d\xa0\x04\xb5\xfb\x4c\xb1\x85\x27\x6e\x0f\x80\x42\x00\x77\xc3\xd6\x6a\xbe\xcb\x2d\x39\x0b\x06\x9a\x84\x8f\x67\xc2\x72\xcf\x99\x5f\xad\xf0\xad\x46\x91\x31\xee\xcc\x50\x7c\xd4\x2a\x23\x6d\x39\x99\x68\x03\x09\x0a\x43\xa5\x89\xa6\x87\x9c\x6b\x62\xd1\x06\x3e\xf9\x11\x3f\x9a\x2a\x46\x22\xf2\xbf\xdf\x97\x86\x59\x33\xc2\xb7\xda\xb4\x46\xd6\x1a\x2f\xd2\xa7\x29\x71\xa8\xde\xac\x19\x25\x5c\x7a\x2c\x66\xdd\xf0\x08\xe6\xc7\x55\x1d\xb1\xde\x5c\x2f\x60\xb5\x4d\xd4\x1a\x9f\xa3\x55\x7b\xb2\x93\xd4\x3f\xb8\xb1\xa0\x92\x3a\x57\xb0\x23\xfb\x44\x24\xc1\x1e\x08\x74\x95\x72\x62\x55\xc2\x5d\x62\x95\x3d\x90\x06\x25\xc9\xbc\xeb\x86\xe7\x96\xd2\x3e\xa4\x89\x7d\x56\x0b\x47\x2d\x87\xe3\xe0\x9e\x8b\x84\xcf\x4c\x60\xa3\x3a\x75\xc4\x63\x68\xad\x60\xd8\x2e\xd4\xc8\x12\xa1\x51\xff\xf4\xf3\xd3\x39\xfd\x5d\x09\x66\x60\x87\x86\xc7\xc0\x65\xa2\x74\xea\x77\xe8\xd2\x3c\x9c\xd4\x5e\x16\x07\x1b\x35\xcc\x9e\x6e\xd8\x46\x97\x0c\x34\x6e\x98\xcd\x30\xfe\x82\x7b\xea\xc4\x2f\x1d\x8d\xdd\x4a\x4c\xc7\x26\x55\xae\x63\x1a\x35\x20\x69\xb9\x7d\x1e\x9d\x6e\xe6\xab\x35\x7b\xbf\xba\x6a\xe3\x1f\xe1\x53\x9d\x0a\xc1\xd1\x8c\x4c\xf6\x96\x6a\xb4\x7b\xe9\x07\x56\xd5\xe5\x00\x04\xd3\x3c\x86\xba\x55\x09\x31\xa7\xf8\x15\x8c\xc6\x89\xd0\x8b\x63\xac\xe6\x72\x1f\x0d\x1a\x1e\x7b\xa3\xc7\x81\x84\xe6\x19\x43\x4b\xe3\x59\x98\xa6\xde\x75\xdc\xaf\xc4\xd8\x4a\x8c\x04\x5d\x6a\xa5\x66\xe5\xe6\x95\xf7\xee\x40\xd0\x18\x9a\xcf\xb8\x10\xf0\x54\x4d\x86\x90\x36\xbb\x7d\x2e\xd2\xdf\x30\x25\xf1\x36\x46\x43\x0c\x1e\x49\x9b\x16\xda\x92\x7a\xe7\x05\xf9\xd5\x92\x64\xcb\x99\xb2\x43\x43\x6d\x5e\x80\x3d\x70\xd3\x19\x2a\xa3\xc3\x0f\xc5\x9a\x3d\xd9\x4b\x34\x72\x75\xca\x2e\x69\x62\x57\xfe\xaa\x1f\x4a\xff\x0b\x35\x73\xa6\xf9\xe3\xe4\x59\x32\x80\x76\x40\x26\x70\x03\x65\xa4\x93\xe8\x76\x4a\x09\xc2\x99\xc9\x6c\x7f\x7a\x96\x80\xcc\x44\xae\x51\x5c\x86\x6c\xf5\xd7\x73\x09\xc2\x5c\xf2\x87\xbc\xac\x7d\x48\x29\x97\x7b\x0f\xf4\x15\x4a\xad\x95\x9a\x20\xc0\xbc\x3a\x63\xec\x74\xb7\x29\x72\xa9\x94\x5d\xf8\x09\x1d\xaf\xfd\x0c\x39\x98\xa1\xc6\x94\x2c\xe9\x09\xbd\xf6\x31\xd8\x4c\x6b\xb6\x1b\x15\xe7\x69\x21\x02\x42\x58\xb7\x2b\xb4\x10\xa3\x84\x1d\x81\x97\x08\xfe\xba\xe1\xf6\xfa\x90\x93\x7e\xfe\x5e\xba\x6d\x8e\xae\x1a\x98\xf6\xe8\xba\x7a\xab\x65\x71\x4a\x6e\x2d\x6a\xe9\xbf\x5a\x67\x58\x99\xd3\xb3\x36\xf0\x4b\x24\xc2\x4d\x5f\x1e\xbc\x0e\xb8\xd2\x67\x3e\xbb\x9c\x83\x83\xb4\x18\xce\x88\x15\xc9\x3c\x1d\xec\x9f\x60\x31\xe9\xef\x2d\xb8\xb4\xb4\xef\x91\xa7\x65\x92\x08\x85\xdd\x56\x6f\x19\x54\x1c\x9f\x30\xf1\x50\x27\xe6\x59\xae\x71\xa4\xab\x83\x8d\xe5\x29\x0d\xab\x81\xfb\x59\xf5\x4a\x73\x61\x79\x26\xe6\xd7\xec\xc6\xe9\x02\x32\xc0\x3b\x5d\xd4\x3a\x30\xaa\xa8\xe0\xe0\xf5\xae\xcb\x35\xf8\x97\x7d\x0b\xc3\x21\xf1\x22\xc4\xdc\x40\x15\xe2\xbc\xc0\x50\x08\xf5\x44\x6c\x1b\x1f\x14\x8f\x17\xdc\xce\x3e\x14\xb8\x3c\x11\xb8\x01\xd7\x15\x2b\x10\xdc\xb8\x4f\x8c\x10\x45\x96\x95\x31\x7c\x27\x08\x1e\x51\xe4\x64\x7e\x1c\xb1\xc9\x28\xc1\x5c\xd8\xad\xc7\xbd\xa4\x62\xce\xab\xd8\x6d\xef\xbc\x72\x85\x54\x29\xb7\x96\xd8\x89\x44\x7c\xaa\x32\xd1\xa0\x63\x83\xdd\x10\xc9\x5c\x88\xe2\xff\x74\x57\x8c\x54\xdf\xb0\xb0\xf9\x79\x34\xa2\xaf\x98\x66\x82\x16\xee\xf3\x7d\xe1\x35\xb2\xcf\xef\xb3\xb9\x19\x0a\xa4\xf3\xac\xb7\xdd\x5e\xdf\xdd\xdd\x7e\xf8\xf5\x9f\xbb\xf7\xdb\xed\xa0\x43\x78\xed\x1a\x57\x2c\xb7\x95\xc9\xb4\x60\xb9\x76\x1c\xf3\x0f\x18\x8c\x62\x81\x9a\x00\xc3\x23\x5e\xfd\x86\xf7\xa4\xda\x82\xac\xff\x60\x77\x21\xc9\x52\x2b\xe2\xff\xf6\xe0\xb3\x5c\x59\x07\x0f\xc8\xdd\x65\x1b\x0d\x20\x08\x2e\xbf\xb8\xd4\x15\x37\x00\x81\xb5\xa0\x3d\xa7\x02\x88\x35\xfd\xef\x5e\x65\x2e\x74\x67\x7e\xa5\x07\xad\x19\x94\xee\xc4\x38\xcd\x53\x28\x2d\xa7\xe9\xda\xfa\x03\x87\x7f\x81\x74\x57\xa7\xf0\x73\xb5\xea\xeb\xd1\xf3\x14\xb1\xce\xa4\xa5\xc7\x36\xd2\xdb\xd0\x32\x9d\x9f\x69\x8a\x1d\x4b\xe7\x0b\x6a\x12\x22\x08\x9d\x70\x2e\x72\x03\x8d\x58\xe7\x7c\x35\x09\x77\xc6\x71\x84\xe7\xd2\x24\xc3\xbd\x5f\x7f\x2c\xe7\x8a\x94\x31\x32\x5c\x15\xff\x1e\xaf\xfe\x0d\x00\x00\xff\xff\x42\x74\x1a\x76\xdf\x1b\x00\x00")

func regoSpecInBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecIn,
		"rego-spec.in",
	)
}

func regoSpecIn() (*asset, error) {
	bytes, err := regoSpecInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.in", size: 7135, mode: os.FileMode(420), modTime: time.Unix(1532992835, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x5f\x6f\xe4\xb6\x11\x7f\xf7\xa7\x18\x6c\x0e\x08\xd0\xda\xe7\x14\x28\x02\xc4\x6f\x87\x5e\x80\x1a\x68\x0b\x23\xed\x53\x0c\xc7\xe0\x8a\xa3\x5d\xc6\x14\xa9\x23\xa9\xb5\xdd\xc0\xdf\xbd\x20\xa9\x7f\x5c\x49\x94\xb4\xab\x5d\xdf\x75\x1f\x92\xb3\x38\x1c\xce\x7f\xfe\x48\x8d\xfe\xb8\x00\x00\x58\x7d\xd0\xc9\x16\x33\xb2\xba\x81\xd5\xd6\x98\xfc\xe6\xfa\xfa\x77\x2d\xc5\x95\x7f\xfa\x51\xaa\xcd\x35\x55\x24\x35\x57\x3f\xfc\x78\xed\x9f\x7d\xb7\xba\xf4\x33\x0d\x33\x1c\xed\xbc\x7f\xe7\x98\xb0\x94\x25\xc4\x30\x29\xaa\x51\x8a\x3a\x51\x2c\x77\x8f\x6e\x60\xf5\x0b\xe6\x0a\x35\x0a\xa3\x81\x08\x90\xeb\xdf\x31\x31\xf0\xcc\xcc\x16\x08\xe7\xc0\xec\x63\x63\x14\x5b\x17\x06\x2d\x05\x05\x85\xdc\xf1\xd3\xf5\x72\xaf\xb9\x5b\xcd\xcf\xad\x9e\x12\x4a\x99\x25\x23\xfc\x4e\xc9\x1c\x95\x61\xa8\x57\x37\x90\x12\xae\xb1\x24\x51\xf8\xa5\x60\x0a\xe9\xea\x06\xee\xdd\x13\xf7\x34\x93\x14\xf9\xca\xfd\xfd\x50\x12\xe6\x6d\x0e\x7f\x34\xa4\x8d\x64\xc1\x73\x6f\x3e\x85\xa9\x95\xea\xbb\x6b\x8a\x29\x13\x4e\x16\x7d\xdd\x9a\x51\x93\xbf\x5d\x36\x1c\x1b\xe5\x3a\x0c\x2b\x35\x89\x52\xe4\x75\x75\x19\x0e\xee\x19\xf5\x1f\x4c\x1b\x90\x69\x63\x2b\x58\xa3\x79\x46\x14\x60\xb6\x08\xaa\x32\x39\xd2\xca\xe0\xd6\xb0\xd2\x6c\x51\x81\x14\xa8\x3f\xee\xb3\x67\x06\xb3\xae\x48\x11\x3d\xab\x85\x57\xc1\x84\xb7\x5e\x9d\xbd\xc1\x27\x1a\xb0\xe5\x9d\x86\xe3\x5b\x1d\x5a\x35\x61\xe8\xa8\x81\x25\xea\x40\xfd\xa7\x1b\x8f\xdb\xf4\xef\x92\x53\x0d\x6b\xa2\x59\x02\x4c\xa4\x52\x65\x4e\x43\x6b\xe6\x7e\xa3\x76\xac\xd8\x1b\xa8\xf5\xe8\x78\xc0\xb6\xa2\xa4\x27\x70\xeb\xd1\x9c\x24\x4f\x64\x83\x7b\xfc\xcb\x89\xda\x3c\x0a\x92\x0d\x0d\xca\x42\x25\x38\x48\x80\xc2\x30\xf3\x3a\x38\xdc\xb6\x57\x30\xfa\x70\x79\x11\xca\x3f\x90\x4f\x8d\x29\x38\x23\x7a\x60\xb0\xb3\x54\x2b\xdc\xcb\x79\x60\x64\xe3\x0e\x20\xa0\xdb\x65\x68\xdf\x2b\x35\xcf\x58\x7e\xd5\x44\xc3\x89\xd0\xe1\xa3\x8d\x62\x62\xb3\xea\x25\x7c\xeb\x3c\x7d\xeb\x31\x68\x91\x53\x62\x70\xd8\x0a\xf1\xd4\xfb\x94\x74\x3d\x31\xb4\x12\x45\x8e\xe7\x5a\xa9\xed\xb9\x69\xee\xfd\xcf\x16\xa1\xf5\x68\x7a\xc6\xd5\x0c\xc7\x7c\xd2\x27\x69\x3b\xda\xa7\x4a\xfa\x37\x92\x21\xbf\x4a\x88\x46\x0a\x3b\x54\x3a\x90\xb6\x4c\xbd\x65\x85\x7c\x31\x28\xe8\xfc\x4c\x59\x13\x8d\x61\x5e\x80\xd9\x32\xbd\xf7\xa8\xe4\x0e\xdf\x54\xd6\x6c\xd0\x9c\x23\x90\xab\x2a\x3b\x27\x88\xad\xfb\xab\x78\x28\xe7\x9f\x29\x98\x73\xc5\x76\xd1\x5a\xd2\x23\x6d\x0f\x4c\x60\x1a\x4a\x4e\xa3\xd2\xad\xa5\xe4\x48\x26\x1a\x33\xdc\x7a\xe6\x08\x99\xf3\x42\x11\x7e\x9e\x64\x6b\x76\xcf\x39\x12\x16\x82\x7d\x29\x4a\xdf\xd7\x26\x65\x62\xe3\x04\x3d\x81\xab\x95\x94\x91\x04\x98\xe6\x67\x92\x58\xdc\xad\xbd\x2d\xa5\x34\x33\xb7\xd0\x61\xdf\x4f\x80\x83\x39\x51\x24\x43\x83\x2a\x82\xd7\xee\x6a\x9a\x38\x66\xfb\x2c\x93\x22\xf3\x20\xa0\x66\x6b\xb5\x22\x06\x12\x22\x60\x8d\xe0\x20\x82\x3b\x6e\x58\x5d\xbf\x14\xa8\x5e\xdf\x0b\xb7\x4d\xc1\x55\x3d\xc3\x4e\xba\x7d\xbc\x15\x50\x8c\xc1\xad\x59\x21\xfd\xaf\xa0\x86\x95\x36\x5d\x34\x80\x0f\x81\x08\x9f\xbb\xf0\xe0\x34\xc2\x95\x73\xa6\x67\x97\x9d\x60\x45\x9a\x2d\xce\x00\x15\x8a\x22\xeb\x8d\x9f\x9a\x22\x3a\xdf\x51\x30\x61\x70\xd3\x49\x9e\x80\x24\xe5\x92\xec\x87\x7a\x40\x50\xe5\x78\x84\xc4\x89\x1a\x19\xa7\x85\x22\x03\x51\x5d\xd3\x18\x96\x61\x3f\x1a\x78\x98\xe4\xaf\xac\xe0\x86\xe5\x7c\xba\xcf\x3e\x5b\x5c\x80\x1a\xd8\x5e\x14\x05\x05\xa3\xe2\x0a\x56\xbc\xce\x71\xb9\x11\xfe\xb0\xbd\xb0\x2e\x12\x07\x49\xcc\x34\x54\x2c\x96\x15\x8c\x70\x2e\x9f\x91\x3e\x26\x5b\xc9\x92\x19\xa7\xb3\x5b\x2f\x97\x4b\x04\xa6\xc1\x46\xc5\x25\x70\xa6\xed\x16\xc3\xb9\xb7\xb2\xd4\x9a\xad\x39\xc2\x8e\xf0\x02\xf5\xb7\x03\x36\x29\xa6\xa4\xe0\xe6\xd1\xc9\x3d\xc7\x63\x76\x96\xd7\xb6\x53\xaf\xac\x23\x65\xc6\x8c\x41\x3a\x62\x88\xfb\xca\x12\xad\x74\x6c\x65\x37\xac\x44\xc1\xb9\xff\x7f\xb6\xf6\x4f\xaa\x3d\xac\x56\x7e\x5a\x1a\xe1\x0b\xc9\x72\x8e\x33\xf5\xfc\xd9\xcf\x1a\xd0\xf3\x7d\x94\x9b\x80\x40\x62\xd7\x7a\x71\x2c\x30\x70\xda\x2a\xd1\x29\xd2\xd6\x5d\x66\x07\x65\xcc\xc0\x11\x39\x31\x06\x95\xb8\x1b\xd9\xd7\x7f\xdb\xdd\xff\x70\xf5\xd3\xc3\x9f\x3f\x0c\x3b\x6c\x52\x46\x0d\xdd\xb6\x34\xf7\xb2\x4c\x78\x84\x65\x58\x52\x70\xa2\x2a\x85\x3f\xc2\xad\x05\x57\x9c\x43\xa1\xd1\x25\x7b\x6b\x4e\xaa\x64\xe6\x03\x42\xe1\x8e\xc9\x42\x57\xb3\xfc\x35\x2f\xa1\x14\xa4\x02\xb9\x43\xf5\xac\x98\x41\x0f\x97\x6d\x9d\xa3\x98\x70\x12\xab\x6e\x33\x2a\x40\xaf\x1b\x63\xca\x87\xd7\xd5\xb5\x3a\xf3\x8f\x71\x30\x0a\x08\x03\xca\x01\x70\xd8\x55\x6a\x84\x66\xf0\x92\xae\xfd\x7b\x88\x88\x3c\x3d\x4c\x83\x69\x23\x18\x34\x5c\xa2\xde\x68\x88\x1a\x27\xef\xa8\xe5\xbc\xb4\xc1\x97\xdc\x03\x7d\x02\xbe\x18\xb4\x9c\x95\x15\xda\xc0\x56\x0a\xa9\xc0\x48\xbb\xa9\xef\x08\x67\x43\xc5\x36\x58\x67\xca\xce\x51\xfd\x7a\xea\xe8\x80\x9a\xf1\xfd\x34\xa6\xe8\x27\xcf\xa3\xdc\x37\x21\x95\xaa\x1b\x96\x76\xdf\xfd\x39\x0e\xc5\x3a\xfa\xc5\xea\x41\x30\x61\x3c\xd7\x7a\xf9\x8f\x62\xd4\x60\x56\x59\xef\xec\xc4\xdf\xee\x3f\x5d\xfd\xfa\x97\xab\x9f\x1e\xee\xc9\xd5\x7f\x3f\x5d\xfd\x6a\x0b\xdc\x9f\x3e\xc4\x1d\x01\xbd\xdb\x79\x30\x3a\xe6\xaa\xc2\xc8\x0d\x0a\x54\xc4\x44\x80\x59\x30\xa5\xe7\x28\xd0\xb8\x85\x69\x08\x58\xc2\xfa\xd5\x95\x8f\x35\x49\x9e\x50\xcc\x8a\xc4\x41\x08\x37\x47\xbf\x44\xa1\x43\xe2\x8f\x52\xf0\xd7\x05\xf4\xb3\x58\xd9\xb2\xf2\x80\xd9\x00\x2d\x5c\x06\xba\x65\x10\x6c\x25\x18\x03\xfe\xa7\xd1\xb3\x82\x6b\x52\xd1\x9e\xfb\x85\xa9\x7a\x06\x70\x26\x70\x6a\xa1\xed\x1e\x6f\xb7\x28\x0f\xf0\xdc\x3a\x56\xf3\x27\x9c\x94\x4d\x27\x51\x36\x8e\xd9\xc6\x94\xa5\x7d\x58\xb5\x56\x7a\x86\x52\xa7\xc1\x73\xf3\x0c\x92\x2b\x4c\x96\x4b\xe1\x16\xbf\xf3\xfb\x76\xfc\x8e\x64\x4c\x97\x9e\x57\x2a\x87\xf8\x75\x91\xbd\x70\xda\xf9\x22\xa6\x51\x78\xd6\xb0\x1b\xe1\xb7\x1b\xa8\xf8\x92\x4b\xbd\x54\x94\xe6\xc5\x9a\xb3\x84\xbf\x42\xc5\xf5\x80\x58\x9d\x30\xa5\xac\x13\x76\x96\x51\xc5\xc0\x9d\x4d\xf5\x1b\x33\x40\xca\xb8\x41\x45\xd6\x91\x7b\x9b\xbd\xc5\x47\x36\xa3\x35\xfa\xda\x6c\xe3\xc2\x33\xb7\x55\x39\x2f\x94\x35\xc9\xd0\x7d\x43\xb0\xc4\xa2\xe9\x9b\x4a\x85\x6c\x23\x1e\xed\xb6\xb0\x0c\x9a\x80\x92\xe5\xbb\xec\x34\xbe\x19\xe2\x60\x4d\xfc\xf4\x83\x6a\xd0\xe8\x6d\x68\x28\xa7\xc2\x29\x5c\x3d\xe7\x8c\xb0\xfd\x96\x90\x41\xe2\x7c\x2b\xc5\x64\xce\xb7\x77\xbb\xbf\xce\xa0\xfd\x71\x2a\x6d\xc2\x68\xec\x4a\x37\xa0\x75\x8d\x05\xa3\xa4\xc7\x55\xb1\x0d\x9a\xbe\xb7\x38\xfd\xf2\xc4\xe2\xdb\xdd\x20\x6c\xc9\x0e\x81\x40\x03\x99\x4b\xf6\xe7\x8e\x75\x46\x51\x18\x96\xb2\x45\x34\x6b\x41\x46\x02\x19\x61\x02\x5a\xec\x4f\x53\xa7\xfd\xeb\xc8\xdb\xf2\xd8\x66\x4b\xf5\x71\xe6\x10\x14\x5f\x16\xb6\x84\x00\xcf\xf5\xdc\xae\xcd\xc8\xcb\x23\x47\xb1\x31\xdb\x83\x15\xca\xc8\x0b\xcb\x8a\x0c\x3c\x9b\xee\x19\xa1\x3a\x8f\x4f\x3e\xff\xd6\x1a\x56\xf8\xe3\x68\x0d\x8f\x3b\x0e\x54\x0a\x0e\x9c\x81\x2a\xfd\xc6\xdf\x30\x9d\x48\x41\x26\x8e\x76\x21\x13\x5f\xb5\x0b\x99\x38\xd6\x85\xa5\x82\x5f\xa9\x0b\xa3\x6f\xa3\xc7\x74\x6b\x77\xd8\xbc\xdb\x61\x46\x66\xcc\x3c\x62\x96\x9b\xc3\xc0\xdd\x6d\xea\xca\xf2\xe5\x9e\x5f\x4a\x18\x4b\x95\xcc\x73\xa4\xc0\x52\x70\x4b\x80\x54\xe0\x0f\x24\x67\xae\x96\xee\x6e\xe3\x44\x10\xbd\xbe\x37\x79\x37\x84\x9e\x2b\x96\x11\xf5\xba\x1c\x42\xf7\xbb\x1b\x94\x7c\xdf\x05\xa6\x2b\x24\x74\xa9\x1b\x3e\xf7\x96\x99\x50\x77\xcb\xf7\x0e\x8a\x8c\xbc\x22\x9f\xa9\x47\xc9\xed\xdc\x6a\x68\x4c\x54\xa4\x59\x71\x96\x12\x9e\x97\x7b\x73\xa6\xb7\xb2\xe0\xd4\xd5\x0a\x24\xbc\xec\x6e\x4a\x88\x9a\x55\x07\x17\x52\xf0\xa4\x27\x00\xfd\x3e\x27\x00\x6d\xe4\x62\xb1\x57\xf2\x3a\xf5\x95\xcc\xd1\x30\x5f\x17\xeb\x68\xe7\xd3\xde\xba\x83\xfb\x72\x46\xf2\xdc\xf5\x3e\x4a\xc8\x59\xf2\xe4\x8a\xfd\xf3\xb6\xfc\x2e\xa5\xea\x10\xd1\x68\x2c\xc1\xf7\xf8\x62\x50\x09\xc2\xbf\x3f\xf7\x06\x6e\x14\x11\x9a\xa1\x58\x28\x37\x1b\x76\xe7\x0e\xd5\xa3\x7c\x56\x75\xae\x1d\x83\xa3\x16\xbf\xc2\x99\xf7\xe2\x70\x3a\x86\x75\xe4\x63\x4d\x6f\x01\xf1\xf4\x44\x04\x18\x6f\x86\x0b\x68\x39\xd3\x93\xc5\x18\xed\x60\x08\xa8\x5d\x3b\xdd\x54\x89\xcb\xf4\x3b\xfa\x9e\x68\x70\xb4\x7f\xa4\xa7\xf3\xea\xa2\xff\xaf\xbe\x2f\xe7\x22\x5d\xc3\xbf\x54\x24\xf1\xae\x1d\xf7\x4e\xdd\x7d\x44\x54\x76\x9a\x00\xa9\x3f\xa4\x6b\xbe\xa3\x7b\x96\x61\x53\x74\xb7\xa1\xe7\x4c\x6d\xc3\x4d\x57\x7a\x30\x36\xfb\xa3\xab\xf9\xdd\xed\xf5\x8c\xd6\x25\x16\x67\xe2\xc9\x9a\xce\x37\xc3\x70\xd2\x34\xc2\x2c\xd9\x85\xeb\x5f\x24\xff\x7f\x7d\x19\x75\xa6\xef\x56\x4e\xf4\x51\xd9\x8c\x0c\x2d\x79\x8c\xe7\x29\x94\x94\xf1\x74\x0d\x3e\x32\x76\xfb\x15\x90\xa4\xf9\x77\xb5\xea\xe9\xd2\x73\x2c\xb1\x16\xea\x67\x1f\x52\xa4\xa3\xd0\xbc\x5e\xfb\xd1\x57\xe2\x1d\x68\x80\x9c\xd7\xcd\xc6\x75\x5d\x9c\xf2\x3a\xfc\xb0\x2f\x97\xea\xef\x36\x8e\xec\x62\x9c\xd0\x15\xd8\x1f\xfb\x4d\xc3\xea\xb1\xdb\xd5\x85\xff\xef\xdb\xc5\xff\x02\x00\x00\xff\xff\x52\x74\x6e\xeb\x63\x3f\x00\x00")

func regoSpecJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecJson,
		"rego-spec.json",
	)
}

func regoSpecJson() (*asset, error) {
	bytes, err := regoSpecJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.json", size: 16227, mode: os.FileMode(420), modTime: time.Unix(1533001346, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoTypeMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xc1\x8e\xd3\x30\x10\x86\xef\x7d\x8a\x51\x16\x09\x09\xb1\x0d\x27\x0e\xbd\x23\x71\x41\xe2\xc0\x0d\x71\x98\xc6\x93\x74\x76\x1d\xdb\x8c\x27\x5d\x0a\xea\xbb\x23\x3b\x6d\xba\x49\xb3\xed\x82\xd4\x9e\x62\xcf\x8c\xe7\xf7\xf7\x4f\xfd\x67\x01\x00\x50\xbc\x89\xd5\x86\x5a\x2c\x56\x50\x6c\x54\xc3\xaa\x2c\x1f\xa2\x77\xf7\xfd\xee\xd2\x4b\x53\x1a\xc1\x5a\xef\x3f\x7c\x2c\xfb\xbd\xbb\xe2\x7d\x5f\xa9\xac\x96\x52\xdd\xb7\x5d\x20\xf8\x82\x21\xb0\x6b\xe2\x31\x6a\x28\x56\xc2\x41\xd9\xbb\x9c\xb3\xe1\x08\x35\x5b\x02\x8e\xd0\x45\x32\xa0\x1e\x5a\x0c\x40\xbf\x94\xc4\xa1\x05\xdd\x05\x8a\x69\xd7\xa2\x6b\x3a\x6c\x08\x62\xa0\x8a\x6b\xae\xe2\x72\x68\xb9\x0b\xb9\xa3\x5f\x3f\x50\xa5\xc7\x5d\x34\x86\x53\x1f\xb4\x5f\xc5\x07\x12\x65\x8a\xc5\x0a\x6a\xb4\x91\x0e\x29\x01\x35\xb5\x19\xc5\x7b\x00\x39\xbc\x7c\x37\x5a\xf7\x60\x84\xea\xd4\xeb\xae\x34\x54\xb3\xcb\x1d\x62\x99\x15\x0c\x89\xfb\xfc\xb5\x1f\xae\x3c\xe4\x8d\x8f\x3f\xc8\x9e\x34\x18\xf1\x3b\xdc\x65\x08\xce\xe1\x7b\xa4\xdd\x73\x7a\x2a\xe8\xa2\xc5\x94\x02\xe8\xc6\x20\xdf\x46\x88\xdd\x3a\x7d\x41\x2d\xbe\x05\x1c\x60\xe6\xfc\xe5\xb4\xdd\x2c\xd8\x21\x7a\x1d\xf0\x90\x7a\x19\xf4\x25\xe0\x57\xc0\xb7\xfd\x7c\x15\x67\x35\xfb\xc5\xfc\x6a\x7f\x52\x56\x1c\x8b\x5f\xf6\xe0\x30\xbe\x57\x6d\x20\xa8\x50\xa9\xf1\x72\xb2\x62\xbd\x83\x86\x1c\x09\xaa\x97\x08\xec\xc0\x8b\x21\x79\xee\x10\x4d\xa7\x9c\x5d\x8a\x6e\x88\x05\xfc\x93\x03\x6e\x83\xa5\x96\x9c\xde\xd8\x1c\xa1\x9f\x1d\x0b\x99\x62\x05\xdf\xcf\x3d\x19\x8f\x76\xfa\xfd\x98\x9a\x7b\xc5\xd5\xd9\x39\xbf\xc4\x72\x00\x64\x32\x98\xe9\xcd\xcf\x08\x44\x95\xf9\x19\x38\xaf\x2b\xd2\xe4\xbc\x5a\xcc\x67\xff\x94\x0c\xcb\xd3\x86\x96\x7f\x53\x72\xe7\x06\x9a\xda\xe0\xe5\xf5\xaa\x3e\x6d\xc9\x69\x87\x16\x4e\x1e\x43\x7f\x04\x78\x81\x80\xd5\x63\x7a\x26\x75\x83\x0a\x41\xfc\x96\x4d\x7a\x40\x6f\xa1\x7b\x8b\x96\x0d\x1e\x64\xfd\xa3\x76\x87\x2d\x81\xaf\x01\xa1\xea\xa2\xfa\x16\x4e\x87\x41\xdd\xb9\x2a\x17\xfc\xaf\xd6\x97\xfe\xfb\xfd\xbb\xbc\xd8\x2f\xfe\x06\x00\x00\xff\xff\x74\x2b\x12\xf9\xe6\x06\x00\x00")

func regoTypeMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoTypeMappingJson,
		"rego-type-mapping.json",
	)
}

func regoTypeMappingJson() (*asset, error) {
	bytes, err := regoTypeMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-type-mapping.json", size: 1766, mode: os.FileMode(420), modTime: time.Unix(1529622242, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen.sh": genSh,
	"rego-abstract.in": regoAbstractIn,
	"rego-abstract.json": regoAbstractJson,
	"rego-attribute.in": regoAttributeIn,
	"rego-info.json": regoInfoJson,
	"rego-spec.in": regoSpecIn,
	"rego-spec.json": regoSpecJson,
	"rego-type-mapping.json": regoTypeMappingJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gen.sh": &bintree{genSh, map[string]*bintree{}},
	"rego-abstract.in": &bintree{regoAbstractIn, map[string]*bintree{}},
	"rego-abstract.json": &bintree{regoAbstractJson, map[string]*bintree{}},
	"rego-attribute.in": &bintree{regoAttributeIn, map[string]*bintree{}},
	"rego-info.json": &bintree{regoInfoJson, map[string]*bintree{}},
	"rego-spec.in": &bintree{regoSpecIn, map[string]*bintree{}},
	"rego-spec.json": &bintree{regoSpecJson, map[string]*bintree{}},
	"rego-type-mapping.json": &bintree{regoTypeMappingJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

