// Code generated by go-bindata.
// sources:
// gen.sh
// rego-abstract.in
// rego-abstract.json
// rego-attribute.in
// rego-info.json
// rego-param.in
// rego-shared-params.in
// rego-shared-params.json
// rego-spec.in
// rego-spec.json
// rego-type-mapping.json
// rego-validation-mapping.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x6b\xc4\x20\x14\x84\xef\xfe\x8a\xd7\xb4\x60\x7b\x50\x7f\x40\xa0\x90\x42\x0e\x3d\x14\x4a\xb0\x67\x79\x1a\x6b\x6c\x1b\x15\xb5\xff\x7f\xd9\x6c\x58\xb2\x61\x2f\xcb\x1e\xdf\x0c\x33\xf3\xf1\x1e\x1f\x84\xf6\x41\x68\x2c\x13\x21\xc9\xe6\x3f\x60\xc9\x02\x2d\x42\xa9\x4e\xca\xe1\xfd\xed\x4b\xf6\x4a\x09\xda\x3c\x3d\x1b\xac\x90\xad\x8b\x0c\x6b\xcd\x5e\xff\x57\xcb\x7d\x78\x69\xa8\x70\x2d\x5d\x0d\x5d\x6a\x46\x53\xb9\x0f\xf0\xba\x93\x7e\x4a\x0c\xf7\x0c\x9c\x53\x9f\xdd\xd0\x7d\xf4\xb2\x1f\xf6\xa9\x84\x19\xe7\x3d\x52\x49\xd6\x6c\x70\x96\xf3\x0a\xca\x8d\xa5\x13\x66\x3b\x9e\xbc\xb2\x6d\xbf\xd0\x97\x19\x92\x67\x60\xdf\xc0\x8f\x5f\x1e\xb1\x22\x77\xb1\x25\x2e\xb2\xf5\x04\x96\x7e\x1d\x14\x33\xd9\x19\x81\x93\x43\x00\x00\x00\xff\xff\xfe\x7b\x84\xde\x8e\x01\x00\x00")

func genShBytes() ([]byte, error) {
	return bindataRead(
		_genSh,
		"gen.sh",
	)
}

func genSh() (*asset, error) {
	bytes, err := genShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.sh", size: 398, mode: os.FileMode(493), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\xc4\x30\x10\x44\xfb\x7c\xc5\x2a\x47\x79\x87\xa9\x28\xd2\x1d\x12\x05\x1d\x42\xa1\x8e\x36\xf6\x9a\xf8\x64\x6c\x6b\x77\x4f\x08\xa1\xfc\x3b\x4a\x0c\xe1\xa0\xa0\xb3\x76\xde\x78\x46\xf3\xd1\x00\x00\xb4\x57\x62\x27\x7a\xc5\xb6\x83\x76\x52\x2d\x9d\x31\x27\xc9\xe9\x50\xaf\xd7\x99\x5f\x8c\x63\xf4\x7a\xb8\xb9\x35\xf5\xb6\x6b\xf7\xd5\xa9\x41\x23\x2d\xbe\xe3\x28\xca\x68\xf5\x5b\x70\x24\x96\x43\xd1\x90\xd3\x2a\x27\xc0\x2f\x02\x30\xc6\xfc\x26\xa0\x19\x1c\xd9\x88\x4c\x80\x20\xa4\x90\x3d\x8c\x28\x04\xa8\xca\x61\x3c\x2b\x09\x60\x72\x26\x33\x30\x45\x5c\x7e\x12\xd0\x09\x15\x2c\x26\x18\x09\x98\xce\x42\x0e\x42\xd2\x0c\x59\x27\x62\x90\x42\x36\xf8\x60\x2b\xbc\x75\x7c\x2f\x6b\xc5\x3c\x9e\xe8\xa7\x20\x3a\x17\x16\x0c\xe3\x23\xe7\x42\xac\x81\xa4\xed\xc0\x63\x14\xda\x37\x95\x29\x97\x4a\xdd\xaa\x7a\xb7\x86\xbf\xee\x75\x4b\x26\xbf\xa4\xed\x8c\x23\x1f\xd2\x9a\x21\xe6\xc2\xb1\xe1\xf3\xfa\x9a\xb7\xc1\x36\xfa\xdf\xb0\x61\x38\xf6\xfd\xd3\xc3\xdd\x73\x7f\x3f\x0c\x7f\xff\x6a\xe6\xe6\x33\x00\x00\xff\xff\x33\x37\x6b\x77\xd3\x01\x00\x00")

func regoAbstractInBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractIn,
		"rego-abstract.in",
	)
}

func regoAbstractIn() (*asset, error) {
	bytes, err := regoAbstractInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.in", size: 467, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4b\x6f\xdb\xb8\x13\xbf\xe7\x53\x0c\xdc\x02\x05\xfe\xff\xb8\xee\x5e\x16\x68\x6e\x39\xf4\x50\xa0\xbb\x5b\x2c\xf6\xd4\x20\x35\x46\xd2\xc8\x62\x4b\x91\xec\x90\x4a\xe2\x5d\xe4\xbb\x2f\x48\x3d\x2c\x3f\x25\x5b\x8a\xdd\x3d\x35\x25\x67\x86\xf3\x9b\x37\x45\xff\x73\x05\x00\x30\x79\x6d\xe3\x8c\x72\x9c\xdc\xc0\x24\x73\xce\xdc\xcc\x66\xdf\xac\x56\xd3\x72\xf5\xad\xe6\xc5\x2c\x61\x4c\xdd\xf4\xdd\xaf\xb3\x72\xed\xd5\xe4\xba\xe4\x74\xc2\x49\xf2\x7c\xb7\x91\x75\x8c\xb1\xab\x37\x12\xb2\x31\x0b\xe3\x84\x56\x61\x5b\x01\x56\x14\x80\x52\xea\x47\x0b\x4e\x43\x42\xb1\x44\x26\x40\xb0\xe4\x40\xa7\x10\xa1\x25\x40\xe7\x58\x44\x85\x23\x0b\xa8\x92\x99\x66\x60\x92\xe8\x25\x59\x70\x19\x3a\x88\x51\x41\x44\xc0\x54\x58\x4a\x40\x28\xa7\x41\xbb\x8c\x18\xac\xa1\x58\xa4\x22\x2e\x89\x1b\x1d\x97\x26\xa8\xa8\xa3\x6f\xb4\x52\x10\x93\x44\x78\x32\x94\x9f\x59\x1b\x62\x27\xc8\x4e\x6e\x20\x45\x69\xe9\xfa\xaa\xa4\x31\xed\x9d\xd2\x56\x25\x6f\xa3\xe1\xda\x7a\x69\x4b\xa6\xd4\x9f\xf6\x6a\x96\x50\x2a\x54\x38\xc3\xce\x5a\x1c\x0d\xf9\x73\xf8\xeb\xb9\x31\x58\x43\xdd\xff\xb0\x9d\xd0\x9a\xdd\x0d\x1f\x7c\x12\x36\x18\xf9\x81\xd8\x0a\xad\x28\x69\x59\xfa\xed\x26\xef\x61\xf3\xac\x91\x1a\x74\x8e\x58\x7d\xde\x6d\xac\x86\xec\xeb\xc3\xdd\xbb\xe9\xfb\xfb\xff\xbf\xde\xb9\xbd\x06\x07\x99\x71\xb9\xa1\x51\x17\xaa\x56\xd4\x08\x05\x08\x06\xd9\x89\xb8\x90\xc8\x35\xe0\xb7\xf0\xd1\xc1\xa3\x90\x12\x0a\x1f\x65\x52\xb6\x79\x52\xd6\x39\xb8\x8c\xc0\x30\x3d\x08\x5d\xd8\x9a\x2b\x04\x21\x60\x92\x80\x66\xd0\x0f\xc4\x8f\x2c\x1c\x05\x52\xad\xc8\xd6\x31\x9c\x6c\x5a\xb0\xd1\x57\x38\xca\x77\x9b\xa4\x9f\x1b\x0f\x81\xff\x93\x0c\x93\x25\xe5\xbc\x96\x2b\x38\xde\x1e\x5e\x41\xae\xb7\x29\x81\x52\xf6\x3e\x2d\x83\x70\xa6\x1f\x85\x60\x4a\x26\x37\x70\xb7\x97\x2a\x50\x2a\xcc\xe9\x80\xa4\x15\xa8\x0e\x9a\x36\x9c\xbd\x94\xf7\x07\x54\xee\x1f\xa6\x6b\x6c\x7b\x12\x7b\xf7\x11\xbe\x5c\x51\x32\x8f\x33\xe4\x6e\xf2\x2d\x58\xc1\x4b\x0b\x7a\x32\x65\xed\x42\xb0\x8e\x85\x5a\xb4\x9c\x95\x17\xd6\x41\xa6\x95\x66\x5f\x13\x23\x82\x07\x94\x22\xe9\x30\x1d\xb4\xe3\xa6\x14\xb9\xdf\x82\xb0\xaa\x33\x3d\x60\x6a\x11\xf7\xb0\xcb\x2e\xa0\xb7\xa5\x0c\x0f\xa0\xf0\x39\xa5\x79\x3b\x2c\x97\x86\xe0\x83\x2a\xf2\x63\xf0\x1d\xaa\x07\x6b\x0c\xdd\xb9\xb6\x53\x7e\x65\xbf\xee\x03\xa0\x55\xef\x3c\xe3\xd7\xbb\xdb\xe9\x97\x5f\xa6\xef\xef\xef\x70\xfa\xf7\xed\xf4\x8b\x2f\x70\xff\x7b\x7d\xd8\x11\xd0\x94\xfe\xbd\xbb\x5d\xae\x2a\x9c\x5e\x90\x22\x46\x17\x92\xf5\x78\x47\xfd\x95\xb5\xda\x2c\x08\x0b\x6b\x22\x21\x5a\x86\xf2\x11\x61\xfc\x9d\xd4\x51\x91\x18\x69\x2d\x09\x0f\x24\x73\x1f\x7c\x31\x53\xe8\xe0\x73\xad\xe4\x72\x04\x7c\x7e\x5e\xf0\xa2\x7c\x6e\xf9\x41\x23\x29\x42\x06\x86\x63\x08\x7c\x25\x08\xc7\x9d\x1d\x67\x42\x29\x16\xd2\xcd\x35\x27\xc4\x27\xe3\x0c\xc9\x56\x57\xfc\x35\xa7\x86\xf1\x08\x7d\x8b\x0a\xe7\x40\x38\xc7\x23\xff\x4e\xbd\xb2\xe9\x45\xc0\x06\x75\x4f\x06\x5b\x43\xd9\x0d\xfa\x08\x50\x77\x75\x51\x59\xc1\xbb\x86\x89\x50\x8e\x16\xc4\xfe\x4f\x55\x48\x59\xfe\x9b\x47\xe5\x4a\xdd\x9d\x9b\x7a\x71\x3f\xd0\x20\x86\x29\x1e\x2f\x85\x5b\xf2\xce\xef\xdb\xb6\x6a\xa7\x7a\xb6\x59\x1a\xe2\xd7\x51\x7a\x21\x3d\x61\x6e\x24\x0d\x88\xd5\x0f\xa5\x84\x2a\x4e\x7d\x23\xfc\xef\x06\x2a\x3d\x19\x6d\xc7\x8a\x52\x53\x44\x52\xc4\x72\x09\xb5\xd4\x13\x62\xb5\x07\x4b\x55\x27\x3c\x97\xe3\x82\x86\x86\x83\x23\x65\xb7\x6e\x66\x07\x0e\x5f\xb3\xc1\x1f\x06\x7f\x14\xe4\x8b\x6e\x15\x0e\x06\x05\xaf\x5f\x65\x43\xa5\x8e\x96\x10\xeb\xdc\x08\x49\xbc\x75\x1f\xdb\x79\xce\xc6\xb5\x61\x10\xc6\x54\x48\x47\x8c\x91\x3c\xbd\x36\xaf\x37\xdc\x1a\x95\x8f\xfd\x52\xb8\xef\x3c\xa6\x60\xef\x76\x7b\xf6\x12\x95\x6a\x26\xb1\x50\x73\xdf\xfa\xc6\x99\x98\xa0\x12\x79\x91\x6e\xba\x20\x3f\x83\x8e\x80\x24\xdc\x87\x33\x7c\x20\x40\x58\x0d\x80\x95\xf8\x73\xa3\x12\x09\x29\x27\x52\x31\x0a\xb2\xd6\x00\x84\x90\xa3\x50\xd0\x12\xff\x32\x55\xa7\x50\xe2\x47\x41\x1f\xab\x4b\x88\x2f\x3c\x83\xcc\x91\xe3\xd3\x5c\x92\x5a\xb8\xec\x64\x73\xe4\xf8\x24\xf2\x22\x87\x52\xcc\xf6\x94\x58\xdf\xc8\x7a\xdf\x80\x1a\xb3\xd4\x1d\x68\x30\xc2\x61\x03\x61\x0d\x70\xcf\x14\x5c\xe3\x6b\xfa\xe5\xb9\x01\x0a\x35\xd8\x85\x42\xfd\xd4\x2e\x14\x6a\xa8\x0b\x2b\x80\x3f\xa9\x0b\xc3\xb7\xae\x53\xb1\x79\xe6\x8b\x8f\xb3\x3a\x17\x6e\x4e\xb9\x71\xa7\xb5\xbe\x8f\x69\x28\x65\xd7\x1b\x7e\xa9\x9a\x7c\xc2\xda\x18\x4a\x40\xa4\x10\x8e\x00\xcd\x50\x8e\xa4\x67\x6e\x1e\xe1\x76\xfb\x42\x03\x4c\x73\x73\xbe\xd8\xfc\x62\x58\xe4\xc8\xcb\xf1\xe6\x97\xb2\x37\x42\x25\xf7\x22\x43\x0c\x13\x26\x63\x7d\xe3\x11\x16\xbc\xb8\xf0\x9d\xe7\x02\x40\x9a\x0f\xe7\xa3\xe0\xa8\xa4\x9d\x1b\x86\xa5\x98\xc9\x8d\x03\xa2\x94\x15\xde\x4e\x6c\xa6\x0b\x99\x84\x5a\x41\x28\x1d\x3c\x0a\x97\x41\x8c\x7c\x54\x1d\x1c\x09\xe0\x8b\x4e\xcd\xf6\x32\x53\xb3\x75\x7a\xb4\xd8\xab\x64\xbd\xf4\xa5\x7c\xf0\x68\x6c\x8b\xa8\x52\x60\x58\x5f\xce\xd1\x18\x5f\xd7\x9d\x06\x23\xe2\xef\xa1\xd8\x3f\x66\xa4\x42\xaf\x2b\xc7\x0e\x1b\xbe\x19\x3b\x0d\x6f\xe8\xc9\x11\x2b\x94\x6f\xce\xdd\xc0\x1d\xa3\xb2\x82\xd4\x48\xb9\xb9\x12\x77\xee\x50\x1d\xe4\xb3\xe0\x8e\xf6\x4b\xef\x09\x6e\xe8\xc1\x41\xaa\xc8\x3b\x5f\x40\x1b\xea\xe3\x9e\x8e\xfa\xcf\xb0\x81\x3c\x95\x1a\xfb\x38\x29\x10\xf7\x4f\x44\x68\x60\xf6\xa4\x95\xc2\xf6\x56\xa3\xf3\x0d\x7b\x8d\xda\x89\xce\x87\xe4\x86\xb6\x4e\xbf\xbe\xf4\x4c\xe9\x11\xa4\x9f\x8e\xc0\xc8\x94\xfe\x86\xa6\xfb\x99\x6f\xd8\x77\xd7\xf0\x0c\x8c\xdb\xbf\x08\xd9\xcb\xb0\x91\x33\xbf\x57\x35\x0e\x21\x2e\xac\xd3\x39\xac\x04\xae\x7e\xee\x30\x6f\x2f\x0a\x49\xbe\xd0\xa1\x31\x72\xe9\xff\x38\xf9\xd6\x72\xa6\x07\xdb\x4e\xa6\x8e\x77\xd6\xbd\xbb\xbb\x77\xb6\x57\xd7\x57\x56\xff\xab\x7e\xda\x73\xf5\x7c\xf5\x6f\x00\x00\x00\xff\xff\x0a\xeb\x5a\x1a\x62\x25\x00\x00")

func regoAbstractJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractJson,
		"rego-abstract.json",
	)
}

func regoAbstractJson() (*asset, error) {
	bytes, err := regoAbstractJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.json", size: 9570, mode: os.FileMode(420), modTime: time.Unix(1533336332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAttributeIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4d\x6f\xdb\x38\x13\xbe\xf7\x57\x0c\x8c\x02\x05\xde\xb7\x29\x76\x8f\xed\xad\x87\x1e\x0a\x74\x3f\xb0\xd8\x53\xd3\xd4\x18\x49\x23\x9b\x1b\x8a\x64\x86\xa4\x63\xef\x22\xff\x7d\x41\x4a\xb2\x25\xc7\xb6\x64\x49\xb1\xbb\xba\xc4\x90\x86\x0f\xf9\xcc\x37\xc9\x40\xe3\x99\xb9\x8d\xa1\xd9\x07\x98\xe9\xe4\x2f\x4a\xdd\xec\xed\xab\xd6\xd7\x8c\x6c\xca\xc2\x38\xa1\x55\x10\xfa\x22\xac\x03\x9d\xc3\x8a\xd8\x0a\xad\x28\x03\x74\x8e\x45\xe2\x1d\xd9\x77\xfb\x63\x31\xcb\x44\x18\x88\xf2\x77\xd6\x86\xd8\x09\xb2\xb3\x0f\x90\xa3\xb4\xb4\x27\x6a\xd0\x39\x62\xd5\x92\xfb\xa7\x25\x12\xc5\xbe\xaf\x6e\x7f\xba\x79\x7f\xf7\xff\x6f\xaf\x0f\x7e\x6f\xf1\x41\x66\xdc\xec\x2d\xa9\x8b\xd6\x8e\x0c\x08\x05\x08\x06\xd9\x89\xd4\x4b\xe4\x9a\xf1\x3b\xf8\xec\xe0\x51\x48\x09\xde\x12\xa0\x94\xcd\x31\x39\xeb\x02\xdc\x92\xc0\x30\xad\x84\xf6\xb6\x1e\x65\x01\x55\x06\x98\x65\xa0\x19\xf4\x8a\xf8\x91\x85\xa3\x28\xaa\x15\x59\xc8\x28\x95\xc8\x94\xed\xab\x70\xbb\x5e\xe1\xa8\x38\xac\x93\x7e\x76\x3c\x45\xfe\x0f\x32\x4c\x96\x94\x0b\xab\xdc\xd1\x09\xfa\x08\x0b\xe4\xfa\x33\x65\x50\x62\x1f\x5b\x65\x04\x67\x7a\xf0\x82\x29\x9b\x7d\x80\xdb\xa3\x52\x51\x52\x61\x41\x27\x90\x76\xa4\x3a\x64\x9a\x74\x8e\x4a\xde\x9d\x58\x72\x7f\x3f\x6d\x0d\x33\xa7\x9d\xb5\x3d\x85\x94\xfa\x91\xb2\x79\xba\x44\xee\x16\x7f\x46\x2b\x5a\x69\x41\x6b\x03\x6e\x89\x0e\x10\xac\x63\xa1\x16\x0d\x63\x15\xde\x3a\x58\x6a\xa5\x19\x9c\x86\x84\x60\x85\x52\x64\x1d\xaa\x83\xa6\xdf\x94\x90\xc7\x35\x18\x9e\xa7\x0e\x53\xec\x68\x6a\x91\xf6\xd0\xcb\x21\xa2\x1f\x4b\x8c\x40\xc0\x87\x98\xd2\xfc\xdc\x2d\x37\x86\xe0\x93\xf2\xc5\x39\xfc\x4e\xe5\x83\xd6\x80\xee\x58\x3b\x88\x5f\xe9\xaf\x7b\x02\x68\x24\xbc\x30\xf0\xfb\xed\xc7\x9b\xaf\x3f\xdf\xbc\xbf\xbb\xc5\x9b\xbf\x3f\xde\x7c\x0d\x19\xee\x7f\xdf\x5e\x9f\xb6\x44\x78\x9e\xc6\xd9\xca\x3b\xbd\x20\x45\x8c\x2e\x46\xeb\xf9\x96\xfa\x73\x49\x0d\xbb\x08\x0b\x2d\x48\x48\x36\x31\x7f\x24\x98\xde\x93\x3a\xcb\x15\x13\xad\x25\xe1\x89\x68\xee\xc3\x2f\x65\xc2\xb0\xd2\xb9\x56\x72\x33\x01\xbf\x14\x15\x04\xa8\x10\x5c\x96\x1c\x64\x3e\x86\x60\x9c\x86\x20\xa4\x82\x38\xdd\xc5\x79\x66\x94\xa3\x97\x6e\xae\x39\x23\x1e\xcc\x33\x46\x5b\x9d\xf2\x5b\x46\xf5\x36\x54\xf9\x50\xa3\xe2\x3c\x10\xe7\x09\xcc\xef\xa9\x57\x38\xbd\x08\xd9\xb8\xdc\xc1\x64\x6b\x2a\x87\x49\x9f\x41\xea\xb6\xce\x2a\x3b\x7a\x6f\x61\x26\x94\xa3\x05\x71\xf8\xa9\xbc\x94\xe5\xdf\x22\x29\xdf\xd4\xe5\x79\x9b\x30\xee\x46\x2a\xc4\x30\xa5\xd3\x85\x70\x03\xef\xf2\xb6\x6d\x2e\x6d\xa8\x65\xb7\xaf\xc6\xd8\x75\x92\x62\x48\x6b\x2c\x8c\xa4\x11\xbe\xfa\xa9\x44\xa8\xfc\x34\x54\xc2\xff\xae\xa3\xd2\xda\x68\x3b\x95\x97\x1a\x9f\x48\x91\xca\x0d\xd4\xa8\x03\x7c\xb5\xc7\x90\x2a\x4f\x84\x51\x8e\x3d\x8d\x75\x07\x47\x2a\x6e\x06\x06\xe9\xe0\x37\x83\x0f\x9e\x42\xd2\xad\xdc\xc1\xa0\x60\x5b\xf6\x83\xa1\x34\x25\x54\x66\xea\x64\x03\xa9\x2e\x8c\x90\xc4\xcf\x76\x64\x07\xe7\xd9\xdb\x37\x8c\xe2\x98\x0b\xe9\x88\x31\x91\xc3\x73\x73\xbb\xe0\xd6\xac\x82\xef\x97\xe0\xa1\xf2\x18\xcf\xc1\xec\xf6\xe2\x29\x2a\xd7\x4c\x62\xa1\xe6\xa1\xf4\x4d\xd3\x31\x41\x05\x79\x95\x6a\xba\xa0\xd0\x84\x4e\xc0\x24\x6e\x88\x97\xb8\x22\x40\xd8\x35\x80\x15\xfc\xa5\x59\x89\x8c\x94\x13\xb9\x98\x84\x59\xa3\x01\x42\x28\x50\x28\x68\xc0\xbf\x4c\xd6\xf1\x4a\x3c\x78\xfa\x5c\xed\x42\x42\xe2\x19\xa5\x8e\x02\xd7\x73\x49\x6a\xe1\x96\x83\xd5\x51\xe0\x5a\x14\xbe\x80\x12\xe6\x79\x97\x58\x6f\xc9\x7a\x6f\x81\xb6\x6a\xa9\x2b\xd0\x68\x86\xe3\x1a\xc2\x9a\xe0\x91\x2e\xb8\xe6\xb7\xad\x97\x97\x26\x28\xd4\x68\x13\x0a\xf5\x43\x9b\x50\xa8\xb1\x26\xac\x08\xfe\xa0\x26\x8c\x87\x5d\x43\xb9\x85\xc1\x57\x6f\x67\x75\x21\xdc\x9c\x0a\xe3\x86\x95\xbe\xcf\x79\x4c\x65\x6f\xf7\xec\x52\x15\xf9\x8c\xb5\x31\x94\x81\xc8\x21\x4e\x01\x9a\xa1\x6c\x49\x2f\x5c\x3c\xe2\xee\xf6\x85\x1a\x98\xed\xce\xf9\x6a\xfd\x8b\x61\x51\x20\x6f\xa6\xeb\x5f\xca\xda\x08\x15\xee\x55\x9a\x18\x26\xcc\xa6\x3a\xe3\x11\x16\x02\x5c\x3c\xe7\xb9\x02\x91\xed\xc9\xf9\x24\x3c\x2a\xb4\x4b\xd3\xb0\x94\x32\xb9\x69\x48\x94\x58\xf1\xf2\xc4\x2e\xb5\x97\x59\xcc\x15\x84\xd2\xc1\xa3\x70\x4b\x48\x91\xcf\xca\x83\x13\x11\x7c\xd1\xae\xd9\x5e\xa7\x6b\xb6\x4e\x4f\xe6\x7b\x15\xd6\x4b\x6f\xca\x47\xb7\xc6\xd6\x27\xd5\x02\xc6\xd5\xe5\x02\x8d\x09\x79\xdd\x69\x30\x22\xbd\x8f\xc9\xfe\x71\x49\x2a\xd6\xba\xb2\xed\xb0\xf1\xcc\xd8\x69\x78\x43\x6b\x47\xac\x50\xbe\xb9\x74\x01\x77\x8c\xca\x0a\x52\x13\xc5\xe6\x0e\xee\xd2\xae\x3a\xca\x66\xd1\x1c\xcd\xab\xde\x01\x66\xe8\x31\x82\x94\x2f\x3a\xaf\x40\xb7\xd2\xe7\xdd\x1d\xf5\xef\x61\xa3\x78\x2e\x35\xf6\x31\x52\x14\xee\x1f\x88\xb0\xa5\xd9\x53\x56\x0a\xdb\x7b\x19\x9d\x97\xd8\x2d\x69\x27\x3a\x6f\x92\xb7\xb2\x75\xf8\xf5\x95\x67\xca\xcf\x10\xfd\x72\x06\x47\xa6\xfc\x17\x34\xdd\xd7\x7c\xe3\xce\x5d\xe3\x3d\x70\xbc\x99\x1a\x76\xee\xf8\x6b\x95\xe3\x10\x52\x6f\x9d\x2e\x60\x07\xb8\xfb\x7f\x87\x79\xf3\xa5\x90\x14\x12\x1d\x1a\x23\x37\xe1\xc7\xe0\x5d\xcb\x85\x6e\x6c\x3b\x07\x75\xdc\xb3\x1e\xfd\x7a\xf8\xcb\xf3\xb7\xed\x37\x4f\xaf\xfe\x0d\x00\x00\xff\xff\x16\x4b\x4f\x96\x9f\x23\x00\x00")

func regoAttributeInBytes() ([]byte, error) {
	return bindataRead(
		_regoAttributeIn,
		"rego-attribute.in",
	)
}

func regoAttributeIn() (*asset, error) {
	bytes, err := regoAttributeInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-attribute.in", size: 9119, mode: os.FileMode(420), modTime: time.Unix(1533335956, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoInfoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x4e\xc3\x40\x0c\xc7\xf7\x3c\x85\x75\x30\xb6\x0d\x13\x43\x36\xc6\x0e\xa0\x4e\x2c\x88\xc1\x4d\x7c\xad\xab\x34\x77\xd8\x0e\x02\x55\x7d\x77\x74\xb9\xa6\x4a\x3f\x36\x96\x44\xf9\xd9\xff\x8f\xf8\x50\x00\x00\xb8\x47\xad\xb7\xb4\x47\x57\x81\xdb\x9a\xc5\xaa\x2c\x77\x1a\xba\x79\xa6\x8b\x20\x9b\xb2\x11\xf4\x36\x7f\x7a\x2e\x33\x7b\x70\xb3\xac\x34\xb6\x96\x92\x6e\xd9\xf9\x30\xc2\x86\xb4\x16\x8e\xc6\xa1\x4b\xa3\x57\x32\x04\xee\x7c\x90\x3d\x26\x06\xb8\x0e\xbd\x01\x82\x92\x41\xf0\xa0\x91\x6a\xf6\x5c\x0f\x43\x5d\x9c\xad\x7f\xe3\xe0\x1c\xd6\x3b\xaa\x6d\xa4\xd8\x34\x9c\xf6\xb0\x5d\x49\x88\x24\xc6\xa4\xae\x02\x8f\xad\xd2\x69\x45\xe8\xab\x67\xa1\xc6\x55\xf0\x31\x90\x81\x46\x21\xcf\x3f\x27\x9b\xbc\x17\x82\x4d\xbf\xbf\x49\x34\x55\x1e\xc8\xe7\xac\x28\x4e\xba\x49\xcc\xe1\xc6\x6f\xca\x2e\x6a\xab\x09\x77\x9b\x89\xff\xbd\xd3\xac\x06\x13\xb0\x00\xbd\x52\x7a\xd5\xd8\xb6\x80\x91\xd5\x9d\x75\xc7\xeb\xca\xff\x8b\x7c\xc3\x3d\xa5\xab\xdb\x96\x20\xd9\x5d\x9e\xff\x56\xec\xb1\x6f\x53\x66\xce\xbe\xdb\x6a\x3c\xdc\x4d\xb1\xab\xe8\xf7\xbc\x37\xa6\xbf\xac\x96\xd7\x71\xe3\x9f\x70\x67\xb4\x21\x99\xc4\x15\xf9\x79\x2c\xfe\x02\x00\x00\xff\xff\xb8\x06\xde\x01\xb3\x02\x00\x00")

func regoInfoJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoInfoJson,
		"rego-info.json",
	)
}

func regoInfoJson() (*asset, error) {
	bytes, err := regoInfoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-info.json", size: 691, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoParamIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcb\x6e\xdc\x3a\x0c\xdd\xe7\x2b\x08\xaf\x83\xfb\x01\x59\x27\x8b\x0b\xb4\xc5\xa0\x0d\xba\x09\x82\x80\xb6\x39\x33\x2c\xf4\x70\x25\x39\x0f\x14\xf9\xf7\x42\xf6\x78\x62\x8d\x2d\x5b\xb6\x51\xb4\xde\x0c\x6c\x91\x47\xd4\xe1\x21\xc5\x81\xde\x93\x39\x76\x82\xb2\x1b\xc8\x76\x68\x50\x92\x23\x03\xdf\xc8\x65\xd7\x57\xa1\xd5\x5b\xd5\x18\xe9\xfc\x07\x15\x83\x55\x2c\x4b\x76\xac\x15\x8a\x9d\xd1\x15\x19\xc7\x64\xb3\x1b\xd8\xa3\xb0\x74\x61\x5a\xf5\x0d\x7e\x05\x6b\xcd\xba\xa1\x9f\x35\x1b\x2a\x47\x57\x23\x01\x5b\xf8\xda\x7a\x49\x52\xce\xc2\xdd\x6b\x65\xc8\x5a\xd6\xca\x5e\x04\x7a\xc6\x28\xc9\x16\x86\x2b\x1f\xb3\x47\xba\xa5\x3d\x2b\x82\x97\x23\x3a\x28\xb4\xcc\x59\xa1\x5f\xb2\xa0\xf7\x50\x7d\xec\x82\x86\xa0\x8b\xef\xbf\x18\x74\xc7\x14\x1a\x83\x6f\x31\x23\x76\x24\xc7\x09\x58\x84\x93\x88\xb5\x08\x6f\x01\x66\x80\x6b\x9d\x61\x75\xc8\x26\x1d\xde\xa3\xab\xe3\x2b\xc3\xaf\xef\xc3\xc0\x33\x52\xce\xc4\xf4\x04\x81\x62\x3e\xb1\x75\x3e\xa7\x1f\xca\x49\x16\x88\x7f\xcd\x09\xdc\x91\x40\x9c\x50\xf0\x19\x59\x60\x2e\xa8\xa7\x91\x3f\x2f\x8b\x81\xfa\xa7\xb4\x11\x3b\x06\x82\x65\x75\xe8\x47\x3e\x85\x32\x59\xfc\x81\x65\x7a\x23\x08\xdc\x7a\x45\xff\x30\x2d\x4c\x85\x92\xe6\xc4\xdb\x3f\xf4\x8c\x69\x73\xb2\xa8\xc9\xe3\x44\xc8\x33\x7d\x6c\x18\x74\x5a\x31\x0d\x9b\xf1\x97\xf9\x13\xc3\x48\xaa\xbd\x9b\x17\xa9\x17\xec\x39\xc9\x31\x75\x86\x31\x2c\x29\xe8\x05\xa9\x58\x4b\xc0\x6d\x72\x3a\x47\xb6\xcc\x7a\xde\x7f\x9f\x8e\x13\xd6\x3a\x1e\xee\xbd\xf3\x72\x02\xee\x8f\x04\x7e\xdf\xe0\x2e\x5b\x73\xf2\x04\x0f\x52\xb5\x9c\xad\xe1\xb3\x75\x32\x6e\x63\xcd\xca\xd1\x61\xb2\x4f\x05\xe6\x7b\xa1\x71\xaa\x55\x05\xc6\xb9\xd6\x82\x30\x45\x5e\x70\x3e\x66\xa2\x6d\x59\x1b\x4c\x94\x2e\xb4\x89\x97\x13\x1d\xa9\x7b\x1e\x37\xc9\x50\xd6\xc2\x71\x25\xd6\x4b\xf1\x73\x0b\xc0\x05\xbb\xb9\x51\x02\xa2\xe3\x96\x05\xbe\xa8\x47\x28\x50\x41\x4e\x60\x49\x39\xe8\x82\x04\xcf\x48\xf4\x5e\x0d\x23\x3d\x09\xb6\x4b\xe7\x26\x92\x50\x08\xfd\x42\xe5\x53\x71\xd4\x5c\x24\x74\x79\x88\x70\xb5\xd3\xd6\xb2\x20\xf8\x8e\xa2\xa6\xd8\xbc\x11\x80\x5c\xb0\xf5\x7f\xcb\x52\x53\xc3\x6c\xc1\x8b\xef\xba\x99\x41\x2c\xa0\x10\x2d\x83\x7e\x0f\x3f\x88\x3c\x27\x6f\xb2\x64\x1c\x84\x65\x23\x21\x2c\x6d\x9b\x30\x39\x1a\x42\xd2\x3d\xb3\xc7\x5a\xb8\xa7\xe6\xfc\x1b\x6e\x9a\x06\xa5\x4d\xd5\x3a\x5d\x37\xfe\x4d\x14\x83\xdb\xc6\xcb\x5d\x4b\x76\x8e\xca\x05\x09\x7a\xe8\x32\xd4\xeb\x52\xbd\x66\x08\x99\xaa\x85\x68\x7f\x65\xde\x7e\xe9\xc6\xb4\x33\xf9\xdb\xba\x05\xbd\xa2\xac\x04\x6d\xe4\xf6\xae\x45\x59\xcd\x6d\xe7\x3f\xce\xed\xbf\x45\xe8\xf6\x7f\x39\x57\xe1\xdb\xef\x00\x00\x00\xff\xff\x76\x36\xe8\x20\xb1\x0f\x00\x00")

func regoParamInBytes() ([]byte, error) {
	return bindataRead(
		_regoParamIn,
		"rego-param.in",
	)
}

func regoParamIn() (*asset, error) {
	bytes, err := regoParamInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-param.in", size: 4017, mode: os.FileMode(420), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x31\x6f\xc2\x30\x10\x85\x77\x7e\xc5\xc9\x74\xaa\x0a\xee\xd4\x81\x8d\x81\xb1\x12\xa2\xec\x91\xb1\x9f\x6b\xa3\x60\x5b\xe7\x5b\x50\x95\xff\x5e\x39\x29\x69\xd3\x2d\x79\xf7\xbd\x7b\xe7\xf7\xb5\x22\x22\x52\x4f\xd5\x06\xdc\x8c\xda\x91\x0a\x22\x65\xa7\xf5\xb5\xe6\xb4\x99\xd4\x6d\xe6\x4f\xed\xd8\x78\xd9\xbc\xbe\xe9\x49\x5b\xab\x97\xc9\x29\x51\x7a\x34\xdf\x47\x30\x0c\x47\x47\xc3\xe6\x06\x01\xd7\x07\xe1\x50\x2d\xc7\x22\x31\xa7\xc6\x9d\x03\xa8\xcc\x10\x39\xf8\x98\xe0\x28\x80\x41\xd6\x24\xba\x80\x18\x1e\x0c\x8b\x64\xe1\xe8\x72\xa7\x2c\x01\x4c\xb5\xc0\x46\x1f\xad\x69\x9b\xea\x76\x3e\xe0\x5e\xc6\xfc\x7c\xb9\xc2\xca\x43\x35\xce\xc5\xc6\x99\xfe\xc8\xb9\x80\x25\xa2\xaa\x1d\x79\xd3\x57\xfc\x20\xc5\x88\x80\xd3\x62\x3e\xd5\x31\x8e\xb7\xcf\x8b\xff\xa9\x26\x86\x6f\x59\x6b\x3d\x9e\x3d\x26\x54\xfd\xfb\x1a\x35\xe3\xc3\xf8\x35\xcc\x15\xcc\xf4\x32\xe4\x8f\xb5\xe9\x5d\x77\xdc\x9f\xf6\xef\x87\xf3\xe1\xd4\x75\xff\x77\xad\x86\xd5\x77\x00\x00\x00\xff\xff\xc9\x23\xe7\x9b\xae\x01\x00\x00")

func regoSharedParamsInBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsIn,
		"rego-shared-params.in",
	)
}

func regoSharedParamsIn() (*asset, error) {
	bytes, err := regoSharedParamsInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.in", size: 430, mode: os.FileMode(420), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xdc\x38\x0c\xbd\xcf\xaf\x20\x9c\x3d\x2d\x92\x99\x3d\xed\x21\xe7\xe4\x50\xa0\x2d\x82\x26\xe8\x25\x08\x02\xda\xa6\xc7\x0a\x64\xc9\x95\x38\xf9\x40\x31\xff\xbd\x90\x34\x76\xec\xf8\x7b\x06\x45\xdb\x4b\x63\xe9\x91\x22\x1f\x9f\x28\xce\xcf\x15\x00\x40\xf4\x8f\x4d\x72\x2a\x30\xba\x84\x28\x67\x2e\x2f\x37\x9b\x27\xab\xd5\x45\x58\x5d\x6b\xb3\xdd\xa4\x06\x33\xbe\xf8\xef\xff\x4d\x58\x3b\x8b\xce\x83\x25\x0b\x96\xe4\xec\x6e\x73\x34\x94\xc2\x0d\x1a\x2c\x88\xc9\xd8\x0a\x91\x92\x4d\x8c\x28\x59\x68\xe5\x70\x77\x39\x41\x59\x83\x20\xa5\x4c\x28\x4a\x21\x27\x43\x90\xa0\x82\x98\xc0\x50\x46\x86\x12\x52\x09\xa5\x10\xbf\x81\xe6\x9c\x0c\xd8\x92\x12\x91\x89\x04\x9d\x27\xbb\xae\x03\x78\x2b\xfd\xf9\x3a\x7e\xa2\x84\xab\x55\x4c\x53\xe1\x70\x28\x6f\x8c\x2e\xc9\xb0\x20\x1b\x5d\x42\x86\xd2\xd2\x01\x52\x22\x33\x19\xd5\xda\x0f\x74\xf8\xed\xf5\xbf\xad\xef\x40\x93\xa1\xcc\x9d\x75\xb6\xf1\x61\xfb\x13\xec\xe6\x3d\x9b\xa8\x86\xef\xfd\x5f\xfb\x9a\x82\x1a\xdd\x3e\xa4\x61\xda\x39\xac\x66\xb6\xa6\x14\x6e\xa9\x4a\xf0\x1d\xd5\x97\x7e\xbd\x3b\x4d\xc3\x7b\x28\xfd\x3c\xd4\xfb\x86\x7e\xec\x84\xa1\xb4\x77\x77\x20\x60\x0b\xdf\x82\x55\x41\x8a\x2d\x5c\xbf\x96\x86\xac\xf5\x34\x9c\xf7\xfb\xf8\x20\x96\x2b\xaf\x0e\x78\xc9\x91\x21\xd1\x45\x2c\x54\xa8\x3e\xe8\xac\x29\x22\x34\x4e\x34\x21\xbe\xf5\x90\xeb\x8a\x29\x34\x06\xdf\x86\x40\x82\xa9\xe8\x27\x60\x91\x9f\x99\xbe\x16\xf9\x5b\xe0\xb3\xe5\xd7\xb2\x11\x6a\x1b\x8d\x1a\xec\x07\x77\xfb\x77\xba\xab\xfb\x6e\xe0\x11\x29\x36\x43\x7a\x82\x96\x62\x3e\x0b\xcb\xae\xa6\x9d\xee\xd1\x31\xe9\x08\xc4\x7d\xc6\x04\x9c\x13\xc8\x83\x17\x7c\x46\x21\x31\x96\xcd\x46\xf3\xfb\x65\xd1\x51\xff\x98\x36\x86\xd2\x40\xb0\x42\x6d\x9b\x91\x8f\x79\x19\xbd\xfc\x2d\xe4\xfc\x46\xd0\x32\x6b\x5c\xfa\xfb\x71\x61\x2a\x2c\x68\x4a\xbc\xcd\xa4\x27\xa0\x3e\xb3\x41\xc8\xc3\x48\xc8\x13\x7d\xac\x1b\xf4\xbc\xcb\xd4\x6d\xc6\x5f\xa7\x33\x86\x9e\x52\x3b\x33\x27\x52\x6e\xbe\x83\x43\xea\x6c\xc7\xb0\xe4\x42\x2f\x28\xc5\xb1\x04\x5c\xcd\x2e\x67\xcf\x91\x51\xc3\xfa\xcf\xd3\x71\xf0\x75\x1c\x0f\x77\xce\x78\x39\x01\x6e\x10\x72\xe7\xb6\xde\xb2\x63\x32\x9f\x61\x41\x6a\x57\x4c\xde\xe1\x1a\x3d\xdb\xaf\x47\x0b\xc5\xb4\x1d\xed\x53\x2d\x78\x26\x35\x8e\xb5\xaa\x16\x38\xd6\x5a\x12\xce\x91\x17\xd4\x69\xce\xc4\xa6\x3b\x83\x33\xa5\x0b\xa1\xf0\xc5\x48\x47\xaa\xfe\x3d\x9c\x24\xc3\x62\x27\x59\x94\xf2\x78\x29\x7e\x09\x0e\x44\x22\x78\x6a\x94\x80\xc1\x71\xcb\x82\xf8\x70\x1f\xab\xc1\xdc\x92\x62\xa8\x82\x04\xc7\xc8\xe0\xbb\xda\x8e\xf4\x20\xd8\xaa\x9c\x27\x91\x84\x52\xea\x17\x4a\x1f\x93\x5c\x8b\x64\x46\x97\x87\x01\xae\x6e\xb4\xb5\x42\x12\x7c\x47\xb9\xa3\xa1\x79\xa3\xe5\xe4\x03\x5b\x9f\x02\x4b\xfe\x0e\x0b\x0b\x4e\x7c\xe7\x7e\x06\xb1\x80\x52\x06\x06\xdd\x19\x6e\x10\x79\x9e\x7d\xc8\x92\x71\x10\x96\x8d\x84\xb0\xb4\x6d\xc2\xe8\x68\x08\xb3\xde\x99\x0c\x77\x92\x1f\x7d\xfe\x27\xbc\x34\xde\x4b\x28\xd5\x71\xba\xf6\xf6\x3e\x8a\xce\x6b\xe3\xe4\xae\x0b\xc1\x4c\xe9\x82\x02\xdd\x57\x15\x6a\x74\xa9\x46\x33\x84\x48\xed\xa4\x0c\xff\x17\x71\x58\xa9\xc6\xb4\x9a\xfc\xd3\xba\x05\xbd\x62\x51\x4a\x3a\x91\xdb\xeb\xe0\xe5\x68\x6e\x2b\xfb\x7e\x6e\xff\x2e\x42\x4f\xff\x95\xb3\xea\xff\x3a\xfc\xdc\x5f\xed\x57\xbf\x02\x00\x00\xff\xff\xa9\xb8\x42\xf1\x51\x11\x00\x00")

func regoSharedParamsJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsJson,
		"rego-shared-params.json",
	)
}

func regoSharedParamsJson() (*asset, error) {
	bytes, err := regoSharedParamsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.json", size: 4433, mode: os.FileMode(420), modTime: time.Unix(1533336332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xcd\x6e\x1b\x37\x10\xbe\xfb\x29\x06\x9b\x1e\xe5\xa8\xa7\x1e\x74\x53\x1b\xa3\x0d\xd0\xb4\x86\xaa\x9e\x8a\x40\x18\x2d\x67\x25\xc6\x5c\x72\x43\x72\xed\x08\x81\xde\xbd\x20\xf7\x5f\xcb\x5d\xad\x52\x5b\x85\x73\x31\xe4\x21\x67\xf8\xf1\x1b\xce\xdf\x7e\xbd\x01\x00\x88\x7e\x30\xf1\x9e\x52\x8c\x16\x10\xed\xad\xcd\x16\xf3\xf9\x27\xa3\xe4\x6d\x21\x7d\xab\xf4\x6e\xce\x34\x26\xf6\xf6\xc7\x9f\xe6\x85\xec\x4d\x34\x2b\x34\x2d\xb7\x82\x9c\xde\x5f\x19\xc5\x3c\xe1\x31\x5a\xae\x64\xb5\xca\xc8\xc4\x9a\x67\x5e\xb4\x80\x68\x45\x99\x26\x43\xd2\x1a\x40\x09\x6a\xfb\x89\x62\x0b\x4f\xdc\xee\x01\x85\x00\xee\xc4\xd6\x6a\xbe\xcd\x2d\xb9\x1d\x0c\x34\x09\x6f\xcf\xd4\xc7\x1d\x32\x7f\x5a\xa1\x5b\x49\x91\x31\xee\xb6\xa1\xb8\xd7\x2a\x23\x6d\x39\x99\x68\x01\x09\x0a\x43\xe5\x16\x4d\x9f\x73\xae\x89\x45\x0b\xf8\xc7\x4b\xbc\x34\x55\x8c\x44\xe4\xff\xff\x58\x6e\xcc\xda\x16\xbe\x36\x5b\x1b\x64\x1d\x79\x41\x9f\xa6\xc4\xa1\x7a\x33\x67\x94\x70\xe9\xb1\x98\x79\x4b\xa3\xde\x7e\x9c\x35\x16\x9b\xcb\xf5\x0c\x56\xd7\x44\xad\xf1\x10\xcd\xba\x8b\x27\xa4\xfe\xce\x8d\x05\x95\x34\x5c\xc1\x96\xec\x13\x91\x04\xbb\x27\xd0\x15\xe5\xc4\x2a\xc2\x1d\xb1\xca\xee\x49\x83\x92\x64\xde\x9e\x9a\xe7\x96\xd2\x3e\xa4\x91\x7b\x56\x07\x47\x1d\x85\x63\xf0\xce\x05\xe1\x13\x09\x6c\x79\xa7\xb1\x78\xac\x9f\x56\xbd\xb1\xeb\xa8\x81\x23\xea\x87\xfa\xc1\xaf\x8f\x73\xfa\x9b\x12\xcc\xc0\x16\x0d\x8f\x81\xcb\x44\xe9\xd4\xdf\xd0\xd1\x1c\x26\xb5\xc7\x62\xf0\xa1\xd6\xab\xe7\x1f\x6c\xeb\x95\x04\x1e\x6e\xbd\x9a\x61\xfc\x80\x3b\x3a\xb1\x5f\x2a\x1a\xbb\x91\x98\x0e\x2d\xaa\x5c\xc7\x34\xb8\x81\xa4\xe5\xf6\x30\xb8\xdc\xe6\xab\xb3\xfa\x71\x76\xd3\xc5\x3f\x10\x4f\x0d\x15\x82\xa3\x19\x58\xec\x1d\xd5\x7a\xee\xa5\x1e\x58\xd5\xb8\x03\x10\x4c\x3b\x0d\x9d\x7a\xa5\xb6\x39\x16\x5f\xf5\xa6\xe1\x40\xe8\xd9\x31\x56\x73\xb9\x8b\x82\x1b\x8f\x3d\xe9\x31\x40\x68\x9e\x31\xb4\x34\xcc\xc2\x78\xe8\x61\xdc\xf7\xc4\xd0\x49\x8c\x04\x5d\xeb\xa4\xb6\xe7\xa6\xb9\x77\xbd\x27\x68\x89\xa6\x47\x5c\x6d\xf0\x9c\x4f\x42\x48\xdb\xaf\x7d\x2a\xd2\x5f\x30\x25\x71\x1b\xa3\x21\x06\x8f\xa4\x4d\x07\x6d\x19\x7a\xcf\x0b\xf2\x8b\x25\xc9\x2e\x8f\x94\x2d\x1a\xea\xc6\x05\xd8\x3d\x37\x27\xa2\xd2\x3a\xbc\xaa\xa8\xf1\xa0\x4d\xb0\x86\x0e\xb1\xf2\x67\x86\x9f\x73\x82\x07\x3a\xc0\x23\x8a\x9c\x20\x43\xae\x0d\xd8\x3d\x5a\x88\x51\xc2\x96\x20\x77\x2e\xdd\x1e\x20\x56\x69\xc6\x05\xe9\x5e\x8d\xec\xdd\xa4\xcc\xf2\x93\x30\x73\xc9\xe8\xcb\x37\x24\x3c\x87\x46\xe5\x92\x41\x65\xe0\x4a\x5e\x1a\xb3\x33\xd1\x16\x4c\xf5\x3a\x04\x3d\x1f\x96\x86\xb8\xdd\x91\xbd\x46\x62\xab\xaa\xee\x25\x49\xcd\xa5\x83\x2a\x3f\x94\xfa\x57\x4a\x6e\x99\xe6\x8f\xa3\xb5\x25\x80\x36\xd0\x36\x72\x03\xa5\xa5\xb3\xe8\xb6\x4a\x09\xc2\x89\x64\x76\x5b\x91\x4b\x40\x66\x22\xd7\x28\xae\x93\x7c\x9b\x6e\xea\x12\x84\xb9\xe4\x2e\xd9\x78\xdf\xd7\x94\x72\xb9\xf3\x40\x5f\xc0\xd5\x5a\xa9\x91\x00\x98\xe6\x67\x8c\xdd\x1c\x66\x0a\x2e\x95\xb2\x17\xb6\x54\x17\xf9\xfe\x11\x05\x67\x03\x43\xd0\x10\xec\x3f\xca\x40\x42\x88\x73\x63\x55\x0a\x8d\x11\x48\xb4\x4a\x3d\xf0\x4d\x5b\xc8\x05\xb9\x36\x11\xb3\x4c\x1c\xdc\x8f\x86\xfc\xd7\x53\xe9\x18\x59\x8c\xf7\x7e\x0c\x98\x46\xd3\xfb\x04\xac\xce\x69\xe6\xca\x85\xf3\x1d\x15\x1e\xad\x6a\x5a\x51\xf0\x7c\x1f\xd0\xc4\x77\x75\x48\xc3\x23\x66\xfc\xdb\x1d\x3e\x61\x1e\xcc\x50\x63\x4a\x96\x74\x41\xe4\x66\x73\xbf\x5c\x2d\x3f\xdc\xad\xef\x56\x9b\x4d\x50\xe1\x64\x0c\xdf\x6c\x96\xeb\xf5\xea\xfd\xcf\x7f\xaf\xef\x06\x14\xea\xe9\x74\x78\x22\x5c\x55\x5b\xc6\x87\xc2\xa5\x10\xea\xc9\x0f\x1c\x8c\x62\x81\x9a\x00\xeb\xa1\xbb\x99\xb9\x9f\x54\x37\x60\xfa\x03\xf6\x95\x46\xc3\x26\x63\xfd\xb7\x01\xed\xf2\xcc\x57\x6b\x14\x9d\x14\x1a\x40\x10\x5c\x3e\x54\xb1\xe7\x49\xab\x13\xce\x73\xe6\xbf\x58\xd3\x77\x37\x45\x5d\xa9\xa7\x79\xa1\x01\x74\x42\x0e\x38\xb1\x71\x3e\x4e\x61\x19\x4f\x08\xd7\xce\x07\xc9\xa2\x60\x14\x27\x14\xbf\xab\x53\xff\xaf\xf0\x1c\xfb\x82\xd2\xd9\x78\x2e\x3e\x27\x4d\xd9\x7d\x0e\xdf\xb5\xd4\x06\x22\xf0\x84\xd0\x77\xa1\xb1\x3c\x4c\x62\x8f\xcc\x4b\x82\x98\xb9\x9e\xc4\x55\xac\x91\x62\x17\xba\x8f\xd3\xe2\xa1\x44\x3e\x74\xa1\x35\x09\x61\x80\x77\xaf\x52\xd4\xc1\x1a\xc1\x73\x76\x3b\x3b\xa1\xb6\x28\x36\x27\x35\x6f\xfc\x7e\xbf\x7a\x1d\xb8\xaf\x75\x60\x45\x09\x69\x92\xf1\xf0\x04\xd8\xfb\xea\x5e\x2a\xb8\xfc\x5b\x60\x80\x06\x03\xf8\x70\x26\x37\x56\x16\x9d\x53\x6b\xc9\x75\x4e\xaf\xa7\x45\x9a\xc2\x6b\x38\x8b\xb5\x34\xa7\x67\xb0\x9b\xe2\xef\xf1\xe6\xdf\x00\x00\x00\xff\xff\xaa\xd5\x54\xbe\x44\x19\x00\x00")

func regoSpecInBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecIn,
		"rego-spec.in",
	)
}

func regoSpecIn() (*asset, error) {
	bytes, err := regoSpecInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.in", size: 6468, mode: os.FileMode(420), modTime: time.Unix(1533331475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\xdc\x36\x12\x7f\xcf\x5f\x31\xd8\x06\x28\x70\x67\xc7\xbd\x97\x03\x9a\xb7\xe0\x12\xdc\x05\x68\x7a\x41\x5a\xdc\x43\x0d\xd7\xe0\x4a\xa3\x5d\xd6\x14\xa9\x92\xd4\x7a\xf7\x0a\xff\xef\x07\x92\xa2\x3e\x56\x5f\x94\x56\xbb\x8e\x0f\xf5\x43\x62\x4b\xe4\x90\xf3\xc9\xdf\x90\x43\xfd\xf1\x0a\x00\x60\xf5\x5a\x45\x5b\x4c\xc9\xea\x2d\xac\xb6\x5a\x67\x6f\x6f\x6e\x7e\x53\x82\x5f\xbb\xa7\x6f\x84\xdc\xdc\xc4\x92\x24\xfa\xfa\xbb\xbf\xdf\xb8\x67\xdf\xac\xae\x5c\x4f\x4d\x35\x43\xd3\xef\xa7\x0c\x23\x9a\xd0\x88\x68\x2a\xb8\x7f\x1b\xa3\x8a\x24\xcd\xec\xa3\xb7\xb0\xfa\x82\x99\x44\x85\x5c\x2b\x20\x1c\xc4\xfa\x37\x8c\x34\x3c\x52\xbd\x05\xc2\x18\x50\xf3\x58\x6b\x49\xd7\xb9\x46\xd3\x22\x06\x89\xcc\xd2\x53\xe5\x70\x87\xcc\x8e\xe6\xfa\xfa\xa7\x24\x8e\xa9\x69\x46\xd8\x67\x29\x32\x94\x9a\xa2\x5a\xbd\x85\x84\x30\x85\x45\x13\x89\xbf\xe7\x54\x62\xbc\x7a\x0b\xb7\xf6\x89\x7d\x9a\x8a\x18\xd9\xca\xfe\x7d\x57\x34\xcc\xea\x14\xfe\xa8\x9a\x56\x33\x6b\x3c\x77\xe2\x93\x98\x98\x59\x7d\x73\x13\x63\x42\xb9\x9d\x8b\xba\xa9\xf5\x28\x9b\x3f\x5d\x55\x14\x2b\xe6\x5a\x04\x3d\x9b\x44\x4a\x72\x58\x5d\x35\x5f\x1e\x09\xf5\x07\xaa\x34\x88\xa4\x92\x15\xac\x51\x3f\x22\x72\xd0\x5b\x04\xe9\x45\x8e\xb1\x17\xb8\x11\xac\xd0\x5b\x94\x20\x38\xaa\x37\xc7\xe4\xa9\xc6\xb4\x3d\xa5\x01\x3e\xfd\xc0\xab\x46\x87\xa7\x4e\x9e\x9d\xc0\x03\x05\x58\xd3\x4e\x45\xf1\xa9\x34\xad\xb2\x61\x53\x51\x3d\x43\x94\x86\xfa\xc9\xbe\x1f\x96\xe9\xbf\x04\x8b\x15\xac\x89\xa2\x11\x50\x9e\x08\x99\x5a\x0e\x8d\x98\xbb\x85\xda\x92\x62\xa7\xa1\x96\x6f\xc7\x0d\xb6\x66\x25\x1d\x86\x5b\xbe\xcd\x48\xf4\x40\x36\x78\x44\xbf\xe8\xa8\xf4\x3d\x27\x69\xdf\x4b\x91\xcb\x08\x7b\x1b\x20\xd7\x54\x1f\x7a\x5f\xd7\xe5\xd5\x78\x7b\x77\xf5\xaa\x39\xff\x1e\x7f\xaa\x44\xc1\x28\x51\x3d\x2f\x5b\x43\xd5\xcc\xbd\xe8\x07\x5a\x54\xea\x00\x02\xaa\x1e\x86\x8e\xb5\x52\xd2\x1c\xf2\xaf\xb2\x51\xbf\x23\xb4\xe8\x28\x2d\x29\xdf\xac\x3a\x1b\x3e\xb5\x9e\x3e\x75\x08\x34\xcf\x62\xa2\xb1\x5f\x0a\xc3\xae\x47\xa2\xb6\x26\xfa\x46\x8a\x91\xe1\xa5\x46\xaa\x6b\x2e\x4c\xbd\x3f\x6f\x11\x6a\x8f\xc2\x3d\xae\x24\x38\xa6\x93\xae\x99\xd6\xad\x3d\x74\xa6\xff\x20\x29\xb2\xeb\x88\x28\x8c\x61\x87\x52\x35\x66\x5b\xb8\xde\xb2\x93\xdc\x6b\xe4\xf1\x74\x4f\x59\x13\x85\x4d\xbf\x00\xbd\xa5\xea\xe8\x51\x41\x1d\x5e\x94\xd7\xd8\x49\xab\xce\x35\xb4\x4f\x2a\xff\xce\xc8\xef\x39\xc2\x03\x1e\x60\x47\x58\x8e\x90\x11\x2a\x15\xe8\x2d\xd1\x10\x11\x0e\x6b\x84\xdc\xa8\x74\x7d\x80\x48\xa4\x19\x65\x28\x5b\x6b\x64\x8b\x93\x22\xca\x07\xcd\x99\xf2\x18\xf7\x33\x02\x9e\x99\x8d\xc8\x79\x0c\x9e\xc0\x85\xb4\x34\x44\x27\x90\x16\x84\x6a\x1d\x3a\x35\xdf\xfd\xb4\x4b\xb6\x1b\xd4\x97\x08\x6c\x7e\xd5\x9d\x12\xd4\x4c\x38\xf0\xf1\xa1\xe8\x7f\xa1\xe0\x96\x49\xba\x1b\x5c\x5b\x3a\x66\xdb\x01\x1b\xa9\x82\x82\xd2\xe8\xec\xd6\x42\x30\x24\x81\xc2\x6c\x42\x91\x29\x93\xcc\x58\x2e\x09\xbb\x4c\xf0\xad\xd0\xd4\x94\x19\xe6\x9c\x9a\x60\x63\x75\x5f\x8a\x94\xf2\x8d\x9d\xe8\x19\x54\x2d\x85\x18\x70\x80\x30\x3d\x93\xc8\xe4\x61\xca\xc9\x52\x08\x3d\x11\x52\x4d\xd2\xfd\x8e\x30\x1a\xf7\x24\x41\x7d\xd3\xfe\xb1\x70\x24\x02\x51\xae\xb4\x48\xa1\x22\x02\x89\x14\xa9\x9d\xf8\x7d\xfd\x21\x65\x68\x60\x22\xc9\x32\x76\x30\xbf\x54\xc2\x7f\x39\x2b\x5d\x8c\x9a\x44\x5b\x9b\x06\x84\x89\xe9\x63\x02\x5a\xe6\x78\x65\x96\x0b\xa3\x3b\x74\x1a\xf5\x6b\x9a\x5b\xf0\x2c\x0e\xa8\xfc\xdb\x0f\x52\xc9\x91\x64\x74\xbe\xc2\x03\xf2\xc1\x8c\x48\x92\xa2\x46\xd9\x95\x04\xfb\x8c\xed\xb3\x6f\x04\x3f\x61\x2b\x95\x5a\x2c\xd1\x1a\x4b\x54\x6a\x89\x58\x8f\x06\xda\x13\x56\xf0\xc5\xf5\x4a\xed\xa6\xc7\x87\xbd\xf1\x36\x55\xdb\xd0\x68\xd1\x38\xd2\xe2\x7b\xb3\x52\x21\x3c\x5a\x74\x22\xd2\x35\xe5\x45\x8e\x2f\x12\xa8\x64\x07\x44\x1a\x57\x76\xf3\xbb\x18\x7c\x5b\x1a\x18\x8c\xd1\x9b\x40\x13\xa6\x00\x0e\xe8\x05\x1d\xfd\x6f\x02\xe1\x29\xd7\xb2\xcf\x9e\xa0\x61\x31\x1e\xe4\x55\x96\x13\x6c\x20\xe6\xcf\x35\x5a\x6f\x65\x3e\x37\xde\x11\xca\xc8\x9a\x61\xcd\x46\xce\x6f\x16\x2d\xeb\x1f\xb2\x8d\x3e\x36\x08\x28\xca\x37\xf5\x99\x0f\x51\x19\x74\xfe\x46\xcb\xf0\x40\xd0\xe8\x36\xb8\xfb\xd2\x68\xd9\xb3\x53\xd2\xcb\xf4\x48\x53\xcb\x59\x6f\x93\xbb\x81\x29\x8f\xc4\xb1\xf6\xa4\xc3\x9c\xa9\x1d\x8c\x7f\x1c\xe7\x18\x06\xd6\x6f\x07\x84\x0b\x62\x7d\xd6\xd9\x9c\xc3\x14\x87\x9e\xa0\x8a\xb9\x02\x78\x1f\xac\xce\x8e\x21\x57\xef\xdb\xbb\x1c\xcf\x27\x8e\x82\xd6\x3c\x39\xfc\x6c\x3a\x4f\x17\x80\xc1\x9f\x66\xdc\xc6\x5a\x36\x87\xf3\x80\x1e\xc8\xf3\x74\xd4\x87\xcb\xd6\xc1\x74\xc1\x25\xf4\x1a\x37\x83\x71\xaa\xd1\x3c\x61\x82\x0c\x85\xaa\x46\x63\x0f\xae\x02\x9b\x5b\x36\x03\xdb\xc6\xb9\x24\x81\xa6\x0b\x4e\xf1\xe9\x40\x44\xf2\x3f\x77\x27\x99\x61\x9a\x33\x4d\x33\x36\xdf\x14\x3f\x39\x02\x34\xa2\x7a\x0c\x4a\x40\x2f\xdc\x52\x40\x8f\xfc\xd1\xef\x0c\xd9\x4d\x66\x3f\x49\x30\x12\xe9\x5d\x57\x9b\x33\x1d\xc3\xca\xf5\x9f\x31\x21\x11\xc6\xc4\x23\xc6\xf7\xd1\x56\xd0\x28\x20\xca\x43\x8f\xac\x3e\x0b\xa5\x4c\x6a\xf4\x1f\xc2\xf2\xde\xed\xa4\x06\x91\x8e\x14\xc3\xfb\x30\x55\x60\x8c\xef\xca\x62\x10\x65\xcf\xf3\xac\x04\xcd\x18\x06\x88\xec\x82\x07\x99\x02\x07\x61\x1a\x24\x84\xa9\x61\x13\x06\xa1\x21\x04\xad\x33\x09\xc9\x99\xbe\xb7\xfc\x9f\xb0\xd2\x58\x2a\x4e\x55\xf3\xec\xda\xf6\x77\x3b\x9e\xc7\xab\x8d\x31\x77\x91\x52\xad\x31\x9e\xa0\xa0\x5b\xaf\xa1\x5a\x94\xaa\x05\x43\x58\xf1\x9c\x31\xf7\x7f\xba\x76\x4f\x3c\x4c\x2b\x85\x7f\x5a\xb4\xc0\x3d\x49\x33\x86\x27\xca\xf6\x83\xa3\x32\x5b\xb6\xbe\x7f\xb7\x6c\xbf\x2e\x81\x9e\x9e\xe5\x04\xe4\xf4\x43\x27\xe5\xc3\xd9\x7a\xcf\xce\x77\xb1\xc1\x87\x71\xad\x3c\xa0\x75\xe0\x3a\x25\xd3\x27\x5a\xa3\xe4\x9f\x47\x12\xfe\x5f\x77\xb7\xdf\x5d\x7f\x7f\xf7\xd7\xd7\x03\xf9\x5b\x48\xee\xd4\x77\x80\x59\x95\x3a\x50\x0e\xc4\x98\x8c\xa6\x51\xce\x88\xf4\x0c\xbf\x81\x8f\x1a\x1e\x29\x63\x90\x2b\xb4\x21\xb5\xd6\xa7\xdc\xa2\xc9\x24\xee\xa8\xc8\x95\xef\xe5\x2a\x27\x48\x1c\x83\x90\x20\x76\x28\x1f\x25\xd5\x2e\x3f\x14\x66\x6d\x8b\x31\x62\x64\x68\x9f\x60\xc2\x16\xc0\x78\xde\x35\x58\x01\x52\xb2\x33\x7d\x27\x1c\x96\xcf\xce\xf4\x38\x8c\xed\x3f\xf7\xae\xff\x0c\x65\x67\x33\xf3\xd0\x29\x49\x5d\x85\x0f\x48\xc7\xb6\xda\x28\x5b\x56\x4b\x1b\xdc\x67\x6e\x8b\x90\x80\x0b\x2d\x35\x65\xa5\xb9\xd2\xb0\x15\x5c\x48\xd0\xc2\xc0\x22\xbb\xd9\x7a\xe9\x94\x65\x16\x0c\x3a\x62\xf4\x9d\xa3\x51\xa0\x13\x48\x84\x6c\x9b\xa5\x41\x37\x1f\xc2\x70\xf5\xa5\xb1\x4b\x20\x72\x2f\xe2\x9d\xe9\xf8\xeb\xed\xbb\xeb\x5f\xfe\x76\xfd\xfd\xdd\x2d\xb9\xfe\xef\xbb\xeb\x5f\x4c\x80\xfb\xcb\xeb\x73\x83\x20\x92\x6b\xb1\x41\x8e\x92\xe8\x81\xfd\xd3\x46\x97\x8e\x5c\xb1\x52\x0b\x55\xd0\x20\x09\xeb\x83\x0d\x1f\x6b\x12\x3d\x20\x9f\x64\x89\x8b\x20\xf2\x48\xa2\x4d\xa5\xee\x05\x67\x87\x05\xf8\x33\xd9\x86\x21\xe5\x52\x0e\x0d\x71\x6e\x3d\xd0\x0e\x83\x60\x22\x41\x68\xe6\xb6\x2c\x9f\x1e\xcc\x0a\x19\xa3\x9c\xcd\x67\x03\x28\x35\x94\x6a\x0f\xde\x89\x59\xa2\x1c\x5c\xb5\xe3\x18\xce\x1f\x30\xc8\x9b\xce\xc2\xec\x04\x74\xd9\x59\xcb\xd2\x81\xbc\x4b\xa6\xbf\x2e\x74\x38\x2a\x90\x4c\x62\xb4\x9c\x0b\xd7\xe8\x5d\x5e\xb7\x13\x77\xff\xc2\xaa\x94\xe6\xe8\x75\x91\xb5\x70\x46\x26\x34\x98\xc5\x98\x85\xf0\xe5\x1a\x2a\xee\x33\xa1\x96\xb2\xd2\x2c\x5f\x33\x1a\xb1\x03\x78\xaa\x33\x6c\x35\x28\xa9\xb4\x71\xc2\xf4\xd2\x32\x1f\xd9\x68\x1b\x17\xc0\x68\x59\xd4\xd1\xe0\x67\x2b\x91\x6a\x8c\x33\x56\x2e\x35\x85\xc7\x84\x32\x8d\x92\xac\x43\x37\x0b\x47\x17\x5c\xcf\x95\xb1\x7d\x47\xdc\xac\x3c\x59\x2e\x8d\xda\x27\xed\x5c\x2d\x12\xa2\x12\x21\x91\x6e\xf8\xbd\x59\xfa\x96\x41\x4c\x50\x90\x7c\x96\xd5\x74\x83\x06\x83\x2e\xc0\x89\xcd\x87\xb7\x64\x87\x40\xa0\x02\x80\x05\xf9\x4b\x73\x45\x63\xe4\x9a\x26\x74\x11\xce\x6a\x00\x88\x40\x4a\x28\x87\x1a\xf9\xf3\x44\x1d\x57\x9f\xf4\xb1\x48\x42\x4c\xe0\x39\x6d\xfb\x9e\xec\xef\x19\xf2\x8d\xde\xce\x16\x47\x4a\xf6\x34\xcd\x53\x70\x64\xda\x28\xd1\x67\x64\xe1\x47\x3f\x5e\x2c\x7e\x05\x3a\x99\xc3\xd3\x00\xa1\x67\xb0\x07\x05\x7b\xfe\xc2\x0f\x95\x16\x66\x90\xf2\x93\x55\x48\xf9\x57\xad\x42\xca\x4f\x55\x61\xc1\xe0\x57\xaa\xc2\xf0\x43\xfd\x91\x32\xd5\x67\x83\xb3\x22\xa5\xfa\x1e\xd3\x4c\xcf\x5b\xfa\xca\xd2\x37\xdd\xb5\xc8\xc7\x52\x64\x19\xc6\x40\x13\xb0\x43\x80\x90\xe0\x20\xe9\x85\x17\x0f\x9b\xdd\x9e\x09\xc0\x94\x99\xf3\xb3\xe1\x97\x4c\xd2\x94\xc8\xc3\x72\xf8\xc5\xad\x8d\x50\xd0\x7d\x16\x10\x23\x91\xc4\x4b\xed\xf1\x50\x05\x86\x9c\xdd\xe7\x79\x06\x46\x46\x6a\x19\x27\xf2\x51\x50\xbb\x34\x1b\x0a\x23\x39\x50\xf1\x3f\x89\x09\x47\xcb\x9e\x9d\xa8\xad\xc8\x59\x6c\x63\x05\x12\x56\xdc\x50\x8d\x88\x9c\x14\x07\x17\x62\xf0\xac\xa8\x59\x3d\x0f\x6a\x56\x5a\x2c\x66\x7b\x05\xad\x73\x27\xe5\x27\x43\x63\x95\xaf\xc3\x6b\xac\x06\xd6\xe5\x94\x64\x99\xbd\x40\x20\x20\xa3\xd1\x83\x0d\xf6\x8f\xdb\xe2\xb2\xaf\xaf\xc4\x50\xa8\x4d\x83\x6f\x71\xaf\x51\x72\xc2\xbe\xbd\x78\x39\x99\x24\x5c\x51\xe4\x0b\xf9\x66\x45\xee\xd2\xa6\x7a\x92\xce\x7c\x71\xdb\x29\x38\xea\xcf\xda\x36\xdf\x7c\x4a\x6d\x1b\xa3\x2a\x78\x1a\xa3\x67\xd8\x8d\xd6\xb6\x0a\x2e\x74\xc6\x85\xfb\x85\xb6\x97\x98\x4c\x68\xfa\xc3\x04\x1e\x25\x26\x9f\x48\x76\xee\xea\xbd\x90\xdb\x3c\x8d\x0e\x67\xb9\xd9\x33\xcb\xdb\x5e\x48\xb1\x59\xef\xdb\x25\xeb\x77\xca\xef\x39\xf4\xdf\xc8\xf9\xe2\x9b\x0c\x17\xf0\xd8\xe3\x75\x7b\x45\xbf\x28\x3a\x01\x52\x7e\xa6\xa2\xfa\x4a\xc5\xa3\x68\x5e\x31\x6b\xd7\xf6\x5c\xe8\x63\x0a\xd5\x1d\xbf\xc6\xbb\xc9\x9f\x34\x98\x7e\x57\xb0\xec\x51\xdb\x01\x64\x94\x3f\x78\x9b\xb6\x42\x2b\x6b\x62\x96\xbc\x31\xe8\xce\x94\xff\xbf\xbe\x3b\x70\xa1\x5b\xc0\x67\xfa\x64\xc3\x04\x0f\x2d\x68\x8c\xfb\x29\xbc\x8b\x02\xdc\xb5\xf1\x09\x1f\x17\x88\xdd\x08\xee\x77\x3f\xea\x73\xb9\xe7\xd0\x37\x47\x1a\x0d\xc7\xfc\x33\xe8\xbb\x14\x6d\x19\x8e\x5f\xf7\x08\xb8\xe2\xd1\x27\xc4\x96\x30\xa7\x38\x71\xc0\xc9\x7c\x27\x3f\xa6\x17\x1d\x2a\x25\x69\xa1\x5a\x64\xac\xac\x8e\x2f\x23\x79\xc8\x59\xfe\xbc\xfb\xc1\x1b\x26\xd6\x84\xdd\x0f\xdc\x12\x6d\xf3\xf7\x4f\xdb\x07\x1a\x77\x30\x13\x94\xc8\xa3\xfe\x6f\x26\xb4\xea\xdf\x8a\x0e\x26\xfe\xba\x39\xd4\x6f\x5b\x5a\x77\xc6\x18\xa8\xcb\xba\x6a\xd3\xb3\x88\xe4\xe5\x5c\x2a\x0e\x91\x6b\x77\x14\xab\xf5\x0c\x8f\x60\xaf\xdc\xbf\x4f\xaf\xfe\x17\x00\x00\xff\xff\x04\x8f\xf2\x48\x76\x4c\x00\x00")

func regoSpecJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecJson,
		"rego-spec.json",
	)
}

func regoSpecJson() (*asset, error) {
	bytes, err := regoSpecJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.json", size: 19574, mode: os.FileMode(420), modTime: time.Unix(1533336332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoTypeMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\x9b\x40\x10\xc6\xef\x7e\x8a\x11\xa9\x54\xa9\x6a\x4c\x4f\x3d\xf8\x5e\xa9\x97\x4a\x3d\xf4\x56\xf5\x30\x66\x07\x98\x64\xd9\xdd\xce\x0e\x49\x69\xc5\xbb\x57\x0b\x36\x0e\x98\xd8\x91\xa2\xf8\x04\xf3\x87\x99\xfd\x7d\x9f\xf7\xdf\x06\x00\x20\x7b\x17\x8b\x9a\x1a\xcc\x76\x90\xd5\xaa\x61\x97\xe7\x77\xd1\xbb\xdb\x31\xba\xf5\x52\xe5\x46\xb0\xd4\xdb\x4f\x9f\xf3\x31\x76\x93\x7d\x1c\x3b\x95\xd5\x52\xea\xfb\xd1\x05\x82\x6f\x18\x02\xbb\x2a\x1e\xb3\x86\x62\x21\x1c\x94\xbd\x1b\x6a\x6a\x8e\x50\xb2\x25\xe0\x08\x6d\x24\x03\xea\xa1\xc1\x00\xf4\x47\x49\x1c\x5a\xd0\x2e\x50\x4c\x51\x8b\xae\x6a\xb1\x22\x88\x81\x0a\x2e\xb9\x88\xdb\x69\x64\x17\x86\x89\x7e\x7f\x47\x85\x1e\xa3\x68\x0c\xa7\x39\x68\xbf\x8b\x0f\x24\xca\x14\xb3\x1d\x94\x68\x23\x1d\x4a\x02\x6a\x1a\x33\xcb\x8f\x00\x86\xf4\xf6\xc3\xec\x7d\x04\x23\x54\xa6\x59\x37\xb9\xa1\x92\xdd\x30\x21\xe6\xc3\x06\x53\x61\x3f\x3c\xf5\xd3\x91\xa7\xba\xf9\xe7\x0f\x6b\x2f\x06\xcc\xf8\x1d\xce\x32\x25\xd7\xf0\xdd\x53\xf7\x94\x9e\x0a\xba\x68\x31\x95\x00\xba\x39\xc8\xf7\x11\x62\xbb\x4f\x4f\x50\x8a\x6f\x00\x27\x98\x43\xfd\x76\x39\x6e\x15\xec\x94\xbd\x0e\x78\x2a\xbd\x0c\xfa\x12\xf0\x2b\xe0\x9b\xd1\x5f\xd9\x59\x4f\xbf\x59\x7f\xeb\x4f\x9b\x65\xc7\xe6\xe7\x35\x38\xd8\xf7\xaa\x0c\x04\x05\x2a\x55\x5e\x4e\x52\xec\x3b\xa8\xc8\x91\xa0\x7a\x89\xc0\x0e\xbc\x18\x92\xa7\x0a\xd1\xd2\xe5\xec\x52\xb6\x26\x16\xf0\x8f\x0e\xb8\x09\x96\x1a\x72\xfa\xc6\xe2\x08\xfd\x6e\x59\xc8\x64\x3b\xf8\x79\xae\xc9\xdc\xda\xe9\xf7\x6b\x29\xee\x15\x55\x57\x7d\x7e\x89\xe5\x04\xc8\x0c\x60\x96\x27\x3f\x23\x10\x55\xd6\x3d\x70\xde\x97\x25\xe7\xbc\x78\x99\xaf\xfe\x31\x09\x36\xb8\x0d\x2d\xff\xa5\xa4\xce\x1b\xec\xd4\x04\x2f\x2f\xdf\xea\xcb\x03\x39\x6d\xd1\xc2\x49\x63\x18\x3f\x01\x5e\x20\x60\x71\x9f\xae\x49\xad\x51\x21\x88\x7f\x60\x93\x2e\xd0\x57\xef\xfd\xdc\xff\x69\xbc\xeb\x36\xfd\xe6\x7f\x00\x00\x00\xff\xff\x9a\x8a\x83\x1c\x3a\x06\x00\x00")

func regoTypeMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoTypeMappingJson,
		"rego-type-mapping.json",
	)
}

func regoTypeMappingJson() (*asset, error) {
	bytes, err := regoTypeMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-type-mapping.json", size: 1594, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoValidationMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x8e\xd3\x30\x10\xc6\xef\x7d\x8a\x51\x16\x09\x09\xed\x36\x9c\x38\xf4\xce\x11\xc4\x61\xc5\x05\x71\x98\xc6\xe3\xd4\xbb\xfe\xc7\x78\x52\xa8\x50\xde\x1d\x39\x69\x9d\x4d\xda\x6e\x11\x12\xa7\x3a\xfe\x66\x3c\xe3\xdf\x37\xf5\xef\x15\x00\x40\xf5\x26\x35\x3b\x72\x58\x6d\xa0\xda\x89\xc4\x4d\x5d\x3f\xa5\xe0\x1f\xc6\xdd\x75\xe0\xb6\x56\x8c\x5a\x1e\xde\x7f\xa8\xc7\xbd\xbb\xea\x7e\xcc\x14\x23\x96\x72\xde\x57\xb4\x46\xa1\x98\xe0\xe1\x13\xc6\x68\x7c\x7b\x0a\x51\x94\x1a\x36\x31\x4b\x39\xf0\x71\x67\x12\x68\x63\x09\x4c\x82\x2e\x91\x02\x09\xe0\x30\xc2\x7e\x3a\x41\x77\xbe\xc9\x8b\x94\x35\x8b\xbe\xed\xb0\x25\x48\x91\x1a\xa3\x4d\x93\xd6\xa5\xfa\x21\x0e\xc5\xc3\xf6\x89\x1a\x39\xed\xa2\x52\x26\x67\xa3\xfd\xc2\x21\x12\x8b\xa1\x54\x6d\x40\xa3\x4d\x74\x0c\x89\x28\x42\xec\x67\xfa\xc8\x62\x90\xd7\xef\x66\xdf\x23\x23\x26\x9d\x6b\xdd\xd5\x8a\xb4\xf1\x43\x85\x54\x0f\x1d\x94\xc0\x7e\x58\xf5\xe5\xe2\x25\x6e\x7e\xfc\xb1\xed\x45\x81\x82\xf2\x31\xcb\xf7\x73\xf1\x12\xc4\x67\x3a\xbc\x64\x28\x8c\x3e\xd9\x11\x20\x7a\xa0\x5f\xf9\x86\x68\x21\x57\x7b\x9b\x20\x75\xdb\xbc\x02\xcd\xc1\x01\x16\x98\x43\xfc\x7a\x59\xee\x22\xd8\xa2\xde\x06\x5c\x42\x5f\x07\xfd\x1a\xf0\x1b\xe0\xdd\x71\xc8\xce\x72\xfa\xd5\xe5\xaf\x7e\xea\xac\x3a\x25\x5f\xf7\x60\x3e\xc3\xd7\x6d\x20\x68\x50\xa8\x0d\x3c\x59\xb1\x3d\x40\x4b\x9e\x18\x25\x70\x02\xe3\x21\xb0\x22\x7e\xe9\x10\xcd\xcd\xc9\x41\x59\xdd\x91\x61\x08\x3f\x3d\x18\x17\x2d\x39\xf2\xf2\x9f\xcd\x61\xfa\xd1\x19\x26\x55\x6d\xe0\xdb\xb9\x27\x1e\x1d\xcd\xf1\x7e\x5f\x9a\x7b\xc3\xd5\xe1\x84\xab\xbe\x2e\x58\x7e\x46\x47\x10\x74\xc6\x50\xfe\xff\x19\x5a\x83\xd6\xe6\xdf\x48\xac\x03\xbb\x41\x9f\x9e\x8a\x25\x9c\x33\x48\x49\xf8\xf2\x98\x9c\xe7\x55\xc6\xc5\xc0\xf2\xd7\x1d\x7f\xdc\x93\x97\x0e\x2d\x4c\xc8\x61\x3c\x02\x02\x43\xc4\xe6\x39\xbf\x5a\xb2\x43\x81\xc8\x61\x6f\x14\xa5\x45\xf7\xe5\xa2\xff\x7e\x8d\x6b\xd3\x3e\xbe\x44\xab\x7e\xf5\x27\x00\x00\xff\xff\x75\x74\x59\xb0\xe3\x05\x00\x00")

func regoValidationMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoValidationMappingJson,
		"rego-validation-mapping.json",
	)
}

func regoValidationMappingJson() (*asset, error) {
	bytes, err := regoValidationMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-validation-mapping.json", size: 1507, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen.sh": genSh,
	"rego-abstract.in": regoAbstractIn,
	"rego-abstract.json": regoAbstractJson,
	"rego-attribute.in": regoAttributeIn,
	"rego-info.json": regoInfoJson,
	"rego-param.in": regoParamIn,
	"rego-shared-params.in": regoSharedParamsIn,
	"rego-shared-params.json": regoSharedParamsJson,
	"rego-spec.in": regoSpecIn,
	"rego-spec.json": regoSpecJson,
	"rego-type-mapping.json": regoTypeMappingJson,
	"rego-validation-mapping.json": regoValidationMappingJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gen.sh": &bintree{genSh, map[string]*bintree{}},
	"rego-abstract.in": &bintree{regoAbstractIn, map[string]*bintree{}},
	"rego-abstract.json": &bintree{regoAbstractJson, map[string]*bintree{}},
	"rego-attribute.in": &bintree{regoAttributeIn, map[string]*bintree{}},
	"rego-info.json": &bintree{regoInfoJson, map[string]*bintree{}},
	"rego-param.in": &bintree{regoParamIn, map[string]*bintree{}},
	"rego-shared-params.in": &bintree{regoSharedParamsIn, map[string]*bintree{}},
	"rego-shared-params.json": &bintree{regoSharedParamsJson, map[string]*bintree{}},
	"rego-spec.in": &bintree{regoSpecIn, map[string]*bintree{}},
	"rego-spec.json": &bintree{regoSpecJson, map[string]*bintree{}},
	"rego-type-mapping.json": &bintree{regoTypeMappingJson, map[string]*bintree{}},
	"rego-validation-mapping.json": &bintree{regoValidationMappingJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

