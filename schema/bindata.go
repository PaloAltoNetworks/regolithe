// Code generated by go-bindata.
// sources:
// gen.sh
// rego-abstract.in
// rego-abstract.json
// rego-attribute.in
// rego-info.json
// rego-param.in
// rego-shared-params.in
// rego-shared-params.json
// rego-spec.in
// rego-spec.json
// rego-type-mapping.json
// rego-validation-mapping.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x6b\xc4\x20\x14\x84\xef\xfe\x8a\xd7\xb4\x60\x7b\x50\x7f\x40\xa0\x90\x42\x0e\x3d\x14\x4a\xb0\x67\x79\x1a\x6b\x6c\x1b\x15\xb5\xff\x7f\xd9\x6c\x58\xb2\x61\x2f\xcb\x1e\xdf\x0c\x33\xf3\xf1\x1e\x1f\x84\xf6\x41\x68\x2c\x13\x21\xc9\xe6\x3f\x60\xc9\x02\x2d\x42\xa9\x4e\xca\xe1\xfd\xed\x4b\xf6\x4a\x09\xda\x3c\x3d\x1b\xac\x90\xad\x8b\x0c\x6b\xcd\x5e\xff\x57\xcb\x7d\x78\x69\xa8\x70\x2d\x5d\x0d\x5d\x6a\x46\x53\xb9\x0f\xf0\xba\x93\x7e\x4a\x0c\xf7\x0c\x9c\x53\x9f\xdd\xd0\x7d\xf4\xb2\x1f\xf6\xa9\x84\x19\xe7\x3d\x52\x49\xd6\x6c\x70\x96\xf3\x0a\xca\x8d\xa5\x13\x66\x3b\x9e\xbc\xb2\x6d\xbf\xd0\x97\x19\x92\x67\x60\xdf\xc0\x8f\x5f\x1e\xb1\x22\x77\xb1\x25\x2e\xb2\xf5\x04\x96\x7e\x1d\x14\x33\xd9\x19\x81\x93\x43\x00\x00\x00\xff\xff\xfe\x7b\x84\xde\x8e\x01\x00\x00")

func genShBytes() ([]byte, error) {
	return bindataRead(
		_genSh,
		"gen.sh",
	)
}

func genSh() (*asset, error) {
	bytes, err := genShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.sh", size: 398, mode: os.FileMode(493), modTime: time.Unix(1563338935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xbf\xaf\xda\x40\x0c\xde\xf3\x57\x58\xa1\x63\x20\x9d\x3a\xb0\x51\xb5\x03\x5b\x55\xd1\x39\x72\x72\x0e\x39\x14\xee\x22\xdb\xa8\x45\x15\xff\x7b\x75\xb9\x10\x92\xd0\xf7\x78\xe3\xf9\xfb\xe1\x4f\xfe\xee\x6f\x02\x00\x90\x7e\x92\xaa\xa1\x33\xa6\x5b\x48\x1b\xd5\x6e\x9b\xe7\x27\xf1\x6e\x1d\xa7\x1b\xcf\xc7\xdc\x30\xd6\xba\xfe\xfc\x25\x8f\xb3\x55\x9a\x45\xa5\x5a\x6d\x29\xe8\x76\xa5\x28\x63\xa5\x77\xc0\x90\x54\x6c\x3b\xb5\xde\xf5\xb0\x03\x1c\x18\x80\x6d\xeb\x7f\x0b\xa8\x07\x43\x55\x8b\x4c\x80\x20\xa4\xe0\x6b\x28\x51\x08\x50\x95\x6d\x79\x51\x12\x40\x67\x72\xcf\xc0\xd4\x62\x70\x12\xd0\x06\x15\x2a\x74\x50\x12\x30\x5d\x84\x0c\x58\xa7\x1e\xbc\x36\xc4\x20\x1d\x55\xb6\xb6\x55\x24\x8f\x19\xaf\x5d\x1f\xd1\x97\x27\x7a\x04\x44\x63\x6c\xa0\x61\xfb\x83\x7d\x47\xac\x96\x24\xdd\x42\x8d\xad\x50\x96\x44\x4e\x37\x45\xe2\xad\xa2\x76\x4c\x38\x9b\xc7\x5b\x32\xd5\x61\xdb\x2a\x37\x54\x5b\xd7\xef\x90\x7c\xa2\x18\xe9\xb7\xec\xe1\x68\x9d\xa1\x3f\x1f\xb7\xbb\xd3\x1f\x5e\xc9\xc4\x31\x9d\x50\xe7\xc1\xdf\x5c\x33\xf6\xb8\x1f\x18\xd9\x1c\x5f\xd4\xf9\xad\x7f\x96\x14\x0a\x21\x18\x5c\x43\x81\xe1\x19\x5a\xd8\x2c\x0d\xde\x3f\xf7\x3c\xcb\xd0\x17\x32\xe3\x75\xe9\x63\x95\xce\xcf\xf9\x5f\xea\x5e\x68\x67\x7a\x51\xb6\xee\x98\x3e\x91\x6e\xc9\xff\x5f\xd3\x1e\x17\x3f\xa3\x28\x76\x87\xc3\xcf\xfd\xd7\x5f\x87\xef\x45\xb1\x2c\x2b\xb9\x25\xff\x02\x00\x00\xff\xff\x2d\x2e\x3c\x87\x80\x03\x00\x00")

func regoAbstractInBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractIn,
		"rego-abstract.in",
	)
}

func regoAbstractIn() (*asset, error) {
	bytes, err := regoAbstractInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.in", size: 896, mode: os.FileMode(420), modTime: time.Unix(1563338935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xdd\x6f\xdb\x36\x10\x7f\xcf\x5f\x71\x70\x0b\x14\xd8\xf2\xd1\xbd\x0c\x68\xde\x02\xb4\x0f\x01\xda\xad\x18\xf6\xd4\x20\x35\x4e\xd2\xc9\x66\x4b\x91\xec\x91\x4a\xec\x0d\xf9\xdf\x07\x52\x1f\x96\xe2\x0f\xc9\x96\x62\x77\x7b\x58\x63\xe9\xee\xc8\xdf\x1d\xef\xee\x47\x52\xff\x9e\x01\x00\x4c\x5e\xdb\x78\x4e\x19\x4e\xae\x61\x32\x77\xce\x5c\x5f\x5d\x7d\xb3\x5a\x5d\x14\x4f\x2f\x35\xcf\xae\x12\xc6\xd4\x5d\xbc\xfd\xfd\xaa\x78\xf6\x6a\x72\x5e\x68\x3a\xe1\x24\x79\xbd\x9b\xc8\x3a\xc6\xd8\x55\x2f\x12\xb2\x31\x0b\xe3\x84\x56\xe1\xb5\x02\x2c\x25\x00\xa5\xd4\x8f\x16\x9c\x86\x84\x62\x89\x4c\x80\x60\xc9\x81\x4e\x21\x42\x4b\x80\xce\xb1\x88\x72\x47\x16\x50\x25\x57\x9a\x81\x49\xa2\xb7\x64\xc1\xcd\xd1\x41\x8c\x0a\x22\x02\xa6\xdc\x52\x02\x42\x39\x0d\xda\xcd\x89\xc1\x1a\x8a\x45\x2a\xe2\x42\xb8\x9e\xe3\xd2\x84\x29\xea\xe8\x1b\xad\x26\x88\x49\x22\xbc\x18\xca\xcf\xac\x0d\xb1\x13\x64\x27\xd7\x90\xa2\xb4\x74\x7e\x56\xc8\x98\xe6\x9b\xc2\x57\x85\x6e\x3d\xc3\xd6\xf3\xc2\x97\x4c\xa9\x1f\xed\xd5\x55\x42\xa9\x50\x61\x0c\x7b\xd5\xd0\xa8\xc5\x9f\xce\x57\x16\x85\x4a\x68\xd1\xdf\x5c\x25\xbe\xb2\x75\xd6\xb0\x38\x69\x88\xb6\x27\xbe\x75\x98\x3a\x8e\xb7\xa5\xc4\x79\xfb\xfd\xb3\x70\xbe\x0f\x3f\x23\xf2\x01\x21\x28\xad\xfa\x00\xfa\x9f\x3e\x0a\x97\xcf\x0d\xec\x76\x77\x7b\x2e\x65\xbc\x90\x19\x97\xcf\xed\x08\x47\xd9\xfa\xfc\x3b\xf5\x3a\x74\x5b\xfa\xd6\xb1\x50\xb3\xc9\x9a\xd0\xd3\xd9\xe6\x5f\xcd\x38\xee\x5a\x19\x1b\xd7\xe1\x36\x0f\x7f\x14\x36\x64\xc4\x03\xb1\x15\x5a\x51\xd2\x48\x8b\x21\xce\x35\xe8\x1c\xb1\xfa\xbc\x79\x65\xd7\x62\x5f\x1f\xee\xde\x5e\xbc\xbb\xff\xf5\x75\xb7\xbb\xb6\xb9\x7b\x17\xaa\x46\x8a\x0b\x05\x08\x06\xd9\x89\x38\x97\xc8\x15\xe0\x4b\xb8\x75\xf0\x28\xa4\x84\xdc\x97\x04\x29\x9b\x3a\x29\xeb\x2c\x2c\x35\xc3\xf4\x20\x74\x6e\x2b\xad\x50\x31\x00\x93\x04\x34\x83\x7e\x20\x7e\x64\xe1\x28\x88\x6a\x45\xb6\x2a\x38\xc9\x73\x0f\xd6\xf3\xdd\xbd\x44\xba\xc3\xb8\x0b\xfc\x5f\x64\x98\x2c\x29\xe7\x67\xb9\x82\x53\xa5\x0d\x57\xaf\x29\x81\xc2\xf6\xb6\x59\x06\xe3\x4c\x3f\x72\xc1\x94\x4c\xae\xe1\x6e\xab\x54\x90\x54\x98\xd1\x0e\x4b\x2b\x50\x1d\x32\x4d\x38\x5b\x25\xef\x77\x4c\xb9\xff\x32\x6d\xa9\x6d\xa9\xc2\x9b\x87\xf0\xbd\x85\x92\x69\x3c\x47\xee\x16\x5f\x83\x15\xa2\x34\xa3\x85\x29\x1a\x0d\x42\x51\x0b\x1a\xc1\xca\x72\xeb\x60\xae\x95\x66\xdf\xc0\x22\x82\x07\x94\x22\xe9\x70\x1d\xf4\x29\x2f\xcd\xff\x9e\x3a\x42\xd1\x82\x39\xcd\xc8\x5a\x9c\xd1\x41\x70\x3f\x15\xba\x40\x0b\x23\x51\x28\x0f\xb6\x58\x8c\xc1\x0b\x55\xbe\x84\x2c\x6d\xb9\xf6\x64\x80\xb5\x88\x7b\x2c\x84\x4d\x50\x6f\x0a\x1b\x3e\x62\xb9\x2f\x22\x9a\xd7\xf3\x70\x69\x08\x3e\xa8\x3c\xdb\x07\xdf\xae\x02\xd8\x52\xe8\x2e\x2e\x1b\xed\x97\xfe\xeb\x1e\x00\x1a\x05\xde\x2b\x7e\xbd\xbb\xb9\xf8\xf2\xdb\xc5\xbb\xfb\x3b\xbc\xf8\xe7\xe6\xe2\x8b\xaf\xe8\xbf\xbc\xde\x1d\x08\x58\x6b\x74\x6b\x6f\xbb\x42\x95\x3b\x3d\x23\x45\x8c\x2e\x54\xa7\xfd\x03\xf5\xf7\xbc\x41\x02\x41\x58\x68\x99\x84\x68\x19\x96\x68\x84\xf1\x77\x52\x7b\xa5\x5e\xa4\xb5\x24\xdc\x51\xbd\xfa\xe0\x8b\x99\x02\xbf\x9c\x6a\x25\x97\x23\xe0\xf3\x6c\xd6\x9b\xf2\xc5\xc4\xd3\xe0\x24\x0f\x25\x27\x0c\x43\xe0\x4b\x5f\x18\xee\xe8\x38\x13\x4a\x31\x97\x6e\xaa\x39\x21\x3e\x18\x67\x48\xb6\xaa\xc5\xb5\x82\x1a\xc8\x3b\xfa\x9e\x1c\xc6\x81\x30\x8e\x47\xfe\x9d\x7a\x65\xd3\x8b\x80\x0d\xd3\x3d\x18\x6c\x05\x65\x33\xe8\x3d\x40\xdd\x55\x45\x65\x05\xef\xdc\xb3\x77\x47\x33\x62\xff\xa7\xca\xa5\x2c\xfe\xcd\xa2\xe2\x49\x45\x47\xea\x7a\x71\x3f\xd0\x21\x86\x29\x1e\x2f\x85\x1b\xf6\x8e\x1f\xdb\xe6\xd4\x0e\x8d\x6c\xfd\x68\x48\x5c\x47\xe9\x85\xa4\x62\x5e\x9a\x43\x23\xf3\xde\xef\x0d\x09\xc4\xf3\x8c\x2c\xd6\xac\x9d\xeb\x5c\x26\xbe\x14\xad\x46\x39\x76\xbc\x68\x81\x99\x91\x34\x20\x17\x3f\x14\x16\x4a\x4c\xbe\xd1\xff\x7f\x13\x91\x16\x46\xdb\xb1\xb2\xd0\xe4\x91\x14\xb1\x5c\x42\x65\xf5\x80\xd8\xf6\x50\x29\xeb\xa0\xd7\x72\x9c\xd3\xa0\xe5\x50\x7b\x60\x1a\xf6\x31\x87\xb8\xe1\x0f\xcc\xa8\x20\xf4\x61\x43\x19\x51\x05\xdf\xd3\xda\x47\xc1\x61\x89\x64\xe8\x2e\xe1\x36\x05\xca\x8c\x5b\x82\x1f\xab\x6a\x52\x47\xcf\xef\x85\x23\x65\xd7\x0e\x6f\xfa\xa2\xfd\xd3\xe0\x8f\x9c\x7c\x17\x2d\xd7\xbf\x41\xc1\xed\x93\xb3\xd0\x7a\xa3\x25\xc4\x3a\x33\x42\x12\xaf\x9d\x28\xec\xc4\x58\x2e\xf0\x41\x18\x53\x21\x1d\x31\x46\xf2\xf0\x66\xdb\x66\x50\x15\x2a\x9f\xec\x85\x71\x4f\x25\x4c\xce\x3e\xd0\x7b\x6d\x57\x46\xa9\x61\xa9\x66\x12\x33\x35\xf5\x5c\x66\x1c\x0a\x0c\xa5\xc9\x93\xd0\xa3\x19\xf9\x4d\xc5\x08\x48\x42\x02\xce\xf1\x81\x00\x61\xc5\xe8\x4b\xf3\xc7\x46\x25\x12\x52\x4e\xa4\x62\x14\x64\x0d\x46\x8b\x90\xa1\x50\xd0\x30\xff\x32\x65\x36\x57\xe2\x47\x4e\xb7\xe5\xae\xd2\x57\xda\x41\xee\xc8\x70\x31\x95\xa4\x66\x6e\x7e\xb0\x3b\x32\x5c\x88\x2c\xcf\xa0\x30\xb3\x4e\xfb\xab\x2d\x76\xef\x2d\x6d\xed\x96\xaa\xe5\x0e\x46\x38\x8c\xe1\x57\x00\xb7\x6c\x6b\x2a\x7c\x35\x41\x38\x36\x40\xa1\x06\x87\x50\xa8\x9f\x3a\x84\x42\x0d\x0d\x61\x09\xf0\x27\x0d\xe1\xc1\x2c\xc7\x63\x0b\xb4\xe5\xd4\xfb\x13\x9d\x09\x37\x0d\x34\xea\x20\x1c\xb7\x69\x28\x65\xe7\xcf\xe2\x52\x36\xf9\x84\xb5\x31\x9e\xb9\x55\x4c\x4d\x33\x14\x1c\xfc\xc8\xcd\x23\x1c\x57\xbc\x10\x81\xa9\x8f\x42\x4e\xc6\x5f\x0c\x8b\x0c\x79\x39\x1e\x7f\x29\x7a\x23\x94\x76\x4f\x42\x62\x98\x30\x19\xeb\xd0\x4e\x58\xf0\xe6\xc2\xc1\xdd\x09\x80\xd4\x57\x3f\xa3\xe0\x28\xad\x1d\x1b\x86\xa5\x98\xc9\x8d\x03\xa2\xb0\x15\x6e\xff\x56\x47\x18\x09\xa1\xf4\x7b\x3e\x37\x87\x18\x79\xaf\x3a\x38\x12\xc0\x17\x65\xcd\xf6\x34\xac\xd9\x3a\x3d\xda\xda\x2b\x6d\xbd\xf4\x29\xc4\x60\x6a\x6c\xf3\xa8\x9c\xc0\xb0\xbe\x9c\xa1\x31\xe1\x8a\x4d\x83\x11\xf1\xf7\x50\xec\x1f\xe7\xa4\x42\xaf\x2b\x68\x87\x0d\x97\x00\x4e\xc3\x1b\x5a\x38\x62\x85\xf2\xcd\xb1\x1b\xb8\x63\x54\x56\x90\x1a\x29\x37\x57\xe6\x8e\xbd\x54\x07\xc5\x2c\x84\xa3\xf9\xad\xc2\x01\x61\xe8\xa1\x41\x2a\xcf\x3a\xef\xf0\x6b\xe9\xfd\xee\x02\xfb\x73\xd8\x20\x9e\x4a\x8d\x7d\x82\x14\x84\xfb\x27\x22\xd4\x30\x7b\xca\x4a\x61\x7b\x4f\xa3\xf3\x2b\x8c\x96\xb4\x13\x9d\x9f\x42\xd4\xb2\x55\xfa\xf5\x95\x67\x4a\xf7\x10\xfd\xb8\x07\x46\xa6\xf4\x13\x9a\xee\x7b\xdb\x61\x07\xcd\xe1\x43\x06\x5c\xff\x68\x6c\xab\xc2\xa6\x53\x56\x9f\x2f\x10\xe7\xd6\xe9\x0c\x56\x06\x57\x1f\xec\x4c\x9b\x0f\x85\x24\x5f\xe8\xd0\x18\xb9\xf4\x7f\x1c\xbc\x6b\x39\xd2\x0d\x7c\xa7\x52\xc7\xc5\xf9\xd6\xb7\x9b\xdf\xac\x3f\xdd\xfa\x05\xda\x59\xf1\xff\xa7\xb3\xff\x02\x00\x00\xff\xff\xed\x44\xe4\x54\xd1\x29\x00\x00")

func regoAbstractJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractJson,
		"rego-abstract.json",
	)
}

func regoAbstractJson() (*asset, error) {
	bytes, err := regoAbstractJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.json", size: 10705, mode: os.FileMode(420), modTime: time.Unix(1566593966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAttributeIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xcd\x8e\xdb\x36\x10\xbe\xe7\x29\x06\x46\x80\x00\x6d\x36\x68\x8f\xc9\x2d\x40\x73\x58\x20\x49\x8b\xa2\xa7\x6c\x36\xc6\x48\x1a\xd9\x6c\x28\x92\x19\x92\x5e\xbb\x45\xde\xbd\x20\x25\xd9\x92\xd7\xb6\x64\x49\x6b\xa7\xbe\xec\x42\x1a\x0e\xf9\xcd\xef\x47\x52\xd0\xf8\xcd\xdc\xc6\xd0\xec\x0d\xcc\x74\xf2\x37\xa5\x6e\xf6\xf2\x59\xeb\x6d\x46\x36\x65\x61\x9c\xd0\x2a\x08\xbd\x17\xd6\x81\xce\x61\x45\x6c\x85\x56\x94\x01\x3a\xc7\x22\xf1\x8e\xec\xab\xfd\xb1\x98\x65\x22\x0c\x44\xf9\x07\x6b\x43\xec\x04\xd9\xd9\x1b\xc8\x51\x5a\xda\x13\x35\xe8\x1c\xb1\x6a\xc9\xfd\xdb\x12\x89\x62\x5f\x56\x77\xbf\xdc\xbc\xbe\xff\xf9\xf3\xf3\x83\xef\x5b\x78\x90\x19\x37\x7b\x4b\xea\x82\xb5\x03\x03\x42\x01\x82\x41\x76\x22\xf5\x12\xb9\x46\xfc\x0a\x6e\x1d\x3c\x08\x29\xc1\x5b\x02\x94\xb2\x39\x26\x67\x5d\x80\x5b\x12\x18\xa6\x95\xd0\xde\xd6\xa3\x2c\xa0\xca\x00\xb3\x0c\x34\x83\x5e\x11\x3f\xb0\x70\x14\x45\xb5\x22\x0b\x19\xa5\x12\x99\xb2\x7d\x13\x6e\xd7\x2b\x1c\x15\x87\x6d\xd2\xcf\x8f\xa7\xc0\xff\x49\x86\xc9\x92\x72\x61\x95\x3b\x38\xc1\x1e\x61\x81\x5c\xbf\xa6\x0c\x4a\xdd\xc7\x56\x19\x95\x33\x7d\xf3\x82\x29\x9b\xbd\x81\xbb\xa3\x52\x51\x52\x61\x41\x27\x34\xed\x40\x75\xc8\x34\xe1\x1c\x95\xbc\x3f\xb1\xe4\xfe\x71\xda\x1a\x66\x4e\x07\x6b\x7b\x0a\x29\xf5\x03\x65\xf3\x74\x89\xdc\x2d\xfe\x08\x56\xf4\xd2\x82\xd6\x06\xdc\x12\x1d\x20\x58\xc7\x42\x2d\x1a\xce\x2a\xbc\x75\xb0\xd4\x4a\x33\x38\x0d\x09\xc1\x0a\xa5\xc8\x3a\x4c\x07\xcd\xb8\x29\x55\x1e\xb7\x60\xf8\x7d\xef\x70\x45\x0b\xe6\xbc\x20\x6b\x71\x41\x83\xe0\x7e\x28\xc7\x02\xad\x8d\x44\xa1\x02\xd8\x32\x18\xa3\x15\xea\x7c\x89\x59\xda\x32\xed\xd5\x00\x6b\x91\xf6\x08\x84\x43\x50\xdf\x96\x3a\x82\xc7\x7c\x28\x22\x9a\x1f\xe7\xe1\xc6\x10\xbc\x53\xbe\x38\x07\xdf\xa9\x02\xd8\x1a\xd0\x5d\x5c\x0e\xea\xaf\xec\xd7\x3d\x01\x34\x2a\x7c\x18\xf8\xe5\xee\xed\xcd\xa7\x5f\x6f\x5e\xdf\xdf\xe1\xcd\x3f\x6f\x6f\x3e\x85\x92\xfe\xd3\xe7\xe7\xa7\x3d\x11\x7e\xdf\xc7\xf9\xca\x3b\xbd\x20\x45\x8c\x2e\x96\xa7\xf3\x3d\xf5\xd7\x92\x1a\x7e\x11\x16\x5a\x2a\x21\xd9\xc4\x18\x4d\x30\xfd\x4a\xea\xac\xdc\x4b\xb4\x96\x84\x27\xca\x57\x1f\x7c\x29\x13\x86\x95\xce\xb5\x92\x9b\x09\xf0\xa5\xa8\x20\xa8\x0a\xd5\xc4\x92\x83\xcc\xc7\x9a\x13\xa7\x21\x08\xb5\x2f\x4e\x77\x71\x9c\x19\xe5\xe8\xa5\x9b\x6b\xce\x88\x07\xe3\x8c\xd9\x56\xf7\xb8\x96\x53\xbd\x0d\xb4\x26\x34\xe5\x38\x0f\xc4\x79\x02\xf2\xaf\xd4\x2b\x9d\x9e\x04\x6c\x5c\xee\x60\xb0\x35\x94\xc3\xa0\xcf\x00\x75\x57\x57\x95\x1d\xbc\x97\x30\x13\xca\xd1\x82\x38\xfc\xab\xbc\x94\xe5\xdf\x22\x29\x9f\xd4\x7c\x64\x5b\x30\xee\x47\x1a\xc4\x30\xa5\xd3\xa5\x70\x43\xdf\xe5\x7d\xdb\x5c\xda\x50\xcf\x6e\x1f\x8d\xf1\xeb\x24\xcd\x90\x54\xca\x1b\x33\xd4\x33\xbf\x51\x2e\x14\x81\xd8\xcf\xc8\x32\x66\xed\x52\x7b\x99\x85\x52\xb4\x9b\xe5\xd2\xfe\xa2\x35\x16\x46\xd2\x88\x5c\x7c\x57\x6a\xa8\x30\x85\x4e\xff\xff\x4d\x44\x5a\x1b\x6d\xa7\xca\x42\xe3\x13\x29\x52\xb9\x81\x5a\xeb\x00\xdf\xf6\x18\x52\xd5\xc1\x30\xca\xb1\xa7\x51\xe1\xb0\xb5\xc0\x3c\x6e\x64\x86\x98\xe1\x23\x16\x54\x32\xfa\xb8\xa3\x4c\xa8\x86\x1f\x78\xed\x83\xe0\x18\x22\x05\xba\x57\x70\x9b\x03\x15\xc6\x6d\x20\xcc\x55\x37\xa9\x8b\xe7\xf7\xda\x91\x8a\xdb\xd9\x41\x68\x7f\x37\xf8\xcd\x53\xe8\xa2\x55\xfc\x1b\x14\x6c\x4b\xfc\x81\x6b\x24\x54\xb6\xde\x64\x03\xa9\x2e\x8c\x90\xc4\x8f\xce\x14\x4e\x62\xac\x02\x7c\x14\xc6\x5c\x48\x47\x8c\x89\x1c\xde\x6c\xdb\x0c\xaa\x46\x15\x92\xbd\x54\x1e\xa8\x84\xf1\x1c\x1c\x7d\xd6\x7e\x65\x92\x1a\x96\x6b\x26\xb1\x50\xf3\xc0\x65\xa6\xa1\xc0\x50\xa9\xbc\x0a\x3d\x5a\x50\xd8\x55\x4c\x80\x24\x26\xe0\x12\x57\x04\x08\x3b\x46\x5f\xa9\xbf\x34\x2a\x91\x91\x72\x22\x17\x93\x20\x6b\x30\x5a\x84\x02\x85\x82\x86\xfa\xa7\x29\xb3\x5e\x89\x6f\x9e\x6e\xab\x6d\x65\xa8\xb4\xa3\xcc\x51\xe0\x7a\x2e\x49\x2d\xdc\x72\xb0\x39\x0a\x5c\x8b\xc2\x17\x50\xaa\x79\x4c\xfb\xeb\x3d\x76\xef\x3d\xed\xd6\x2c\x75\xcb\x1d\x8d\x70\x1c\xc3\xaf\x01\x1e\xd9\xd6\xd4\xf8\xb6\x04\xe1\xd2\x00\x85\x1a\xed\x42\xa1\x7e\x68\x17\x0a\x35\xd6\x85\x15\xc0\x1f\xd4\x85\x83\x59\x4e\xc0\x16\x69\xcb\xb5\xf7\x27\xba\x10\x6e\x1e\x69\xd4\x20\x1c\xb7\x79\x2c\x65\x2f\xf7\xfc\x52\x35\xf9\x8c\xb5\x31\x81\xb9\xd5\x4c\x4d\x33\x94\x1c\xfc\xc2\xcd\x23\x1e\x57\x3c\x11\x81\xd9\x1e\x85\x5c\x8d\xbf\x18\x16\x05\xf2\x66\x3a\xfe\x52\xf6\x46\xa8\xf4\x5e\x85\xc4\x30\x61\x36\xd5\xa1\x9d\xb0\x10\xd4\xc5\x83\xbb\x2b\x00\xd9\xde\xfd\x4c\x82\xa3\xd2\x76\x69\x18\x96\x52\x26\x37\x0d\x88\x52\x57\xbc\xfe\xdb\x1d\x61\x64\x84\x32\xec\xf9\xdc\x12\x52\xe4\xb3\xea\xe0\x44\x00\x9f\x94\x35\xdb\xeb\xb0\x66\xeb\xf4\x64\xb1\x57\xe9\x7a\xea\x53\x88\xd1\xd4\xd8\xfa\xa4\x5a\xc0\xb8\xbe\x5c\xa0\x31\xf1\x8e\x4d\x83\x11\xe9\xd7\x58\xec\x1f\x96\xa4\x62\xaf\x2b\x69\x87\x8d\x97\x00\x4e\xc3\x0b\x5a\x3b\x62\x85\xf2\xc5\xa5\x1b\xb8\x63\x54\x56\x90\x9a\x28\x37\x77\xea\x2e\x1d\xaa\xa3\x7c\x16\xdd\xd1\xfc\x58\x61\x80\x1b\x7a\x8c\x20\xe5\x8b\xce\x4b\xfc\xad\xf4\x79\x97\x81\xfd\x39\x6c\x14\xcf\xa5\xc6\x3e\x4e\x8a\xc2\xfd\x13\x11\xb6\x30\x7b\xca\x4a\x61\x7b\x2f\xa3\xf3\x33\x8c\x96\xb4\x13\x9d\xdf\x42\x6c\x65\xeb\xf4\xeb\x2b\xcf\x94\x9f\x21\xfa\xfe\x0c\x8c\x4c\xf9\x07\x34\xdd\xf7\xb6\xe3\x0e\x9a\xe3\x97\x0c\xf1\xaa\x71\xd8\xb9\xe3\xc7\xaa\xc6\x21\xa4\xde\x3a\x5d\xc0\x4e\xe1\xee\x8b\x9d\x79\xf3\xa1\x90\x14\x0a\x1d\x1a\x23\x37\xe1\x9f\xc1\xbb\x96\x0b\x5d\xc1\x77\x0e\xea\xb8\x38\x3f\xfa\xf6\xf0\x9b\xc7\x4f\xdb\x4f\xbe\x3f\xfb\x2f\x00\x00\xff\xff\x39\x3b\xc0\xcd\x61\x26\x00\x00")

func regoAttributeInBytes() ([]byte, error) {
	return bindataRead(
		_regoAttributeIn,
		"rego-attribute.in",
	)
}

func regoAttributeIn() (*asset, error) {
	bytes, err := regoAttributeInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-attribute.in", size: 9825, mode: os.FileMode(420), modTime: time.Unix(1566593961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoInfoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x4e\xc3\x40\x0c\xc7\xf7\x3c\x85\x75\x30\xb6\x0d\x13\x43\x36\xc6\x0e\xa0\x4e\x2c\x88\xc1\x4d\x7c\xad\xab\x34\x77\xd8\x0e\x02\x55\x7d\x77\x74\xb9\xa6\x4a\x3f\x36\x96\x44\xf9\xd9\xff\x8f\xf8\x50\x00\x00\xb8\x47\xad\xb7\xb4\x47\x57\x81\xdb\x9a\xc5\xaa\x2c\x77\x1a\xba\x79\xa6\x8b\x20\x9b\xb2\x11\xf4\x36\x7f\x7a\x2e\x33\x7b\x70\xb3\xac\x34\xb6\x96\x92\x6e\xd9\xf9\x30\xc2\x86\xb4\x16\x8e\xc6\xa1\x4b\xa3\x57\x32\x04\xee\x7c\x90\x3d\x26\x06\xb8\x0e\xbd\x01\x82\x92\x41\xf0\xa0\x91\x6a\xf6\x5c\x0f\x43\x5d\x9c\xad\x7f\xe3\xe0\x1c\xd6\x3b\xaa\x6d\xa4\xd8\x34\x9c\xf6\xb0\x5d\x49\x88\x24\xc6\xa4\xae\x02\x8f\xad\xd2\x69\x45\xe8\xab\x67\xa1\xc6\x55\xf0\x31\x90\x81\x46\x21\xcf\x3f\x27\x9b\xbc\x17\x82\x4d\xbf\xbf\x49\x34\x55\x1e\xc8\xe7\xac\x28\x4e\xba\x49\xcc\xe1\xc6\x6f\xca\x2e\x6a\xab\x09\x77\x9b\x89\xff\xbd\xd3\xac\x06\x13\xb0\x00\xbd\x52\x7a\xd5\xd8\xb6\x80\x91\xd5\x9d\x75\xc7\xeb\xca\xff\x8b\x7c\xc3\x3d\xa5\xab\xdb\x96\x20\xd9\x5d\x9e\xff\x56\xec\xb1\x6f\x53\x66\xce\xbe\xdb\x6a\x3c\xdc\x4d\xb1\xab\xe8\xf7\xbc\x37\xa6\xbf\xac\x96\xd7\x71\xe3\x9f\x70\x67\xb4\x21\x99\xc4\x15\xf9\x79\x2c\xfe\x02\x00\x00\xff\xff\xb8\x06\xde\x01\xb3\x02\x00\x00")

func regoInfoJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoInfoJson,
		"rego-info.json",
	)
}

func regoInfoJson() (*asset, error) {
	bytes, err := regoInfoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-info.json", size: 691, mode: os.FileMode(420), modTime: time.Unix(1563338935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoParamIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcb\x6e\xdc\x3a\x0c\xdd\xe7\x2b\x08\xaf\x83\xfb\x01\x59\x27\x8b\x0b\xb4\xc5\xa0\x0d\xba\x09\x82\x80\xb6\x39\x33\x2c\xf4\x70\x25\x39\x0f\x14\xf9\xf7\x42\xf6\x78\x62\x8d\x2d\x5b\xb6\x51\xb4\xde\x0c\x6c\x91\x47\xd4\xe1\x21\xc5\x81\xde\x93\x39\x76\x82\xb2\x1b\xc8\x76\x68\x50\x92\x23\x03\xdf\xc8\x65\xd7\x57\xa1\xd5\x5b\xd5\x18\xe9\xfc\x07\x15\x83\x55\x2c\x4b\x76\xac\x15\x8a\x9d\xd1\x15\x19\xc7\x64\xb3\x1b\xd8\xa3\xb0\x74\x61\x5a\xf5\x0d\x7e\x05\x6b\xcd\xba\xa1\x9f\x35\x1b\x2a\x47\x57\x23\x01\x5b\xf8\xda\x7a\x49\x52\xce\xc2\xdd\x6b\x65\xc8\x5a\xd6\xca\x5e\x04\x7a\xc6\x28\xc9\x16\x86\x2b\x1f\xb3\x47\xba\xa5\x3d\x2b\x82\x97\x23\x3a\x28\xb4\xcc\x59\xa1\x5f\xb2\xa0\xf7\x50\x7d\xec\x82\x86\xa0\x8b\xef\xbf\x18\x74\xc7\x14\x1a\x83\x6f\x31\x23\x76\x24\xc7\x09\x58\x84\x93\x88\xb5\x08\x6f\x01\x66\x80\x6b\x9d\x61\x75\xc8\x26\x1d\xde\xa3\xab\xe3\x2b\xc3\xaf\xef\xc3\xc0\x33\x52\xce\xc4\xf4\x04\x81\x62\x3e\xb1\x75\x3e\xa7\x1f\xca\x49\x16\x88\x7f\xcd\x09\xdc\x91\x40\x9c\x50\xf0\x19\x59\x60\x2e\xa8\xa7\x91\x3f\x2f\x8b\x81\xfa\xa7\xb4\x11\x3b\x06\x82\x65\x75\xe8\x47\x3e\x85\x32\x59\xfc\x81\x65\x7a\x23\x08\xdc\x7a\x45\xff\x30\x2d\x4c\x85\x92\xe6\xc4\xdb\x3f\xf4\x8c\x69\x73\xb2\xa8\xc9\xe3\x44\xc8\x33\x7d\x6c\x18\x74\x5a\x31\x0d\x9b\xf1\x97\xf9\x13\xc3\x48\xaa\xbd\x9b\x17\xa9\x17\xec\x39\xc9\x31\x75\x86\x31\x2c\x29\xe8\x05\xa9\x58\x4b\xc0\x6d\x72\x3a\x47\xb6\xcc\x7a\xde\x7f\x9f\x8e\x13\xd6\x3a\x1e\xee\xbd\xf3\x72\x02\xee\x8f\x04\x7e\xdf\xe0\x2e\x5b\x73\xf2\x04\x0f\x52\xb5\x9c\xad\xe1\xb3\x75\x32\x6e\x63\xcd\xca\xd1\x61\xb2\x4f\x05\xe6\x7b\xa1\x71\xaa\x55\x05\xc6\xb9\xd6\x82\x30\x45\x5e\x70\x3e\x66\xa2\x6d\x59\x1b\x4c\x94\x2e\xb4\x89\x97\x13\x1d\xa9\x7b\x1e\x37\xc9\x50\xd6\xc2\x71\x25\xd6\x4b\xf1\x73\x0b\xc0\x05\xbb\xb9\x51\x02\xa2\xe3\x96\x05\xbe\xa8\x47\x28\x50\x41\x4e\x60\x49\x39\xe8\x82\x04\xcf\x48\xf4\x5e\x0d\x23\x3d\x09\xb6\x4b\xe7\x26\x92\x50\x08\xfd\x42\xe5\x53\x71\xd4\x5c\x24\x74\x79\x88\x70\xb5\xd3\xd6\xb2\x20\xf8\x8e\xa2\xa6\xd8\xbc\x11\x80\x5c\xb0\xf5\x7f\xcb\x52\x53\xc3\x6c\xc1\x8b\xef\xba\x99\x41\x2c\xa0\x10\x2d\x83\x7e\x0f\x3f\x88\x3c\x27\x6f\xb2\x64\x1c\x84\x65\x23\x21\x2c\x6d\x9b\x30\x39\x1a\x42\xd2\x3d\xb3\xc7\x5a\xb8\xa7\xe6\xfc\x1b\x6e\x9a\x06\xa5\x4d\xd5\x3a\x5d\x37\xfe\x4d\x14\x83\xdb\xc6\xcb\x5d\x4b\x76\x8e\xca\x05\x09\x7a\xe8\x32\xd4\xeb\x52\xbd\x66\x08\x99\xaa\x85\x68\x7f\x65\xde\x7e\xe9\xc6\xb4\x33\xf9\xdb\xba\x05\xbd\xa2\xac\x04\x6d\xe4\xf6\xae\x45\x59\xcd\x6d\xe7\x3f\xce\xed\xbf\x45\xe8\xf6\x7f\x39\x57\xe1\xdb\xef\x00\x00\x00\xff\xff\x76\x36\xe8\x20\xb1\x0f\x00\x00")

func regoParamInBytes() ([]byte, error) {
	return bindataRead(
		_regoParamIn,
		"rego-param.in",
	)
}

func regoParamIn() (*asset, error) {
	bytes, err := regoParamInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-param.in", size: 4017, mode: os.FileMode(420), modTime: time.Unix(1563338935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x31\x6f\xc2\x30\x10\x85\x77\x7e\xc5\xc9\x74\xaa\x0a\xee\xd4\x81\x8d\x81\xb1\x12\xa2\xec\x91\xb1\x9f\x6b\xa3\x60\x5b\xe7\x5b\x50\x95\xff\x5e\x39\x29\x69\xd3\x2d\x79\xf7\xbd\x7b\xe7\xf7\xb5\x22\x22\x52\x4f\xd5\x06\xdc\x8c\xda\x91\x0a\x22\x65\xa7\xf5\xb5\xe6\xb4\x99\xd4\x6d\xe6\x4f\xed\xd8\x78\xd9\xbc\xbe\xe9\x49\x5b\xab\x97\xc9\x29\x51\x7a\x34\xdf\x47\x30\x0c\x47\x47\xc3\xe6\x06\x01\xd7\x07\xe1\x50\x2d\xc7\x22\x31\xa7\xc6\x9d\x03\xa8\xcc\x10\x39\xf8\x98\xe0\x28\x80\x41\xd6\x24\xba\x80\x18\x1e\x0c\x8b\x64\xe1\xe8\x72\xa7\x2c\x01\x4c\xb5\xc0\x46\x1f\xad\x69\x9b\xea\x76\x3e\xe0\x5e\xc6\xfc\x7c\xb9\xc2\xca\x43\x35\xce\xc5\xc6\x99\xfe\xc8\xb9\x80\x25\xa2\xaa\x1d\x79\xd3\x57\xfc\x20\xc5\x88\x80\xd3\x62\x3e\xd5\x31\x8e\xb7\xcf\x8b\xff\xa9\x26\x86\x6f\x59\x6b\x3d\x9e\x3d\x26\x54\xfd\xfb\x1a\x35\xe3\xc3\xf8\x35\xcc\x15\xcc\xf4\x32\xe4\x8f\xb5\xe9\x5d\x77\xdc\x9f\xf6\xef\x87\xf3\xe1\xd4\x75\xff\x77\xad\x86\xd5\x77\x00\x00\x00\xff\xff\xc9\x23\xe7\x9b\xae\x01\x00\x00")

func regoSharedParamsInBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsIn,
		"rego-shared-params.in",
	)
}

func regoSharedParamsIn() (*asset, error) {
	bytes, err := regoSharedParamsInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.in", size: 430, mode: os.FileMode(420), modTime: time.Unix(1563338935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xdc\x38\x0c\xbd\xcf\xaf\x20\x9c\x3d\x2d\x92\x99\x3d\xed\x21\xe7\xe4\x50\xa0\x2d\x82\x26\xe8\x25\x08\x02\xda\xa6\xc7\x0a\x64\xc9\x95\x38\xf9\x40\x31\xff\xbd\x90\x34\x76\xec\xf8\x7b\x06\x45\xdb\x4b\x63\xe9\x91\x22\x1f\x9f\x28\xce\xcf\x15\x00\x40\xf4\x8f\x4d\x72\x2a\x30\xba\x84\x28\x67\x2e\x2f\x37\x9b\x27\xab\xd5\x45\x58\x5d\x6b\xb3\xdd\xa4\x06\x33\xbe\xf8\xef\xff\x4d\x58\x3b\x8b\xce\x83\x25\x0b\x96\xe4\xec\x6e\x73\x34\x94\xc2\x0d\x1a\x2c\x88\xc9\xd8\x0a\x91\x92\x4d\x8c\x28\x59\x68\xe5\x70\x77\x39\x41\x59\x83\x20\xa5\x4c\x28\x4a\x21\x27\x43\x90\xa0\x82\x98\xc0\x50\x46\x86\x12\x52\x09\xa5\x10\xbf\x81\xe6\x9c\x0c\xd8\x92\x12\x91\x89\x04\x9d\x27\xbb\xae\x03\x78\x2b\xfd\xf9\x3a\x7e\xa2\x84\xab\x55\x4c\x53\xe1\x70\x28\x6f\x8c\x2e\xc9\xb0\x20\x1b\x5d\x42\x86\xd2\xd2\x01\x52\x22\x33\x19\xd5\xda\x0f\x74\xf8\xed\xf5\xbf\xad\xef\x40\x93\xa1\xcc\x9d\x75\xb6\xf1\x61\xfb\x13\xec\xe6\x3d\x9b\xa8\x86\xef\xfd\x5f\xfb\x9a\x82\x1a\xdd\x3e\xa4\x61\xda\x39\xac\x66\xb6\xa6\x14\x6e\xa9\x4a\xf0\x1d\xd5\x97\x7e\xbd\x3b\x4d\xc3\x7b\x28\xfd\x3c\xd4\xfb\x86\x7e\xec\x84\xa1\xb4\x77\x77\x20\x60\x0b\xdf\x82\x55\x41\x8a\x2d\x5c\xbf\x96\x86\xac\xf5\x34\x9c\xf7\xfb\xf8\x20\x96\x2b\xaf\x0e\x78\xc9\x91\x21\xd1\x45\x2c\x54\xa8\x3e\xe8\xac\x29\x22\x34\x4e\x34\x21\xbe\xf5\x90\xeb\x8a\x29\x34\x06\xdf\x86\x40\x82\xa9\xe8\x27\x60\x91\x9f\x99\xbe\x16\xf9\x5b\xe0\xb3\xe5\xd7\xb2\x11\x6a\x1b\x8d\x1a\xec\x07\x77\xfb\x77\xba\xab\xfb\x6e\xe0\x11\x29\x36\x43\x7a\x82\x96\x62\x3e\x0b\xcb\xae\xa6\x9d\xee\xd1\x31\xe9\x08\xc4\x7d\xc6\x04\x9c\x13\xc8\x83\x17\x7c\x46\x21\x31\x96\xcd\x46\xf3\xfb\x65\xd1\x51\xff\x98\x36\x86\xd2\x40\xb0\x42\x6d\x9b\x91\x8f\x79\x19\xbd\xfc\x2d\xe4\xfc\x46\xd0\x32\x6b\x5c\xfa\xfb\x71\x61\x2a\x2c\x68\x4a\xbc\xcd\xa4\x27\xa0\x3e\xb3\x41\xc8\xc3\x48\xc8\x13\x7d\xac\x1b\xf4\xbc\xcb\xd4\x6d\xc6\x5f\xa7\x33\x86\x9e\x52\x3b\x33\x27\x52\x6e\xbe\x83\x43\xea\x6c\xc7\xb0\xe4\x42\x2f\x28\xc5\xb1\x04\x5c\xcd\x2e\x67\xcf\x91\x51\xc3\xfa\xcf\xd3\x71\xf0\x75\x1c\x0f\x77\xce\x78\x39\x01\x6e\x10\x72\xe7\xb6\xde\xb2\x63\x32\x9f\x61\x41\x6a\x57\x4c\xde\xe1\x1a\x3d\xdb\xaf\x47\x0b\xc5\xb4\x1d\xed\x53\x2d\x78\x26\x35\x8e\xb5\xaa\x16\x38\xd6\x5a\x12\xce\x91\x17\xd4\x69\xce\xc4\xa6\x3b\x83\x33\xa5\x0b\xa1\xf0\xc5\x48\x47\xaa\xfe\x3d\x9c\x24\xc3\x62\x27\x59\x94\xf2\x78\x29\x7e\x09\x0e\x44\x22\x78\x6a\x94\x80\xc1\x71\xcb\x82\xf8\x70\x1f\xab\xc1\xdc\x92\x62\xa8\x82\x04\xc7\xc8\xe0\xbb\xda\x8e\xf4\x20\xd8\xaa\x9c\x27\x91\x84\x52\xea\x17\x4a\x1f\x93\x5c\x8b\x64\x46\x97\x87\x01\xae\x6e\xb4\xb5\x42\x12\x7c\x47\xb9\xa3\xa1\x79\xa3\xe5\xe4\x03\x5b\x9f\x02\x4b\xfe\x0e\x0b\x0b\x4e\x7c\xe7\x7e\x06\xb1\x80\x52\x06\x06\xdd\x19\x6e\x10\x79\x9e\x7d\xc8\x92\x71\x10\x96\x8d\x84\xb0\xb4\x6d\xc2\xe8\x68\x08\xb3\xde\x99\x0c\x77\x92\x1f\x7d\xfe\x27\xbc\x34\xde\x4b\x28\xd5\x71\xba\xf6\xf6\x3e\x8a\xce\x6b\xe3\xe4\xae\x0b\xc1\x4c\xe9\x82\x02\xdd\x57\x15\x6a\x74\xa9\x46\x33\x84\x48\xed\xa4\x0c\xff\x17\x71\x58\xa9\xc6\xb4\x9a\xfc\xd3\xba\x05\xbd\x62\x51\x4a\x3a\x91\xdb\xeb\xe0\xe5\x68\x6e\x2b\xfb\x7e\x6e\xff\x2e\x42\x4f\xff\x95\xb3\xea\xff\x3a\xfc\xdc\x5f\xed\x57\xbf\x02\x00\x00\xff\xff\xa9\xb8\x42\xf1\x51\x11\x00\x00")

func regoSharedParamsJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsJson,
		"rego-shared-params.json",
	)
}

func regoSharedParamsJson() (*asset, error) {
	bytes, err := regoSharedParamsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.json", size: 4433, mode: os.FileMode(420), modTime: time.Unix(1566593966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x4d\x6f\xe3\x36\x13\xbe\xe7\x57\x0c\xb4\xef\x31\x59\xbf\xa7\x1e\x72\x73\x9b\xa0\x0d\xd0\x6d\x03\xd7\x3d\x15\x0b\x63\x4c\x8e\x6c\x6e\x28\x51\x4b\x52\xc9\x1a\x0b\xff\xf7\x82\x94\x44\x49\xd6\x87\xa5\x6d\xd6\x45\x7a\x31\x2c\x92\x33\x7c\xf8\xcc\x17\x87\x5f\xaf\x00\x00\xa2\xff\x19\xb6\xa7\x04\xa3\x5b\x88\xf6\xd6\x66\xb7\x8b\xc5\x27\xa3\xd2\x9b\x62\xf4\xbd\xd2\xbb\x05\xd7\x18\xdb\x9b\xff\xff\xb0\x28\xc6\xde\x45\xd7\x85\xa4\x15\x56\x92\x93\xfb\x23\x23\x26\x62\xc1\xd0\x0a\x95\x56\xb3\x9c\x0c\xd3\x22\xf3\x43\xb7\x10\xad\x28\xd3\x64\x28\xb5\x06\x30\x05\xb5\xfd\x44\xcc\xc2\x8b\xb0\x7b\x40\x29\x41\xb8\x61\x6b\xb5\xd8\xe6\x96\xdc\x0a\x0e\x9a\xa4\xd7\x67\xc2\x76\x87\xcc\xef\x56\xc8\x56\xa3\xc8\xb9\x70\xcb\x50\x3e\x6a\x95\x91\xb6\x82\x4c\x74\x0b\x31\x4a\x43\xe5\x12\x4d\x9f\x73\xa1\x89\x47\xb7\xf0\x97\x1f\xf1\xa3\x89\xe2\x24\x23\xff\xfd\xb1\x5c\x98\x35\x35\x7c\xad\x97\xd6\xc8\x5a\xe3\x05\x7d\x9a\x62\x87\xea\xdd\x82\x53\x2c\x52\x8f\xc5\x2c\x1a\x12\x61\xf9\xf1\xba\xd6\x58\x1f\xae\xa3\xb0\x3a\x26\x6a\x8d\x87\xe8\xba\x3d\x79\x42\xea\xaf\xc2\x58\x50\x71\xcd\x15\x6c\xc9\xbe\x10\xa5\x60\xf7\x04\xba\xa2\x9c\x78\x45\xb8\x23\x56\xd9\x3d\x69\x50\x29\x99\xf7\xa7\xea\x85\xa5\xa4\x0b\x69\xe4\x9c\xd5\xc6\x51\x4b\xe0\xd8\x7b\xe6\x82\xf0\x89\x04\x36\xac\x73\xaa\x47\xa4\x9c\xbe\x4c\x37\x45\xb5\xfc\xaa\x8d\xee\x18\xdc\x34\x2c\x6d\x1b\x7d\x70\x9b\xe0\xf6\x0f\xe5\x8a\x71\x1b\xdd\xf9\xcf\x2d\x19\x6f\x93\x52\xab\x33\x9a\xfb\x34\x19\xb1\x8e\x15\xce\xbb\xf4\x34\x67\x19\xb1\xe6\x98\xdc\x19\xd9\x96\xbc\xb1\x5a\xa4\xbb\xa8\xb3\xe8\xf8\xed\xfe\x10\xe8\xfd\xe0\xe7\xc7\xc9\xfd\x45\x49\x6e\x60\x8b\x46\x30\x10\x69\xac\x74\xe2\xdd\xb1\xa2\xb7\x1b\x01\x1d\xb2\x7b\xb3\x4a\x98\x9d\x61\x8a\xde\x2c\x13\x66\x33\x64\x4f\xb8\xa3\x3e\xaa\x35\x19\xbb\x49\x31\x19\x9a\x54\xb9\x66\x34\xb8\x80\x52\x2b\xec\x61\x70\xba\xc9\x57\xcf\xf4\x4e\xab\x3c\x6b\x9b\xef\xe3\xc9\xb9\x06\x92\x62\x4d\x91\x14\x68\x06\x26\x3b\x10\x1a\x39\xab\x94\x03\xab\x6a\x33\x01\xfa\x88\x08\xb5\xe4\xd4\x5a\x41\xe7\x39\xff\x85\xf3\x3e\x0c\x53\xfc\x18\x3a\xbe\x0c\x6d\x2f\x0e\x9a\xf2\x8c\xa3\xa5\x61\x16\xc6\xf3\x27\xb2\x6e\x16\x1d\xda\x89\x93\xa4\x4b\xed\xd4\xb4\xdc\x34\xf3\xae\xf7\x04\x8d\xa1\xe9\x91\x18\x14\x9e\xcd\x2d\x67\xa2\x60\x2a\xd2\x9f\x30\x21\x79\xc3\xd0\x10\x87\x67\xd2\xa6\x85\xb6\x0c\xc9\xd7\x05\xf9\xc5\x52\xca\xe7\x47\xca\x16\x0d\xb5\xe3\x02\xec\x5e\x98\x93\xa1\x52\x3b\xbc\xa9\xa8\xe1\x8a\xe5\x09\xa5\x16\x67\xf9\xd8\x92\x3f\x63\xca\x88\x43\x4b\x1c\x62\xa5\x43\x51\x9d\x9e\x42\x66\x5b\xd0\xf4\xde\xdb\x86\xb0\xfe\x9e\xe1\xe7\x9c\xe0\x89\x0e\xf0\x8c\x32\x27\xc8\x50\x68\x77\x17\x40\x0b\x0c\x53\xd8\x12\xe4\xce\x03\xb7\x07\x60\x2a\xc9\x84\x24\xdd\xb9\x97\x75\x30\x97\xc5\x6a\x12\xe6\x1d\xd9\x4b\xe4\x8a\xaa\xc0\xcd\xc9\x13\x2e\xc2\xaa\x90\x2b\xe5\x2f\x94\x2f\x8a\xba\x37\x07\xab\x97\xa8\xd0\x61\x26\x5e\x15\x4e\xa6\xc5\xf3\x68\xf5\xe8\x01\xd4\x73\xbb\x17\x06\x4a\x4d\x67\xd1\x6d\x95\x92\x84\x13\x6d\xdb\xbe\x84\xcc\x01\x99\xc9\x5c\xa3\xbc\x4c\x7a\xad\xef\x51\x73\x10\xe6\xa9\x70\xf1\xe9\x5d\x31\x50\x2a\xd2\x9d\x07\xfa\x1d\x3c\x4f\x2b\x35\x12\x8f\xd3\xec\x8c\xcc\xb5\xcb\x45\x43\xe1\xf4\xcd\xcc\x78\xb3\x6c\xff\x8c\x52\xf0\x81\x5e\x75\x08\xf6\x6f\x65\x5c\x23\xb0\xdc\x58\x95\x40\xad\x04\x62\xad\x12\x0f\x7c\xd3\x1c\x14\x92\xdc\x45\x10\xb3\x4c\x1e\xdc\x9f\x9a\xfc\x37\x54\xcb\xc8\x22\xdb\xfb\x06\x60\x1a\x4d\x0f\x31\x58\x9d\xd3\xb5\x6b\x0a\x9d\xed\xca\x16\xb1\x2a\x03\x45\x8d\xf0\x95\xbe\x8e\xef\x6a\x93\x9a\x47\xcc\xc4\xb7\x1b\x7c\x42\x9b\x96\xa1\xc6\x84\x2c\xe9\x82\xc8\xcd\xe6\x71\xb9\x5a\x7e\xb8\x5f\xdf\xaf\x36\x9b\x5e\x81\x93\xd7\x92\xcd\x66\xb9\x5e\xaf\x1e\x7e\xfc\x73\x7d\x3f\x20\x10\x1e\x11\x86\x7b\xc1\x55\xb5\x64\xbc\x1d\x5c\x4a\xa9\x5e\x7c\x4b\xc1\x89\x49\xd4\x04\x18\xde\x46\xea\xa7\x91\x17\xd5\x0e\x98\xee\x3b\xc8\x85\x9a\xc2\x3a\x63\x9d\x76\x60\xf3\x5a\xb0\xf9\x99\x2f\x48\x14\x97\x0f\x34\x80\x20\x45\xfa\x54\xc5\x9e\x27\x2d\x24\x9c\xd7\xcc\x7f\x4c\xd3\x7f\xae\x4f\xba\xd0\x15\xeb\x3b\xb5\x98\x13\x72\xc0\x89\x8e\xf3\x71\x0a\x4b\x36\x21\x5c\x5b\xef\xc6\x45\xc1\x28\x76\x28\xfe\x57\xbb\xfe\x5b\xe1\xd9\x44\xfb\x8f\x9e\x48\x26\xf5\xd1\x5d\x0e\xef\x46\xdf\x6e\xfa\x08\xbd\xeb\x6b\xbc\xfb\x49\xec\x90\x39\x27\x88\xb9\xbb\x93\xb8\x8a\x35\x52\xec\xfa\xce\xe3\xa4\x44\x5f\x22\x1f\x3a\xd0\x9a\xa4\x34\x20\xda\x47\x29\xea\x60\x40\xf0\x9a\xb7\x9d\x9d\x54\x5b\x94\x9b\x93\x9a\x37\x7e\xbe\x9f\xbd\x0c\x3c\x06\x19\x58\x51\x4c\x9a\x52\xd6\x79\x1b\x1e\x3a\x66\x10\x70\xf9\xb7\xc0\x00\x35\x06\xf0\xe1\x4c\x1c\x44\xf1\xae\xdf\x80\xe7\x6f\x4e\x6f\xe7\x8a\x34\x85\xd7\xfe\x2c\xd6\x90\x9c\x9e\xc1\xae\x8a\xdf\xe3\xd5\xdf\x01\x00\x00\xff\xff\x83\xe3\xe0\xa0\xeb\x1a\x00\x00")

func regoSpecInBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecIn,
		"rego-spec.in",
	)
}

func regoSpecIn() (*asset, error) {
	bytes, err := regoSpecInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.in", size: 6891, mode: os.FileMode(420), modTime: time.Unix(1563338935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1c\x5d\x6f\xdc\x36\xf2\x3d\xbf\x62\xb0\x0d\x50\xe0\xce\x8e\x7b\x2f\x07\x34\x6f\xc1\x25\xb8\x0b\xd0\xf4\x82\xb4\xb8\x87\x06\xae\xc1\x95\x46\xbb\xac\x29\x92\x25\xa9\xb5\xf7\x8a\xfc\xf7\x03\x49\x51\x1f\xab\x95\x44\x69\xb5\xeb\xf8\x50\x3f\x24\xb6\x44\x0e\xe7\x9b\x33\xc3\xa1\xfe\x78\x01\x00\xb0\x7a\xa9\x93\x2d\xe6\x64\xf5\x1a\x56\x5b\x63\xe4\xeb\x9b\x9b\xdf\xb4\xe0\xd7\xfe\xe9\x2b\xa1\x36\x37\xa9\x22\x99\xb9\xfe\xee\xef\x37\xfe\xd9\x37\xab\x2b\x3f\xd3\x50\xc3\xd0\xce\xfb\x49\x62\x42\x33\x9a\x10\x43\x05\x0f\x6f\x53\xd4\x89\xa2\xd2\x3d\x7a\x0d\xab\x4f\x28\x15\x6a\xe4\x46\x03\xe1\x20\xd6\xbf\x61\x62\xe0\x81\x9a\x2d\x10\xc6\x80\xda\xc7\xc6\x28\xba\x2e\x0c\xda\x11\x29\x28\x64\x0e\x9e\xae\x96\xdb\x4b\xb7\x9a\x9f\x1b\x9e\x92\x34\xa5\x76\x18\x61\x1f\x95\x90\xa8\x0c\x45\xbd\x7a\x0d\x19\x61\x1a\xcb\x21\x0a\x7f\x2f\xa8\xc2\x74\xf5\x1a\x3e\xbb\x27\xee\x69\x2e\x52\x64\x2b\xf7\xf7\x6d\x39\x50\x36\x21\xfc\x51\x0f\xad\x31\x6b\x3d\xf7\xec\x53\x98\x59\xac\xbe\xb9\x49\x31\xa3\xdc\xe1\xa2\x6f\x1a\x33\xaa\xe1\x5f\xae\x6a\x88\x35\x71\x1d\x80\x81\x4c\xa2\x14\xd9\xaf\xae\xda\x2f\x0f\x98\xfa\x03\xd5\x06\x44\x56\xf3\x0a\xd6\x68\x1e\x10\x39\x98\x2d\x82\x0a\x2c\xc7\x34\x30\xdc\x32\x56\x98\x2d\x2a\x10\x1c\xf5\xab\x43\xf0\xd4\x60\xde\x45\x69\x80\xce\xb0\xf0\xaa\x35\xe1\xcb\x51\x9a\x3d\xc3\x23\x19\xd8\x90\xce\x21\x1c\xca\x53\x7c\x8c\x17\x45\x18\xfe\xa2\x8d\xdd\x97\x4a\x4d\xab\xa1\x6d\xa1\xf7\x2e\x53\xa9\xfd\xfb\x72\xc4\xb0\x8c\xde\xba\x3f\xd7\xa8\x9d\x4c\x4a\xa8\x56\x68\xf6\x4f\x2d\x31\xe9\x48\x61\x5c\xa5\xe3\x94\x65\x40\x9a\x43\xf3\x46\xe6\xb6\xe6\x6b\xa3\x28\xdf\xac\x3a\x83\xbe\xcc\xd7\x87\x8a\xbd\x1f\xdc\xfb\x61\xe6\xfe\x4b\xb0\x54\xc3\x9a\x68\x9a\x00\xe5\x99\x50\xb9\x53\xc7\xc0\xde\xae\x05\x74\x98\x7d\xd4\xab\x54\x6f\x27\x88\xe2\xa8\x97\xa9\xde\x4a\x92\xdc\x93\x0d\x1e\x63\xb5\x42\x6d\xee\x38\xc9\xfb\x5e\x8a\x42\x25\xd8\x3b\x00\xb9\xa1\x66\xdf\xfb\xba\xc9\xaf\x23\xaf\x37\x4a\x14\xb2\x2d\xbe\xdb\x03\xba\x7a\x9c\x62\xcd\x22\x46\x89\xee\x79\xd9\x41\xa1\xe1\xb3\xca\x79\x60\x44\x2d\x26\x20\xce\x22\xaa\xbd\xe4\x50\x5a\x15\xcc\x31\xfd\x85\x71\x1d\x86\x18\x3d\x86\x8e\x2e\x43\x5b\x8b\x2b\x48\x85\x4c\x89\xc1\x7e\x2e\x0c\xfb\x4f\x92\x74\xbd\x68\xdf\x4a\x29\x32\xbc\xd4\x4a\x4d\xc9\xc5\x89\xf7\xe7\x2d\x42\xe3\x51\xbc\x25\x56\x00\x47\x7d\xcb\x88\x15\xc4\x62\xfa\x0f\x92\x23\xbb\x4e\x88\xc6\x14\x76\xa8\x74\x0b\xdb\xd2\x24\x97\x45\xf2\xd1\x20\x4f\xa7\x5b\xca\x9a\x68\x6c\xdb\x05\x98\x2d\xd5\x07\x8f\x4a\xe8\xf0\xac\xac\x26\x15\x49\x91\x23\x37\x64\x92\x8e\xbd\x49\x77\x84\x27\x98\x42\x6b\x3a\x64\x42\x55\x9b\x6a\xbc\x0b\x99\x2c\x41\x7d\x34\x6e\xeb\xc3\xf5\xdf\x92\xfc\x5e\x20\xdc\xe3\x1e\x76\x84\x15\x08\x92\x50\x65\x63\x01\x62\x20\x21\x1c\xd6\x08\x85\xd5\xc0\xf5\x1e\x12\x91\x4b\xca\x50\x75\xe2\xb2\x0e\xce\xe5\x66\x15\x85\xf3\x06\xcd\x25\x7c\x45\xd8\xe0\xa6\xf8\x09\x6b\x61\xc1\xe4\xca\xf9\x17\xf2\x17\x7e\xdf\x9b\x82\xab\x9b\x11\xb0\x23\x92\x2e\x8a\x8e\x54\x74\x37\xb8\x7b\x1c\x41\xe8\x48\x74\x4f\x35\x94\x90\x46\xb1\x5b\x0b\xc1\x90\x44\xca\xb6\x1d\x84\x4c\x41\x52\xb2\x42\x11\x76\x19\xf7\x5a\xc7\x51\x53\x30\x2c\x38\xb5\xf6\xe9\x54\xb1\x62\x29\xe5\x1b\x87\xe8\x19\x34\x4f\x09\x31\x60\x8f\x71\x72\x26\x89\x4d\x97\x7d\x42\x61\xe1\x4d\xf4\x78\x93\x64\xbf\x23\x8c\xa6\x3d\xb9\x6a\x1f\xda\x3f\x96\x76\x4d\x20\x29\xb4\x11\x39\xd4\x40\x20\x53\x22\x77\x88\xdf\x35\x1f\x52\x86\x36\x10\x24\x52\xb2\xbd\xfd\xa5\x66\xfe\x33\xda\xcb\xd0\x90\x64\xeb\x12\x80\x38\x36\xbd\xcf\xc0\xa8\x02\xaf\x6c\x52\x68\x65\x57\xa6\x88\x61\x1b\xf0\x7b\x84\xdb\xe9\x6b\xfb\x0e\x8b\xd4\x7c\x24\x92\xce\x17\x78\x44\x9a\x26\x89\x22\x39\x1a\x54\x43\xa9\xf0\xc7\x30\x08\x7e\xc2\x4e\x12\xb5\x58\x8a\x35\x96\x8a\x34\x52\xb0\xbe\xbc\xb5\x83\xb0\x86\x4f\x7e\x56\xee\x6a\x53\xef\x1e\xad\xb5\xe9\x46\xdd\xa9\x03\xa3\x93\xdf\x67\x94\x23\x3c\xb8\x0d\x5d\xe4\x6b\xca\xcb\x52\x8c\xc8\xa0\xe6\x1d\x10\x65\x4d\xd9\xe3\x77\xb1\x00\x6d\x08\x4e\x24\xac\x49\xf0\x26\xc0\x84\x58\xe3\x0b\x3f\x5d\x23\x1c\x7e\x13\x67\xb4\xc8\x8d\xea\xd3\x27\x68\x69\x4c\x88\xc6\x6b\xcd\x89\x56\x10\x5f\x00\x72\xd6\xca\x42\xf6\xbb\x23\x94\x91\x35\xc3\x86\x8e\x9c\x5f\x2d\x3a\xda\x3f\xa4\x1b\x7d\x64\x10\xd0\x94\x6f\x9a\x98\x0f\x41\x19\x34\xfe\xd6\xc8\x78\x47\xd0\x9a\x36\x58\x77\x69\x8d\xec\xa9\x91\xf4\x12\x3d\x32\xd4\x51\xd6\x3b\xe4\x76\x00\xe5\x11\x3f\xd6\x45\x3a\xce\x98\xba\xce\xf8\xc7\x71\x8a\x61\x60\xff\xf6\x71\x79\x09\xac\x4f\x3b\xdb\x38\x4c\x31\xe8\x09\xa2\x98\xcb\x80\xb7\xd1\xe2\x3c\xb2\xe4\xea\x6d\xb7\x8e\xf1\x74\xec\x28\x61\xcd\xe3\xc3\xcf\x76\xf2\x74\x06\xd8\xf8\xd3\xae\xdb\xda\xcb\xe6\x50\x1e\x31\x03\x79\x91\x8f\xda\x70\x35\x3a\x1a\x2e\xf8\x5a\xbe\xc1\xcd\xa0\x9f\x6a\x0d\xcf\x98\x20\x43\xae\xaa\x35\x38\x04\x57\x91\xc3\x1d\x99\x91\x63\xd3\x42\x91\x48\xd5\x05\x2f\xf8\x7c\xc0\x23\x85\x9f\xdb\x93\xd4\x30\x2f\x98\xa1\x92\xcd\x57\xc5\x0f\x1e\x00\x4d\xa8\x19\x0b\x25\xa0\x37\xdc\xd2\x40\x0f\xec\x31\x14\x53\x5c\x19\x39\x20\x09\x96\x23\xbd\xfb\x6a\x1b\xd3\xb1\x58\xb9\xf9\x33\xc6\x24\xc2\x98\x78\xc0\xf4\x2e\xd9\x0a\x9a\x44\x78\x79\xe8\xe1\xd5\x47\xa1\xb5\x4d\x8d\xfe\x43\x58\xd1\x39\x68\x3a\x0a\xe4\x48\x8a\x11\x6c\x98\x6a\xb0\xca\x77\xe5\x62\x10\xed\x8e\x5d\x1d\x07\xed\x1a\x36\x10\xd9\x45\x2f\x32\x25\x1c\x84\x69\x21\x21\x4c\x75\x9b\x30\x18\x1a\x42\xd4\x3e\x93\x91\x82\x99\x3b\x47\xff\x09\x3b\x8d\x83\xe2\x45\x35\x4f\xaf\xdd\x7c\x5f\x24\x3c\xdc\x6d\xac\xba\x8b\x9c\x1a\x83\xe9\x04\x01\x7d\x0e\x12\x6a\x78\xa9\x86\x33\x84\x15\x2f\x18\xf3\xff\xe7\x6b\xff\x24\x84\x69\x15\xf3\x4f\xf3\x16\xf8\x48\x72\xc9\xf0\x44\xde\xbe\xf3\x50\x66\xf3\x36\xcc\x3f\xce\xdb\xaf\x8b\xa1\xa7\x67\x39\x11\x39\xfd\x50\x43\xc3\x70\xb6\xde\x73\x44\x51\x16\xf8\x30\x6d\x74\x71\x9c\x72\xae\x2d\x89\x31\xa8\xf8\xc7\x91\x84\xff\xd7\xdd\xe7\xef\xae\xbf\xbf\xfd\xeb\xcb\xf1\x93\xea\xc1\xdc\xa9\xef\x88\xb2\xee\x48\xa1\x1c\x88\x55\x19\x43\x93\x82\x11\x15\x08\x7e\x05\xef\x0d\x3c\x50\xc6\xa0\xd0\xe8\x5c\x6a\x63\x4e\x55\xa2\x91\x0a\x77\x54\x14\x3a\xcc\xf2\x0d\x2e\x24\x4d\x41\x28\x10\x3b\x54\x0f\x8a\x1a\x9f\x1f\x0a\xbb\xb7\xa5\x98\x30\x32\x54\x27\x98\x50\x02\x18\xcf\xbb\x06\x1b\x75\x2a\x72\xa6\x17\xe6\x61\xf9\xec\xcc\x8c\x87\xb1\x2d\x72\x66\x65\x67\x33\xf3\xd0\x29\x49\x5d\x1d\x1f\x90\x23\x65\xb5\x51\xb2\x9c\x94\x36\xf8\x28\x7d\x89\x90\x80\x77\x2d\x0d\x61\xe5\x85\x36\xb0\x15\x5c\x28\x30\xc2\x86\x45\xae\xd8\x7a\xe9\x94\xa5\x45\xe6\x5d\x8e\x5a\x0f\x9d\x10\x0d\x91\xfb\xc1\xcf\x05\x7c\x94\x8c\x50\x1e\xea\xf3\xca\x73\x21\xd8\x8b\xb3\xd2\x16\x6b\x9f\x8c\xe0\x09\x71\xdf\xe1\xe1\xa6\x87\x51\x86\x63\xee\x50\xb3\x63\x87\x36\x9c\x7b\x17\x97\x48\x5c\x3a\x58\x8b\x4c\x55\x4a\x07\x6f\x27\xfe\xfa\xf9\xcd\xf5\x2f\x7f\xbb\xfe\xfe\xf6\x33\xb9\xfe\xef\x9b\xeb\x5f\xac\x47\xff\xcb\xcb\x73\x47\x7d\xa4\x30\x62\x83\x1c\x15\x31\x03\x05\xe3\xd6\x94\x23\xc9\x71\x2d\x16\xaa\xa1\x05\x12\xd6\x7b\xa7\xa2\x6b\x92\xdc\x23\x9f\x64\x7a\x8b\xa4\x20\x89\x42\x97\x3b\xde\x09\xce\xf6\x0b\xd0\x67\xd3\x2b\x0b\xca\xe7\x58\x06\xd2\xc2\xb9\x1c\xb7\x0c\x82\x75\x7d\xb1\xa9\xea\xb2\x74\x86\xe8\x5d\xa8\x14\xd5\x6c\x3a\x5b\x91\x61\x4b\xa8\xee\x70\x9e\xd8\x3d\xd9\xc7\xe7\x6e\x1d\x4b\xf9\x3d\x46\x59\xd3\x59\x88\x9d\x10\x4e\x1f\x6d\xcf\x39\x92\x6a\x54\x44\x7f\x5d\xe1\xf0\x28\x43\xa4\xc2\x64\x39\x13\x6e\xc0\xbb\xbc\x6c\x27\x96\x3b\xe3\x1a\xaf\xe6\xc8\x75\x91\xbd\x10\x79\xa2\xf6\x72\xae\x64\xca\x53\x35\x7a\x68\x91\x5e\x67\xf5\x56\x14\x2c\xb5\xae\xa8\x5e\xe5\xd2\xf2\x9a\x91\xda\x0e\xa6\xa5\xa1\x7b\xe9\x79\x1a\x22\x3e\x4a\xa1\x97\xb2\x42\x59\xac\x19\x4d\xd8\x1e\x02\xd4\x19\xb2\x8d\xaa\x12\x38\x3f\x68\x67\x19\x55\x8c\x54\x4e\x47\x18\x50\x71\x60\xb8\x03\xe5\x60\xfd\xee\xa9\x8b\x0b\xe8\x5d\x42\xb9\xc6\x40\xbe\x0d\x6b\x1f\xa8\x72\x2a\x92\x13\xf3\x0a\xde\x67\x80\xb9\x34\x7b\xdf\xb5\x52\x6e\x52\x17\xb7\xef\xf1\x5e\xb8\x21\x6a\x97\xec\x8b\x3b\x4a\x63\x5f\x8f\xdc\x14\x1a\x33\xca\x0c\x2a\xb2\x8e\x2d\x77\x8f\x46\x50\x81\x2a\x6b\xec\x1e\xb8\x0d\x25\x64\xa1\xac\xa0\x27\xa5\x2b\x8b\xf8\xb0\x4c\x28\xa4\x1b\x7e\x67\x63\x99\x65\x42\x60\x28\x41\x3e\x49\x78\xb4\x41\x9b\x54\x2c\x40\x89\x33\xc0\x2d\xd9\x21\x10\xa8\x23\xfa\x12\xfc\xa5\xa9\xa2\x29\x72\x43\x33\xba\x08\x65\x8d\x88\x96\x40\x4e\x28\x87\x06\xf8\xf3\xb8\x59\xdf\x61\xf7\xbe\xcc\x2a\xad\xa7\x3d\xed\x00\x8a\x3c\xde\x31\xe4\x1b\xb3\x9d\xcd\x8e\x9c\x3c\xd2\xbc\xc8\xc1\x83\xe9\x86\xfd\x21\xc5\x8e\x3f\xbc\x0c\x6c\x09\x5b\xee\xc9\x14\x9e\x16\xe1\x07\x02\x7b\xd2\x9a\x40\x5f\xfc\xb1\xe8\xc2\x04\x52\x7e\xb2\x08\x29\xff\xaa\x45\x48\xf9\xa9\x22\x2c\x09\xfc\x4a\x45\x38\x3b\xca\x39\xec\xfb\x7e\xb2\xfc\x44\xe4\xd4\xdc\xb9\x30\x6a\x16\x1d\x55\xf3\xa6\x39\xb6\xc9\xa7\x4a\x48\x69\x23\xb7\x10\xa9\x09\x05\x3e\x06\xbf\xf0\xe6\xe1\xca\x15\x67\x0a\x60\xaa\x52\xc8\x93\xc5\x2f\x52\xd1\x9c\xa8\xfd\x72\xf1\x8b\xdf\x1b\xa1\x84\xfb\x24\x41\x8c\x42\x92\x2e\x55\xb4\xa3\x1a\x2c\x38\x57\xb8\x7b\x02\x42\x46\xba\x71\x27\xd2\x51\x42\xbb\x34\x19\x1a\x13\x35\x70\x85\x66\x12\x11\x1e\x96\x3b\xfd\xab\x4b\x18\x29\x12\x56\x5e\x85\x4f\x88\x9a\xe4\x07\x17\x22\xf0\xac\x51\xb3\x7e\x9a\xa8\x59\x1b\xb1\x98\xee\x95\xb0\xce\x5d\x85\x38\x39\x34\xd6\xc5\x3a\xbe\x4b\x70\x60\x5f\xce\x89\x94\xee\x88\x4d\x80\xa4\xc9\xbd\x73\xf6\x0f\xdb\xf2\xab\x02\xa1\x97\x48\xa3\xb1\x03\xbe\xc5\x47\x83\x8a\x13\xf6\xed\xc5\x1b\x22\x15\xe1\x9a\x22\x5f\xc8\x36\x6b\x70\x97\x56\xd5\x93\x64\x16\xda\x33\x4f\x89\xa3\xfe\xec\xce\x0c\xc3\xa7\x74\x67\x32\xaa\xa3\xd1\x18\xed\xc2\x68\x8d\x76\x7d\x9c\xb1\x18\x97\xe6\x17\x3b\x5e\x61\x36\x61\xe8\x0f\x13\x68\x54\x98\x7d\x20\xf2\xdc\xfd\xa7\x31\xf7\xd1\x5a\x13\xce\x72\x37\x6d\x96\xb5\x3d\x93\x76\xc9\xde\xb7\x4b\x76\xa0\x55\x1f\x8e\xe9\xbf\x53\xf6\x29\x0c\x19\x6e\x41\x73\xfd\x12\xee\x33\x12\x65\x1b\x08\x90\xea\x7b\x38\xf5\xe7\x70\x1e\x44\xfb\x92\x64\xb7\x3b\xed\x42\x1f\x02\xa9\x6f\xa9\xb6\xde\xdd\x5e\xbd\x68\x43\x19\xbf\xeb\x36\xf5\xb6\x6b\x35\xa3\x51\x01\x64\x94\xdf\x07\x9d\x76\x4c\xab\xba\xba\x96\xbc\xf3\xea\x9b\x04\xfe\xbf\xbe\x8d\x71\xa1\x6b\xf5\x67\xfa\xac\xc8\x04\x0b\x2d\x61\x8c\xdb\x29\xbc\x49\x22\xcc\xb5\xf5\xad\x30\xef\x88\xfd\x0a\xfe\xf7\xb0\xea\x53\x99\x67\x6f\xf7\xe0\xd4\xcf\xe2\x44\x7d\x3b\xa5\xcb\xc3\xf1\x0b\x4b\x11\x97\x94\xfa\x98\xd8\x61\xe6\x14\x23\x8e\x68\xb5\x38\x4a\x8f\x9d\x45\x87\x7a\x83\x3a\x51\x2d\x32\x56\xdd\xef\xa8\x3c\x79\x4c\x73\xc6\xbc\x1b\xee\x1b\x26\xd6\x84\xdd\x0d\xdc\x73\xee\xd2\xf7\x4f\x37\x07\x5a\xb7\x88\x33\x54\xc8\x93\xde\x2a\x58\xb7\x83\xb3\x9c\x60\xfd\xaf\xc7\xa1\x79\x5f\xd8\x99\xb3\x3f\xfb\x75\x11\x49\xe3\x95\x8d\x48\x9e\xcf\xb5\xf8\x18\xbe\x1e\xf7\x62\x8d\x99\xf1\x1e\xec\x85\xff\xf7\xcb\x8b\xff\x05\x00\x00\xff\xff\x8d\x12\x4e\xa7\xdf\x50\x00\x00")

func regoSpecJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecJson,
		"rego-spec.json",
	)
}

func regoSpecJson() (*asset, error) {
	bytes, err := regoSpecJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.json", size: 20703, mode: os.FileMode(420), modTime: time.Unix(1566593966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoTypeMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\x9b\x40\x10\xc6\xef\x7e\x8a\x11\xa9\x54\xa9\x6a\x4c\x4f\x3d\xf8\x5e\xa9\x97\x4a\x3d\xf4\x56\xf5\x30\x66\x07\x98\x64\xd9\xdd\xce\x0e\x49\x69\xc5\xbb\x57\x0b\x36\x0e\x98\xd8\x91\xa2\xf8\x04\xf3\x87\x99\xfd\x7d\x9f\xf7\xdf\x06\x00\x20\x7b\x17\x8b\x9a\x1a\xcc\x76\x90\xd5\xaa\x61\x97\xe7\x77\xd1\xbb\xdb\x31\xba\xf5\x52\xe5\x46\xb0\xd4\xdb\x4f\x9f\xf3\x31\x76\x93\x7d\x1c\x3b\x95\xd5\x52\xea\xfb\xd1\x05\x82\x6f\x18\x02\xbb\x2a\x1e\xb3\x86\x62\x21\x1c\x94\xbd\x1b\x6a\x6a\x8e\x50\xb2\x25\xe0\x08\x6d\x24\x03\xea\xa1\xc1\x00\xf4\x47\x49\x1c\x5a\xd0\x2e\x50\x4c\x51\x8b\xae\x6a\xb1\x22\x88\x81\x0a\x2e\xb9\x88\xdb\x69\x64\x17\x86\x89\x7e\x7f\x47\x85\x1e\xa3\x68\x0c\xa7\x39\x68\xbf\x8b\x0f\x24\xca\x14\xb3\x1d\x94\x68\x23\x1d\x4a\x02\x6a\x1a\x33\xcb\x8f\x00\x86\xf4\xf6\xc3\xec\x7d\x04\x23\x54\xa6\x59\x37\xb9\xa1\x92\xdd\x30\x21\xe6\xc3\x06\x53\x61\x3f\x3c\xf5\xd3\x91\xa7\xba\xf9\xe7\x0f\x6b\x2f\x06\xcc\xf8\x1d\xce\x32\x25\xd7\xf0\xdd\x53\xf7\x94\x9e\x0a\xba\x68\x31\x95\x00\xba\x39\xc8\xf7\x11\x62\xbb\x4f\x4f\x50\x8a\x6f\x00\x27\x98\x43\xfd\x76\x39\x6e\x15\xec\x94\xbd\x0e\x78\x2a\xbd\x0c\xfa\x12\xf0\x2b\xe0\x9b\xd1\x5f\xd9\x59\x4f\xbf\x59\x7f\xeb\x4f\x9b\x65\xc7\xe6\xe7\x35\x38\xd8\xf7\xaa\x0c\x04\x05\x2a\x55\x5e\x4e\x52\xec\x3b\xa8\xc8\x91\xa0\x7a\x89\xc0\x0e\xbc\x18\x92\xa7\x0a\xd1\xd2\xe5\xec\x52\xb6\x26\x16\xf0\x8f\x0e\xb8\x09\x96\x1a\x72\xfa\xc6\xe2\x08\xfd\x6e\x59\xc8\x64\x3b\xf8\x79\xae\xc9\xdc\xda\xe9\xf7\x6b\x29\xee\x15\x55\x57\x7d\x7e\x89\xe5\x04\xc8\x0c\x60\x96\x27\x3f\x23\x10\x55\xd6\x3d\x70\xde\x97\x25\xe7\xbc\x78\x99\xaf\xfe\x31\x09\x36\xb8\x0d\x2d\xff\xa5\xa4\xce\x1b\xec\xd4\x04\x2f\x2f\xdf\xea\xcb\x03\x39\x6d\xd1\xc2\x49\x63\x18\x3f\x01\x5e\x20\x60\x71\x9f\xae\x49\xad\x51\x21\x88\x7f\x60\x93\x2e\xd0\x57\xef\xfd\xdc\xff\x69\xbc\xeb\x36\xfd\xe6\x7f\x00\x00\x00\xff\xff\x9a\x8a\x83\x1c\x3a\x06\x00\x00")

func regoTypeMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoTypeMappingJson,
		"rego-type-mapping.json",
	)
}

func regoTypeMappingJson() (*asset, error) {
	bytes, err := regoTypeMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-type-mapping.json", size: 1594, mode: os.FileMode(420), modTime: time.Unix(1563338935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoValidationMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x8e\xd3\x30\x10\xc6\xef\x7d\x8a\x51\x16\x09\x09\xed\x36\x9c\x38\xf4\xce\x11\xc4\x61\xc5\x05\x71\x98\xc6\xe3\xd4\xbb\xfe\xc7\x78\x52\xa8\x50\xde\x1d\x39\x69\x9d\x4d\xda\x6e\x11\x12\xa7\x3a\xfe\x66\x3c\xe3\xdf\x37\xf5\xef\x15\x00\x40\xf5\x26\x35\x3b\x72\x58\x6d\xa0\xda\x89\xc4\x4d\x5d\x3f\xa5\xe0\x1f\xc6\xdd\x75\xe0\xb6\x56\x8c\x5a\x1e\xde\x7f\xa8\xc7\xbd\xbb\xea\x7e\xcc\x14\x23\x96\x72\xde\x57\xb4\x46\xa1\x98\xe0\xe1\x13\xc6\x68\x7c\x7b\x0a\x51\x94\x1a\x36\x31\x4b\x39\xf0\x71\x67\x12\x68\x63\x09\x4c\x82\x2e\x91\x02\x09\xe0\x30\xc2\x7e\x3a\x41\x77\xbe\xc9\x8b\x94\x35\x8b\xbe\xed\xb0\x25\x48\x91\x1a\xa3\x4d\x93\xd6\xa5\xfa\x21\x0e\xc5\xc3\xf6\x89\x1a\x39\xed\xa2\x52\x26\x67\xa3\xfd\xc2\x21\x12\x8b\xa1\x54\x6d\x40\xa3\x4d\x74\x0c\x89\x28\x42\xec\x67\xfa\xc8\x62\x90\xd7\xef\x66\xdf\x23\x23\x26\x9d\x6b\xdd\xd5\x8a\xb4\xf1\x43\x85\x54\x0f\x1d\x94\xc0\x7e\x58\xf5\xe5\xe2\x25\x6e\x7e\xfc\xb1\xed\x45\x81\x82\xf2\x31\xcb\xf7\x73\xf1\x12\xc4\x67\x3a\xbc\x64\x28\x8c\x3e\xd9\x11\x20\x7a\xa0\x5f\xf9\x86\x68\x21\x57\x7b\x9b\x20\x75\xdb\xbc\x02\xcd\xc1\x01\x16\x98\x43\xfc\x7a\x59\xee\x22\xd8\xa2\xde\x06\x5c\x42\x5f\x07\xfd\x1a\xf0\x1b\xe0\xdd\x71\xc8\xce\x72\xfa\xd5\xe5\xaf\x7e\xea\xac\x3a\x25\x5f\xf7\x60\x3e\xc3\xd7\x6d\x20\x68\x50\xa8\x0d\x3c\x59\xb1\x3d\x40\x4b\x9e\x18\x25\x70\x02\xe3\x21\xb0\x22\x7e\xe9\x10\xcd\xcd\xc9\x41\x59\xdd\x91\x61\x08\x3f\x3d\x18\x17\x2d\x39\xf2\xf2\x9f\xcd\x61\xfa\xd1\x19\x26\x55\x6d\xe0\xdb\xb9\x27\x1e\x1d\xcd\xf1\x7e\x5f\x9a\x7b\xc3\xd5\xe1\x84\xab\xbe\x2e\x58\x7e\x46\x47\x10\x74\xc6\x50\xfe\xff\x19\x5a\x83\xd6\xe6\xdf\x48\xac\x03\xbb\x41\x9f\x9e\x8a\x25\x9c\x33\x48\x49\xf8\xf2\x98\x9c\xe7\x55\xc6\xc5\xc0\xf2\xd7\x1d\x7f\xdc\x93\x97\x0e\x2d\x4c\xc8\x61\x3c\x02\x02\x43\xc4\xe6\x39\xbf\x5a\xb2\x43\x81\xc8\x61\x6f\x14\xa5\x45\xf7\xe5\xa2\xff\x7e\x8d\x6b\xd3\x3e\xbe\x44\xab\x7e\xf5\x27\x00\x00\xff\xff\x75\x74\x59\xb0\xe3\x05\x00\x00")

func regoValidationMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoValidationMappingJson,
		"rego-validation-mapping.json",
	)
}

func regoValidationMappingJson() (*asset, error) {
	bytes, err := regoValidationMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-validation-mapping.json", size: 1507, mode: os.FileMode(420), modTime: time.Unix(1563338935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen.sh": genSh,
	"rego-abstract.in": regoAbstractIn,
	"rego-abstract.json": regoAbstractJson,
	"rego-attribute.in": regoAttributeIn,
	"rego-info.json": regoInfoJson,
	"rego-param.in": regoParamIn,
	"rego-shared-params.in": regoSharedParamsIn,
	"rego-shared-params.json": regoSharedParamsJson,
	"rego-spec.in": regoSpecIn,
	"rego-spec.json": regoSpecJson,
	"rego-type-mapping.json": regoTypeMappingJson,
	"rego-validation-mapping.json": regoValidationMappingJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gen.sh": &bintree{genSh, map[string]*bintree{}},
	"rego-abstract.in": &bintree{regoAbstractIn, map[string]*bintree{}},
	"rego-abstract.json": &bintree{regoAbstractJson, map[string]*bintree{}},
	"rego-attribute.in": &bintree{regoAttributeIn, map[string]*bintree{}},
	"rego-info.json": &bintree{regoInfoJson, map[string]*bintree{}},
	"rego-param.in": &bintree{regoParamIn, map[string]*bintree{}},
	"rego-shared-params.in": &bintree{regoSharedParamsIn, map[string]*bintree{}},
	"rego-shared-params.json": &bintree{regoSharedParamsJson, map[string]*bintree{}},
	"rego-spec.in": &bintree{regoSpecIn, map[string]*bintree{}},
	"rego-spec.json": &bintree{regoSpecJson, map[string]*bintree{}},
	"rego-type-mapping.json": &bintree{regoTypeMappingJson, map[string]*bintree{}},
	"rego-validation-mapping.json": &bintree{regoValidationMappingJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

