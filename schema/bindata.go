// Code generated by go-bindata.
// sources:
// gen.sh
// rego-abstract.in
// rego-abstract.json
// rego-attribute.in
// rego-info.json
// rego-spec.in
// rego-spec.json
// rego-type-mapping.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xcf\x31\x0a\x02\x31\x10\x85\xe1\x3e\xa7\x18\x57\x21\x5a\x24\x39\x80\x20\x28\x58\xd8\xca\x5a\x87\x49\x8c\xd9\xa8\x9b\x84\xcc\x78\x7f\x71\xd9\x42\x6c\x2d\xdf\x5f\x7c\xf0\x96\x0b\xe3\x52\x36\x0e\x69\x10\xa2\x86\xf6\x04\x55\x03\x48\x32\xd6\xee\xfb\xfe\x7c\x3a\x5c\xfa\xa3\xb5\x46\x76\xab\xb5\x47\x86\x16\x62\x51\xc8\xdc\x92\x7b\x71\xd0\x29\x6f\x3a\x69\xa2\x9c\xbb\x23\x6e\xe8\x59\xa7\x0c\xbb\x9f\x74\xa7\x92\xff\xf5\xa9\x06\xff\x65\x4f\x73\x72\x45\x1b\x41\xdd\x40\x7f\xae\x5c\x91\x51\xc7\xb2\x15\xb1\xa8\x79\x82\xaa\x8f\x08\xe4\x87\x30\x22\x68\xf1\x0e\x00\x00\xff\xff\x19\x53\xac\x2b\xf3\x00\x00\x00")

func genShBytes() ([]byte, error) {
	return bindataRead(
		_genSh,
		"gen.sh",
	)
}

func genSh() (*asset, error) {
	bytes, err := genShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.sh", size: 243, mode: os.FileMode(493), modTime: time.Unix(1521698190, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x51\xbd\x6e\xe3\x30\x0c\xde\xfd\x14\x84\x73\x63\x72\xbe\xe9\x86\x6c\x39\xe0\x86\x02\x1d\x8a\x22\x9d\x0d\x5a\xa2\x6a\x05\x8a\x24\x90\x0c\x8a\xa0\xc8\xbb\x17\xb6\x52\x35\x4e\xd1\x4d\x20\xbf\x5f\xf1\xbd\x01\x00\x68\x7f\x89\x19\xe9\x88\xed\x16\xda\x51\x35\x6f\xbb\xee\x20\x29\x6e\xca\xf4\x77\xe2\xd7\xce\x32\x3a\xdd\xfc\xf9\xdb\x95\xd9\xaa\x5d\x17\xa6\x7a\x0d\x34\xf1\x76\x83\x28\xa3\xd1\xcf\x85\x25\x31\xec\xb3\xfa\x14\xe7\x75\x04\xbc\x22\x00\x43\x48\x6f\x02\x9a\xc0\x92\x09\xc8\x04\x08\x42\x0a\xc9\xc1\x80\x42\x80\xaa\xec\x87\x93\x92\x00\x46\xdb\x25\x06\xa6\x80\x93\x92\x80\x8e\xa8\x60\x30\xc2\x40\xc0\x74\x12\xb2\xe0\xa3\x26\x48\x3a\x12\x83\x64\x32\xde\x79\x53\xc0\x35\xe3\x39\xcf\x11\xd3\x70\xa0\xaf\x80\x68\xad\x9f\x60\x18\x9e\x38\x65\x62\xf5\x24\xed\x16\x1c\x06\xa1\x75\x53\x30\xf9\x76\x53\xfe\xaa\x70\x6b\xc2\xc5\x7c\xe1\x86\xcc\x78\xbe\x9a\xd5\xe5\xdd\xaf\x3c\x7a\x99\x6b\xdf\x34\x4e\x0e\x74\x9c\xba\x65\x26\xa1\xa8\x64\x61\x91\xbb\x4a\x79\xa5\xe3\x77\xfb\x72\x4e\x26\x37\xc9\xaf\x3a\x4b\xce\xc7\xb9\xa6\x74\xd5\xa4\x5d\x30\x2e\xcd\xf2\x75\xa9\x07\xac\xd4\x1f\xca\xcf\xe3\xbe\xdf\xed\xf7\xcf\x0f\xff\x5e\xf6\xff\xfb\xfe\x5e\xaa\xb9\x34\x1f\x01\x00\x00\xff\xff\x4d\x1e\x3d\x56\x62\x02\x00\x00")

func regoAbstractInBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractIn,
		"rego-abstract.in",
	)
}

func regoAbstractIn() (*asset, error) {
	bytes, err := regoAbstractInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.in", size: 610, mode: os.FileMode(420), modTime: time.Unix(1521698042, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x59\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\x38\xb8\x05\x0a\x0c\xf5\xdc\x01\x43\x81\xe6\x2d\x0f\x7b\x28\xb0\x87\x62\xd8\x53\x83\x2c\x38\x89\x27\x8b\x2d\x45\xaa\x47\xaa\xb1\x37\xe4\xbb\x0f\x24\xf5\xc7\x4a\x64\x59\xb2\x55\x34\x2f\x51\xc8\xbb\xe3\xef\x7e\xbc\x3b\x1e\x99\xff\x56\x00\x00\xeb\xd7\x36\xcd\xa9\xc0\xf5\x0d\xac\x73\xe7\xca\x9b\xed\xf6\x8b\x35\x7a\x13\x47\x7f\x35\xbc\xdb\x0a\xc6\xcc\x6d\xde\xbd\xdf\xc6\xb1\x57\xeb\xb7\x51\xd3\x49\xa7\xc8\xeb\xdd\x26\xd6\x31\xa6\xae\x99\x10\x64\x53\x96\xa5\x93\x46\x87\x69\x0d\x58\x4b\x00\x2a\x65\x1e\x2d\x38\x03\x82\x52\x85\x4c\x80\x60\xc9\x81\xc9\x20\x41\x4b\x80\xce\xb1\x4c\x2a\x47\x16\x50\x8b\xad\x61\x60\x52\xe8\x2d\x59\x70\x39\x3a\x48\x51\x43\x42\xc0\x54\x59\x12\x20\xb5\x33\x60\x5c\x4e\x0c\xb6\xa4\x54\x66\x32\x8d\xc2\x2d\xc6\x43\x19\x20\x9a\xe4\x0b\x75\x00\x51\x08\xe9\xc5\x50\x7d\x62\x53\x12\x3b\x49\x76\x7d\x03\x19\x2a\x4b\x6f\x57\x51\xa6\x3c\x9e\x89\x5c\x45\xdd\x16\x61\x6f\xbc\xb7\x1a\x32\xe3\xa1\x5e\xac\x9d\x7c\xc6\xca\x9f\xd2\x06\xb7\x8f\x3c\x36\x19\xb8\xdc\xfb\x56\x32\x59\xd2\x8e\x04\xf4\x70\xb7\xa6\xa4\xa3\xe2\xe5\xf2\x71\x3b\x99\x32\x6f\xfe\xd5\x56\x50\x26\x75\x70\xd3\x6e\xdb\x45\xd6\x3d\x8d\xa7\x55\xff\xeb\xa9\xdd\xc0\x56\xf5\x84\xf3\x03\xbe\xb7\xd1\xd0\xca\x8c\x13\xe0\xc3\xa2\x11\x0d\x44\xf4\xb7\xf0\xb9\xf6\xe0\x4e\x76\xc0\x46\x77\xb4\x27\xca\xf4\xad\x92\x4c\x62\x7d\x03\x77\x2f\xf9\xd3\x58\x3c\x07\xde\x2d\x3f\x30\x7e\xec\x54\x6f\xf6\xbe\x0e\xa4\x56\xf2\x44\x40\x75\x2e\xf8\xd4\x20\xf1\x90\xe6\xc8\xc3\x22\x43\x2c\xfe\x45\x3b\xda\x97\x31\x37\x10\xac\x63\xa9\x77\x47\xbc\x16\x95\x75\x90\x1b\x6d\xd8\xe7\x5c\x42\xf0\x1d\x95\x14\x03\x8e\xf4\x38\x8e\x66\xd6\x2f\x84\x9e\x06\x08\xe8\x60\x1b\x99\x9e\xf0\x6d\x08\xf8\x6d\xd4\xf3\x80\x2a\xb2\x90\x19\x06\x7c\x16\x11\x1e\x0e\xfc\xa1\xab\xe2\x1c\xde\xa1\x7c\x6b\x85\x4e\x27\xcb\x29\xbf\x87\x0d\x05\xc9\x12\x9d\x23\x0e\x0e\xfc\x73\x77\xbb\xf9\xfc\xdb\xe6\xc3\xfd\x1d\x6e\xfe\xbd\xdd\x7c\x7e\xb7\xf9\x70\xff\xcb\xeb\x97\xa4\x41\x2f\xd1\xda\x91\x21\x2a\x2b\x67\x76\xa4\x89\xd1\x85\xf0\x9c\x46\xe4\xdf\xf9\x51\xd9\x04\x69\xa1\x67\x06\x92\x43\x28\x2a\x09\xa6\x5f\x49\x9f\xdd\xf9\xc4\x18\x45\xa8\xa7\x6d\x7d\xca\x14\x52\xf5\xc1\x68\x75\xb8\x10\xaf\xaf\xe7\x5e\xdd\xc7\xa6\x3f\x08\x44\x15\x22\x38\x98\x26\xf0\x19\x33\x54\x0d\xae\xc3\x2d\x28\xc3\x4a\xb9\x07\xc3\x82\x78\x16\xee\x10\xac\x4d\x9d\xee\x91\x1e\x8e\x23\xb4\x50\xdb\x86\x60\xdb\x7b\xf2\x95\x4e\x46\xe6\x55\xe0\x03\x94\x59\xe0\x1b\x68\xc3\x4e\x9c\x01\x79\xd7\x24\x59\x07\xf7\x2d\xac\xa5\x76\xb4\x23\xf6\x9f\xba\x52\x2a\xfe\x2e\x92\x38\xd2\x54\xea\x36\xaf\xee\x27\x3a\x58\x32\xa5\xd7\xa5\xc0\x91\x8d\x65\xb9\x3f\x5e\x76\x0e\xf3\xed\xd0\x5c\xde\x67\xd5\x62\xda\x97\xc6\x5e\xc3\x5b\x59\x25\x4a\xa6\xea\x00\x8d\xa5\x89\xec\x9d\x10\xab\x23\xce\x4b\x3a\xae\x68\x9a\x13\x99\x54\x8e\x18\x13\x35\x2f\xba\xfb\x25\x25\xa1\x98\x91\xfe\x58\x89\x06\x7d\x2e\x96\x15\x7b\xb7\xec\xa2\x41\x91\x19\x26\xb9\xd3\x0f\x3e\xd1\x2f\xaf\xd9\x50\x9b\x59\xbc\x5e\x64\x86\x0b\x74\xb3\x90\x45\x95\xc9\x91\x4a\xfe\x84\x1e\x6a\xa6\x3a\x0c\x4c\xa7\xb4\xa3\x85\x02\xa5\x1a\x3d\x76\x73\xa3\x47\x2d\x7c\xfc\xf4\xfd\xf7\x33\xf3\xef\xc7\xe6\x53\x29\x78\x6c\x5e\xe0\xf3\xde\xb9\xf9\x99\x56\xd4\x76\xe4\xfb\x86\x0b\xe3\xe3\x51\x2a\x05\x39\x7e\xf7\x97\xa5\xee\x60\xaf\x4d\x2e\x19\x2b\x52\x90\x76\x32\x93\x17\x23\x3d\x3a\x08\x11\x0a\x94\x1a\x8e\x4c\x5e\x57\x4b\x2a\x2d\xbf\x55\xf4\xb1\x6e\xe6\x7c\x39\x99\xe6\x92\x16\xb4\x5f\xc0\x1b\x0d\xd1\xd2\x92\x74\x17\xb8\x7f\x50\xa4\x77\x2e\x9f\x05\xb0\xc0\xbd\x2c\xaa\x02\xa2\xea\xcb\x6e\xa4\xe9\x9c\x47\xbb\xd9\x16\x71\x73\x84\x4f\x46\x3c\xbf\xf1\x68\x00\x9f\xe8\x9e\x1a\xbc\x6d\x33\xb1\x24\x60\xa9\x2f\xa2\x58\xea\x9f\x46\xb1\xd4\x97\x50\x5c\x03\xfe\x09\x14\x87\x1b\xf3\x1c\xac\x5e\xe1\x87\xb6\x41\xa1\xf7\x5e\xb0\x81\x68\x7b\xf9\x1f\xd2\x3f\x94\x2c\x0b\xe4\xc3\x75\xfd\x43\xac\x53\x50\xdb\x5a\xbc\x89\x60\x42\x71\xcd\x2d\x4f\x5a\xf0\x26\xc2\x4d\x6f\x61\x60\xed\x63\xce\xc5\xb8\x6a\x0b\x4b\xc2\xb2\x94\x32\xcd\x6b\xba\x7a\xa0\xa2\x3e\xa0\x16\x60\x73\x53\x29\xe1\xe3\x51\x10\x2a\x07\x8f\xd2\xe5\x90\x22\x9f\xcd\x98\x99\x80\x17\xef\x4f\xec\xf2\xfd\x89\x75\xe6\xaa\xbd\xae\xf5\x97\xba\xd4\x4c\x6e\x42\x6c\x95\xd4\xc6\xe7\x57\xc9\x02\xcb\xd2\xd7\x1e\x67\xa0\x94\xe9\xd7\x50\x90\x1e\x73\xd2\xa1\x7c\xc6\xa2\x6e\xc3\xcb\x89\x33\xf0\x86\xf6\x8e\x58\xa3\x7a\xb3\x64\x39\x75\x8c\xda\x4a\xd2\x57\xc4\x73\x67\x62\xc9\x70\x98\xcd\x69\xa0\xeb\xf8\xcd\x7d\x22\x4d\x17\x5f\x7c\xce\x3f\x28\x8e\x9f\xc8\x41\x24\x53\x06\x4f\x11\x17\x04\xc6\x03\xb6\x83\x3a\x32\xaf\xa4\x1d\x5d\x62\xf0\xd5\xbd\x27\xe1\xe4\xe0\xc3\x79\x87\xa0\x0e\xcd\xc9\xb7\xa8\xd5\xf0\x5f\xf5\x7f\x2a\x56\x4f\xab\xff\x03\x00\x00\xff\xff\x68\x15\x24\x6c\xc1\x1a\x00\x00")

func regoAbstractJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractJson,
		"rego-abstract.json",
	)
}

func regoAbstractJson() (*asset, error) {
	bytes, err := regoAbstractJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.json", size: 6849, mode: os.FileMode(420), modTime: time.Unix(1521706104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAttributeIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x0c\x8c\x02\x0b\x14\x31\xd0\x02\x45\x81\xcd\x2d\x87\x1e\xf6\xb6\x28\x7a\xda\x34\x35\x46\xe2\xc8\x9a\x86\x22\xb5\xe4\x30\xb1\x5b\xf4\xbf\x17\xa4\xe4\x0f\x39\xb2\x2d\x59\x5a\xac\x2f\xbb\x11\x87\x4f\x6f\x9e\x86\xc3\x47\xc2\xd1\x6f\x21\x2c\x9a\x16\x0f\xb0\x78\x14\x71\x9c\x05\xa1\xc5\xfd\x5d\x27\x42\x91\xcf\x1d\xd7\xc2\xd6\xa4\x38\x03\xb8\x0b\x05\x5b\x00\x82\xaf\x29\xe7\x82\x73\x4c\x21\x27\xb3\x65\x5b\x27\x78\x9b\xfd\x4d\xb9\x9c\x8e\xa2\x52\x1c\x67\xa1\xfe\xec\x6c\x4d\x4e\x98\xfc\xe2\x01\x0a\xd4\x9e\x4e\x42\x1d\x7d\x0d\xec\x48\x2d\x1e\xe0\xa9\x33\x92\x46\x0d\x56\xa7\xc4\x0f\xaf\xef\x79\x7e\x9c\x54\x67\xf4\xf9\xfe\xae\xfb\xde\xfa\x98\xd8\xbf\xef\x91\x50\x6b\xfb\x46\x6a\x95\x97\xe8\xfa\x43\xfa\x54\xfc\x9d\xd6\xb4\xa9\x41\x4a\x94\xa8\xa0\x38\x36\xeb\x23\x5d\xab\xe0\x05\x4a\x6b\xac\x03\xb1\x90\x11\xbc\xa2\x66\xd5\x93\x48\x47\xe3\x06\x66\xf1\x2e\xe8\xbf\x1e\x01\x0e\xb4\x2d\xe7\x67\x72\xeb\x23\xfe\xd8\xcc\x8b\x84\x02\x79\x28\xac\x03\x3c\xa9\x88\x48\x07\x7e\x33\xa1\xba\xc6\x17\x9d\xc3\xed\xb9\x20\x16\xaa\xce\xd3\xea\xcb\xbb\x1f\x28\x45\xd6\x28\x42\x2e\x25\xf0\xd7\xd3\xe3\xf2\xcb\xcf\xcb\x8f\xcf\x4f\xb8\xfc\xe7\x71\xf9\xe5\xa7\xe5\xc7\xe7\x1f\xff\xfc\xe1\xbd\x6a\x49\xb9\x61\x5a\x06\xb1\x6b\x32\xe4\x50\x52\x7d\x0e\x53\xf2\x8f\x92\x8e\x74\x63\x0f\x1d\x18\xc8\xb6\x20\x25\x41\x86\xf9\x0b\x99\xab\x9f\x3e\xb3\x56\x13\x9a\x61\xdf\x3e\x77\x94\xd6\xea\xca\x1a\xbd\xbd\x91\x6f\x8e\x06\xe2\xf4\x58\x9c\x9e\x04\x54\x48\x25\x9c\xa0\x09\xe2\x92\xe9\x6b\x07\xd3\x78\x2b\x2a\x30\x68\x59\x59\xa7\xc8\x8d\xe2\x9d\xaa\x35\xd5\xe6\xa9\xe8\xc1\x93\x02\xf4\xd0\x62\x43\xc2\x8e\x99\xbc\xd0\xd9\xd2\x9c\x44\x3e\x51\x19\x45\x7e\x47\xad\x3f\x89\x2b\x24\x9f\x76\xab\xec\x40\xf7\x1e\x16\x6c\x84\xd6\xe4\xe2\x7f\x4d\xd0\xba\xf9\xb7\xca\x9a\x27\xbb\x56\xbd\x5f\x58\xcf\x03\x13\xac\x1d\xe5\xd3\x96\xc0\x11\xc6\xbc\xda\x1f\xbf\x76\x8c\xf2\xfb\x47\x63\x75\x1f\xd5\x8c\x69\x53\x5b\x3f\x45\xb7\x3a\x64\x9a\x73\xbd\x85\x1d\xd2\x40\xf5\xce\x84\xb5\x15\x17\x23\xc5\x05\x1a\x96\x44\xc1\x5a\xc8\x61\xa6\xc7\x55\x77\xb7\xa5\x64\xd4\xac\xc8\xb8\xaf\x34\x80\x71\x2d\xd6\xc1\xc5\xb4\xfc\xac\x45\x51\x58\x47\xbc\x36\xab\xb8\xd0\x6f\xef\xd9\xd0\xc2\xcc\xde\x2f\x0a\xeb\x2a\x94\x51\xcc\x9a\x29\x83\x2b\x95\xe2\x16\xdd\xe7\xa6\x0e\x1c\x1c\x9d\x9b\xdd\x20\x54\xc8\xfa\xe2\xbe\x5b\x5a\x73\x11\xe1\xd3\xe7\xd7\x5f\xae\x8c\xff\x7a\x69\x3c\x67\xe5\x2e\x8d\x2b\x94\x9e\xf2\x8d\xbf\x61\x4d\x6d\x4d\xd1\x38\xdc\x58\x1f\x6f\xac\x35\x94\xf8\x4a\x80\x70\xd8\xd8\x5b\xc8\x39\x6b\x85\x15\x19\xe1\x82\x6f\x66\x7a\xb4\x11\x22\x54\xc8\x06\x8e\x20\xa7\xf5\x92\x60\xf8\x6b\xa0\x4f\xad\x9b\x8b\xed\x64\x58\x4a\x46\xd1\x66\x86\x6c\x0c\x34\x48\x73\xca\x5d\xe1\x66\xa5\xc9\xac\xa5\x1c\x45\xb0\xc2\x0d\x57\xa1\x82\x66\xea\x7b\x37\xb2\xb3\xce\x17\xed\xec\x9e\xf1\x6e\x0b\x1f\xcc\x78\xbc\xf1\xd8\x11\x3e\xe3\x9e\x76\x7c\xf7\x66\x62\x4e\xc2\x6c\x6e\x92\x98\xcd\x77\x93\x98\xcd\x2d\x12\xb7\x84\xbf\x83\xc4\xe9\xc8\x3c\x86\x6b\x9c\xf0\x4d\x6d\x50\xf2\xde\x33\x1a\x88\xbd\x97\xff\x26\xfe\xa1\x76\x5c\xa1\xdb\x4e\xf3\x0f\x4d\x9f\x82\x16\x6b\x76\x13\xe1\x08\xd5\x94\x53\x1e\x7b\x88\x10\xe9\xa4\x37\x33\xb1\xfd\x6d\xce\xcd\xbc\x5a\x84\x39\x69\x79\xca\x1d\x8d\x33\x5d\x1d\x52\xcd\x7c\x40\xa3\xc0\x97\x36\x68\x15\xeb\x51\x11\x6a\x81\x37\x96\x12\x72\x74\x57\x57\xcc\x48\xc2\xb3\xfb\x13\x3f\xbf\x3f\xf1\x62\x27\x7d\xeb\x76\xfe\x5c\x87\x9a\xc1\x26\xc4\x87\xac\x05\x1f\xdf\x25\x2b\xac\xeb\xd8\x7b\xc4\x42\xcd\xf9\x4b\x6a\x48\x6f\x25\x99\xd4\x3e\x9b\xa6\xee\xd3\xcd\x89\x58\xf8\x40\x1b\x21\x67\x50\x7f\x98\xb3\x9d\x8a\x43\xe3\x99\xcc\x84\x7a\x3e\x40\xcc\x59\x0e\xa3\x35\x4d\x72\xd9\x62\xf4\xae\x73\xf3\xc1\xe7\xfa\x8d\xe2\xe5\x1d\x39\x85\x14\xda\xe2\x39\xe1\x52\xc0\xe5\x82\x3d\x50\xbd\x30\xae\xd9\x5f\x7c\x45\xef\xb5\x7b\x27\x42\xb8\xf7\xe6\xfc\xc0\xa0\x2d\xcd\xc1\xa7\xa8\xbb\xee\x5f\xff\x07\x00\x00\xff\xff\x8e\xd1\x15\x7b\x6e\x18\x00\x00")

func regoAttributeInBytes() ([]byte, error) {
	return bindataRead(
		_regoAttributeIn,
		"rego-attribute.in",
	)
}

func regoAttributeIn() (*asset, error) {
	bytes, err := regoAttributeInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-attribute.in", size: 6254, mode: os.FileMode(420), modTime: time.Unix(1521698157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoInfoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x4e\xc3\x40\x0c\xc7\xf7\x3c\x85\x75\x30\xb6\x0d\x13\x43\x36\xc6\x0e\xa0\x4e\x2c\x88\xc1\x4d\x7c\xad\xab\x34\x77\xd8\x0e\x02\x55\x7d\x77\x74\xb9\xa6\x4a\x3f\x36\x96\x44\xf9\xd9\xff\x8f\xf8\x50\x00\x00\xb8\x47\xad\xb7\xb4\x47\x57\x81\xdb\x9a\xc5\xaa\x2c\x77\x1a\xba\x79\xa6\x8b\x20\x9b\xb2\x11\xf4\x36\x7f\x7a\x2e\x33\x7b\x70\xb3\xac\x34\xb6\x96\x92\x6e\xd9\xf9\x30\xc2\x86\xb4\x16\x8e\xc6\xa1\x4b\xa3\x57\x32\x04\xee\x7c\x90\x3d\x26\x06\xb8\x0e\xbd\x01\x82\x92\x41\xf0\xa0\x91\x6a\xf6\x5c\x0f\x43\x5d\x9c\xad\x7f\xe3\xe0\x1c\xd6\x3b\xaa\x6d\xa4\xd8\x34\x9c\xf6\xb0\x5d\x49\x88\x24\xc6\xa4\xae\x02\x8f\xad\xd2\x69\x45\xe8\xab\x67\xa1\xc6\x55\xf0\x31\x90\x81\x46\x21\xcf\x3f\x27\x9b\xbc\x17\x82\x4d\xbf\xbf\x49\x34\x55\x1e\xc8\xe7\xac\x28\x4e\xba\x49\xcc\xe1\xc6\x6f\xca\x2e\x6a\xab\x09\x77\x9b\x89\xff\xbd\xd3\xac\x06\x13\xb0\x00\xbd\x52\x7a\xd5\xd8\xb6\x80\x91\xd5\x9d\x75\xc7\xeb\xca\xff\x8b\x7c\xc3\x3d\xa5\xab\xdb\x96\x20\xd9\x5d\x9e\xff\x56\xec\xb1\x6f\x53\x66\xce\xbe\xdb\x6a\x3c\xdc\x4d\xb1\xab\xe8\xf7\xbc\x37\xa6\xbf\xac\x96\xd7\x71\xe3\x9f\x70\x67\xb4\x21\x99\xc4\x15\xf9\x79\x2c\xfe\x02\x00\x00\xff\xff\xb8\x06\xde\x01\xb3\x02\x00\x00")

func regoInfoJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoInfoJson,
		"rego-info.json",
	)
}

func regoInfoJson() (*asset, error) {
	bytes, err := regoInfoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-info.json", size: 691, mode: os.FileMode(420), modTime: time.Unix(1521233328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4b\x8f\xdb\x36\x10\xbe\xef\xaf\x18\x28\x3d\x66\xe3\x9e\x7a\xf0\x2d\x7d\x00\x2d\xd0\x02\xc5\xd6\x3d\x15\x81\x41\x93\x23\x9b\x09\x45\x2a\xc3\xd1\xba\x8b\xc0\xff\xbd\xd0\xc3\x94\x64\x3d\x56\x8a\x65\x07\xbd\x2c\xe0\xe1\x70\xe6\x9b\xc7\xa7\x19\xee\x97\x07\x00\x80\xe8\x3b\x2f\x0f\x98\x88\x68\x0d\xd1\x81\x39\x5d\xaf\x56\x1f\xbd\xb3\x8f\xa5\xf4\x9d\xa3\xfd\x4a\x91\x88\xf9\xf1\xfb\x1f\x56\xa5\xec\x4d\xf4\xb6\xbc\xc9\x9a\x0d\xe6\xf7\xfe\x4a\x51\xea\x58\x4b\xc1\xda\xd9\xf3\xa9\x42\x2f\x49\xa7\x85\x68\x0d\xd1\x13\xa6\x84\x1e\x2d\x7b\x10\x16\xdc\xee\x23\x4a\x86\xa3\xe6\x03\x08\x63\x40\xe7\x62\x66\xd2\xbb\x8c\x31\xd7\x50\x40\x68\x0a\x7b\x3e\xb8\x7b\x49\x0b\x6f\xe5\xdd\xb3\x54\x28\xa5\x73\x35\x61\xfe\x24\x97\x22\xb1\x46\x1f\xad\x21\x16\xc6\x63\xa5\x42\xf8\x39\xd3\x84\x2a\x5a\xc3\x3f\x85\xa4\x90\x26\x4e\xa1\x89\x8a\xdf\x1f\x2a\xc5\xb4\x69\xe1\x4b\xad\x5a\x23\x6b\xc9\x5b\xa8\x04\x91\x78\xa9\x40\x85\xc3\x8b\x1c\xfc\xae\x3d\x83\x8b\x9b\x91\xba\x18\xf8\x80\x40\xe7\xec\xa0\xaa\x72\xf3\xee\xd2\x96\x66\x4c\xba\xfe\xcb\x12\x12\xc6\xb9\xfd\x37\x2b\x85\xb1\xb6\x45\x3e\xfc\x2a\x78\x89\x5a\x37\x4e\xe1\xd7\xa9\xf6\x10\xd5\xd9\x5e\x24\xc2\x60\x0e\x76\xc8\x47\x44\x3b\x10\x65\x51\x69\xc7\x07\x24\x70\x16\xfd\xf5\x41\x9f\x1d\x4f\x89\xb9\xec\x80\x4e\xbc\xfd\x86\x1b\xed\x52\x5b\x3c\x85\x5e\x0f\x8a\xed\xce\x19\x70\x11\x98\xf3\x47\x71\x3e\x9e\xd3\x5f\x9d\x51\x1e\x76\xc2\x6b\x09\xda\xc6\x8e\x92\x22\xc2\x19\xad\xd3\xcb\x9c\x70\xfa\x3a\x83\x1a\x5d\xd2\xc3\xa4\x70\x9a\x0a\xf9\x49\xec\xf1\xc2\x7e\x75\xd1\xf3\xd6\x8a\x64\xe8\xd0\x65\x24\x71\x50\x01\x2d\x6b\x7e\x19\x3c\x6e\xe6\xab\x75\xfa\xe1\xed\x43\x1b\xff\x00\xc1\xeb\x54\x18\x2d\xfc\xc0\x61\xc7\x55\x93\xd0\xe5\x3d\x60\x57\x97\x03\x04\xf8\xe6\x77\xf1\xb2\x2a\xc1\xe6\x18\xbf\x82\xd2\x30\x11\x3a\x76\x3c\x93\xb6\xfb\xa8\x57\xf1\xd4\x91\x9e\x7a\x12\x2a\x09\x05\xe3\xe4\x2c\x6c\xfa\xa9\x2d\x85\x85\x1d\x42\x69\x4c\xbd\x1a\xfe\xce\x39\x83\xc2\x76\x71\xf7\x21\x54\x68\x70\x1e\xc2\x61\x80\xa5\xad\xc5\x01\x36\x01\x4c\xcf\x63\x43\x34\x9d\xe0\x1d\xa8\x43\x2d\xd0\x87\xb4\x49\xae\xa9\x48\x7f\x12\x09\x9a\x47\x29\x3c\x2a\x78\x46\xf2\x2d\xb4\x15\xd3\x97\x05\xf9\x2f\xa3\x55\xf3\x89\xb9\x13\x1e\xdb\x34\x04\x3e\x68\x7f\x21\xaa\xac\xc3\xff\x8a\xa4\x7b\xe4\x85\x18\x4a\xc8\xa4\xf1\x79\x69\x0a\x9c\xc7\xc1\x1c\x90\x79\xe3\x9c\x3b\xa9\xba\x7f\x27\x1a\xa4\xa4\x9f\x17\xf8\xe8\x69\x0f\x95\xa5\x65\x93\xd9\x9e\x91\x73\x40\xa6\x26\x23\x61\xee\x43\xd3\x7a\xcc\xcf\x41\x98\x59\xfd\x39\xab\x6a\x1f\x52\xaa\xed\xbe\x00\x7a\x83\x52\x93\x73\x57\x53\x47\xc8\xfc\xc5\xe2\xcb\x5c\x3a\xc7\x33\x67\xfd\xac\xda\x67\xa9\x5a\x6e\x1c\x97\xc6\xae\xa1\xfa\x84\xcd\xba\x7e\x7a\xe4\xa0\xb7\xdb\xf7\x9b\xcd\xd3\x6f\x3f\xfe\xbd\xf9\x65\xbb\x1d\x7d\x7d\x8c\x6c\xca\x4f\x67\x95\xf1\x65\xf9\xbd\x31\xee\x58\x2c\x62\x0a\xa5\x11\x84\x20\xc2\x63\xa4\x7e\x8b\x1c\x5d\xbb\x5e\xdd\x87\xc7\x9d\x56\xe6\xd1\xbd\xb8\x11\x9a\xbf\x72\xb1\xfd\xaa\x8d\xce\x88\xba\x7d\xfc\xc5\x3a\x07\x31\xb9\xa4\xe8\x7e\x99\x11\xe5\xeb\x6e\xb7\xe5\xbe\xf1\xc6\x37\x14\x41\xb5\xef\x7d\x83\x08\x52\x42\x99\x23\x9a\x1f\x45\xde\xbd\xda\x43\xc3\xc4\x8d\x96\xd5\x91\x15\xab\xff\x5d\x3c\xdc\xa4\x43\xde\xe6\x2f\x2e\xbd\x65\x0c\x5b\xcb\xdd\x0b\x39\x7f\xca\x85\x1b\x90\xe5\x2b\xb3\xf0\x20\xc0\x68\xfb\x29\xff\x4e\x71\x27\xc4\x25\x67\xdd\x57\xcd\x8e\xde\x7c\x57\x83\xe3\xb6\xd9\x9e\x30\x5b\x46\x9b\xb5\x3b\x2f\x9a\x2f\x2a\x0f\x29\x52\x3e\xba\x5f\x9f\x23\x3f\x3b\x99\x25\x68\xf9\xe2\x5f\x2d\xa6\x77\xbc\x2f\x37\x2d\x16\xfe\x8e\xb7\xa3\x88\x1d\x95\x85\x2b\x8c\x40\xee\x69\xda\xb6\x32\xa7\xe1\x66\x7e\xa7\xfb\x11\x96\x46\x6a\x84\x4b\x02\x9c\xf3\xf9\xe9\x47\xb7\x47\xbe\x0d\xb4\x99\x64\xed\x47\x57\x1a\x59\x00\xe0\x10\x17\x1f\xca\xbf\xa7\x87\xff\x02\x00\x00\xff\xff\x21\xd1\x31\x60\x41\x18\x00\x00")

func regoSpecInBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecIn,
		"rego-spec.in",
	)
}

func regoSpecIn() (*asset, error) {
	bytes, err := regoSpecInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.in", size: 6209, mode: os.FileMode(420), modTime: time.Unix(1521702680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x6f\xdb\x36\x14\x7e\xcf\xaf\x38\x70\x0b\x14\x18\xea\xa6\x03\x86\x02\xcd\x5b\xb0\x0d\x58\x81\x0d\x28\xb2\x3d\x35\xc8\x02\x4a\x3a\xb2\xd8\x50\xa4\x4a\x52\x71\xbc\x22\xff\x7d\x20\xa9\xab\x2d\xc9\xa2\xc5\x24\xdb\x4b\x1b\xf3\xf2\xe9\x3b\x87\xe7\xc6\xcb\xf7\x33\x00\x80\xd5\x6b\x15\x67\x98\x93\xd5\x05\xac\x32\xad\x8b\x8b\xf3\xf3\xaf\x4a\xf0\xb5\x6b\x7d\x27\xe4\xe6\x3c\x91\x24\xd5\xeb\xf7\x1f\xce\x5d\xdb\xab\xd5\x5b\x37\x53\x53\xcd\xd0\xcc\xfb\xb3\xc0\x98\xa6\x34\x26\x9a\x0a\x5e\xf7\x26\xa8\x62\x49\x0b\xdb\x74\x01\xab\x2b\x2c\x24\x2a\xe4\x5a\x01\xe1\x20\xa2\xaf\x18\x6b\xd8\x52\x9d\x01\x61\x0c\xa8\x69\xd6\x5a\xd2\xa8\xd4\x68\x46\x24\x20\x91\x59\x3c\xd5\x7c\x6e\x57\xd8\xaf\xb9\xb9\x75\x2b\x49\x12\x6a\x86\x11\xf6\x59\x8a\x02\xa5\xa6\xa8\x56\x17\x90\x12\xa6\xb0\x1a\x22\xf1\x5b\x49\x25\x26\xab\x0b\xb8\xb6\x2d\xb6\x35\x17\x09\xb2\x95\xfd\x7d\x53\x0d\x2c\xba\x08\xdf\xdb\xa1\x2d\xb3\x5e\x7b\x8f\x15\x91\x92\xec\x2a\x52\x4d\xe7\x9e\x0e\x7e\xa7\x4a\x83\x48\xbb\x92\x8a\x14\x74\x86\x20\x6b\xed\x60\x52\xe9\xe6\xdd\x3e\x16\xd5\x98\x1f\x7e\xdf\x2d\xa1\xc4\xd4\xe0\xbf\x3a\x4f\x30\xa5\xdc\xea\x43\x9d\x37\x5f\x59\xf5\x66\x3c\x36\xbf\x1e\xdb\x2f\xac\x5a\x6d\x07\x91\xb0\x81\x83\x08\xf5\x16\x91\x8f\x48\x69\x57\x5a\xe8\x0c\x25\x08\x8e\x6a\xb9\xd0\xf5\x87\xe7\xc8\xec\x2c\xe0\x40\xde\x61\xe0\x8e\xb9\xb4\x88\x8f\x8d\xad\x37\x03\xfb\x96\x33\xf2\x89\xc6\x73\xfe\xb0\xfd\xd3\x3a\xfd\x4d\xb0\x44\x41\x44\x14\x8d\x81\xf2\x54\xc8\xdc\x4a\xe8\x61\x3a\x83\x9e\xd3\xf4\x1e\xf7\xa0\x8e\x95\x0c\x78\x52\xd3\x5b\x90\xf8\x8e\x6c\x70\x0f\xbf\x9a\xa8\xf4\x2d\x27\xf9\x58\xa7\x28\x65\x8c\xa3\x03\x90\x6b\xaa\x77\xa3\xdd\x5d\x7d\xf5\x7a\x6f\xde\x9e\xf5\xf9\x8f\x38\x78\xab\x0a\x46\x89\x1a\xe9\x3c\xf8\x54\xd7\xa1\xdd\x3c\xd0\xa2\x5d\x0e\x20\xa0\xba\x71\x71\x7f\x55\x1a\xcc\x29\xff\x6a\x06\x8d\x3b\xc2\x01\x8e\xd2\x92\xf2\xcd\x6a\x70\xe0\xe3\x41\xeb\xe3\x80\x42\x63\x89\x44\xe3\x6c\x2d\xfc\x35\xec\xda\x31\xe1\x10\x21\x38\xb0\xe4\xa8\xf8\x91\x10\x0c\x09\x3f\xe4\x3d\xc4\x30\x41\x86\x7e\x0c\xc7\x09\x3a\xac\xe0\x04\xbb\x04\xe6\xeb\xb1\xd3\x34\xdf\xc1\x0f\xa8\x8e\x99\xc0\x10\xd3\xae\x73\xcd\x65\xfa\x33\xc9\x91\xad\x63\xa2\x30\x81\x7b\x94\xaa\xc7\xb6\xf2\xf4\xb0\x24\x1f\x34\xf2\xc4\xdf\x31\x23\xa2\xb0\xef\x86\xa0\x33\xaa\xf6\x9a\x2a\x74\xf8\x5f\x39\xe9\x06\x75\x20\x0f\x95\xa8\x25\xc5\xfb\xd0\x2e\x50\xa7\x03\x1f\x92\xc6\x70\x6a\x4b\xaa\xe6\x3f\x93\x1b\x14\x92\xde\x07\x08\x7a\x54\x41\x85\x14\x56\x99\xfd\x1c\xe9\x43\xb2\x60\xa5\x24\xec\x79\xdc\xb4\x4d\xf3\x3e\x0c\x4b\x4e\xbf\x95\xd5\xda\x37\x2a\xa5\x7c\x63\x89\x3e\xc1\x52\x4b\x21\x16\xbb\x0e\x89\xcd\x8e\x45\x39\x5d\x0a\xa1\x3d\x73\xbd\xd7\xda\x97\x45\x12\x2e\x1d\x3b\xb0\x25\xae\x3e\xa3\xb2\x6e\xb7\x1e\xe3\xa5\xef\x65\x33\x66\xba\xfc\xbd\xe4\xed\x7e\xc9\xd6\x5a\x7d\x55\xbf\x50\xad\x3b\x56\x8b\xda\xcf\x3f\x71\x8d\xca\xc4\x16\x93\xdb\x38\x23\x72\x7e\x42\xbc\xc2\x0d\x3e\x14\xa0\x33\x62\x0b\x53\xeb\x2d\x1d\xbd\xe6\xa5\xd2\x90\x09\x2e\xa4\xa9\x61\x23\x84\x7b\xc2\x68\x12\xd2\xe9\x5a\xda\x82\xc6\x1e\x25\xf6\xa5\x9b\x67\x08\x95\xa8\x20\x15\x12\xc8\x9e\x45\x18\x3a\xf0\x2b\x2f\xf3\x67\x4e\xde\xc3\x40\xe0\x72\x9f\xd6\x28\xad\x00\x7f\x5f\x5f\xae\xbf\xfc\xb8\xfe\x78\x73\x4d\xd6\xff\x5c\xae\xbf\xbc\x5f\x7f\xbc\xf9\xe1\xf5\x92\xcc\x4f\x4a\x2d\x36\xc8\x51\x1a\x47\xf6\x0a\x0b\xad\xda\xa8\x82\x1e\x0c\x44\x3b\x1b\xcb\x22\x12\xdf\x21\x3f\xba\xf2\x5e\xf1\xcb\xee\x00\xa8\xe0\xb7\x82\xb3\xdd\x89\x7c\x4d\xf4\x32\xd3\x8d\x6d\x2a\xd4\x90\x94\xd6\x82\xdd\xe6\x02\x8c\xc7\x0c\x45\x83\x65\xbc\x13\x4c\x49\xc9\xf4\xad\x90\x09\x4a\x2f\xde\xd6\x58\xeb\x54\xdb\x53\x7a\x69\x4a\x66\xa2\xa0\xc2\x06\x8b\x6d\x24\xb9\xc3\x51\xcb\x5c\x44\xde\x52\xf1\xdc\x82\x38\x6a\xc3\x42\x1c\x21\x79\x5d\x3b\x59\x4b\xf7\x2d\xac\x28\xd7\xb8\x41\x69\xfe\xe4\x25\x63\xee\xff\x3c\x72\x2d\x75\xa4\x6e\xfc\xea\x66\xa6\x80\x85\xc4\x78\x99\x0b\x74\x30\xfe\xa3\x9b\xbf\xb9\x7a\xf7\xdc\x4d\x15\x42\x2d\xd1\x5b\x51\x46\x8c\xc6\x6c\x07\x35\xd2\x4c\xed\x8d\x0c\xab\x2c\xce\x8c\xd4\xb2\xc4\x79\x42\xa4\x94\x69\x94\x24\x62\x7e\xd6\xdd\x0f\x29\xa6\x20\x32\x1e\x69\xd2\x8a\x03\x34\xbe\x58\x94\xd2\x88\xa5\x82\x1a\x45\x2a\x24\xd2\x0d\xbf\x35\x8e\x7e\x7a\xcc\x86\x0a\x26\x78\xbc\x70\xe7\x8a\x5e\xcc\xdc\x94\xd9\x96\x8a\x26\x43\x0f\x15\x53\x2d\x07\x89\x63\xb3\x1d\x42\x4e\xe8\xfe\x69\x69\x6f\x40\x91\x09\x3e\x89\xf0\xe9\xf3\xfd\x4f\x47\xfa\x3f\x4c\xf5\xc7\x34\x91\x53\xfd\xb6\x50\x1f\xec\x9e\x17\xd4\x36\x68\xea\x86\x13\xed\x63\x4b\x19\x83\x8c\xdc\x23\x10\x68\x13\x7b\x05\x19\xd2\x56\x68\x62\x36\x68\x29\x3d\x99\x69\x27\x11\x12\xc8\x09\xe5\xd0\x81\x5c\x16\x4b\xdc\x66\xf2\x53\x55\xcc\x99\x70\x32\x4f\x24\x9e\xe0\x43\x00\x69\x38\x38\xa4\x90\xea\xce\xc9\xc3\x2d\x43\xbe\xd1\x99\x17\xc1\x9c\x3c\xd0\xbc\xcc\xc1\x4d\x3d\xac\x46\xea\xca\x79\xb2\x9a\x6d\x18\xd7\x29\x7c\x36\x63\xff\xc2\xa3\x26\x3c\x52\x3d\xd5\x7c\x9b\x62\x22\x24\x61\xca\x4f\x52\x31\xe5\x2f\xa6\x62\xca\x4f\x51\x71\x45\xf8\x05\x54\xec\x7d\x2c\xd4\x3d\x0b\x7c\x92\x32\xc8\xd6\xde\x01\x0b\x88\xa6\x96\x7f\x92\xfa\xa1\x90\x34\x27\x72\xb7\xac\x7e\x70\x71\x0a\x2a\xac\xe0\x45\x84\x44\x92\x2c\xd9\xe5\x51\x05\x06\xc2\xee\xf4\x02\x13\x6b\x0e\x73\x4e\xe6\x55\x21\x84\xa4\xa5\x30\x96\x9e\xc7\xf8\x3d\x52\x6e\xbe\xbd\x44\x57\x99\x28\x59\xe2\xee\xb3\x08\xab\x9e\x56\xc4\x44\x1e\xf5\x18\x4f\xc2\xc1\xeb\x13\x15\xbe\x3e\x51\x5a\x2c\x5a\xeb\x6a\x7e\xa8\x4d\xcd\xec\x22\x44\x95\x51\x05\xee\x1f\x25\x73\x52\x14\xf6\xcc\x5c\x40\x41\xe3\x3b\x1b\x90\xb6\x59\xf5\xf0\xc2\x05\x75\x65\x4f\x4e\xb4\x80\x37\xf8\xa0\x51\x72\xc2\xde\x84\x0c\xa7\x5a\x12\xae\x28\xf2\x05\xf6\xdc\x42\x84\x34\x07\x6f\x9d\x5a\x75\x75\xdf\xe9\xcc\x54\xd3\xc9\x1b\x9f\xe3\x07\x8a\xd3\x19\xd9\x0e\x49\x99\x20\x63\x8a\xb3\x03\xa6\x0d\xb6\xa5\x3a\xd1\xcf\xa8\x9a\xfc\xc4\xe0\xa9\x7b\x6f\x84\xa6\x83\x07\xe7\x2d\x83\xca\x34\x67\xef\xa2\xce\x86\x7f\x0d\x3d\x6e\x9a\xb8\x8d\xb8\xaa\x87\x1c\xb9\x8c\x60\x4c\x6c\xed\x3b\x8f\x04\x63\x46\xa4\x09\x65\x35\x7a\xfb\xd4\x69\x2b\xfa\x77\x14\x87\xef\x9a\x9e\xe9\x96\x62\xf2\xd9\x4d\x47\x34\xb5\xf0\x4e\xe2\xa4\x07\x23\x8c\xb4\xb7\x53\x6a\xef\xb5\x08\xa4\x52\xe4\x36\x74\xc5\xa5\x94\xc8\xf5\xc0\x8d\xd6\x0b\x3f\x28\x19\x93\xa0\x7a\x4e\xf2\x02\x12\x9c\x74\x1e\xda\x58\xef\xb3\x1c\x87\x4e\xdc\xfb\x0c\x3f\xbb\x1b\x37\xd2\xb1\xaf\xf9\xbf\x8b\x18\x5c\xc6\xe6\x51\xc4\xb3\x2f\xa4\xff\x25\x7a\x33\xa3\x73\xaa\xc2\x28\xbf\x33\x71\x4a\x1f\x88\x18\x32\xe7\x9f\x74\x35\x3d\xa8\xef\xea\x5e\xfa\x69\xb5\x3d\x23\x57\x4c\x1a\xeb\x61\xbe\xe8\x9e\xd9\x2b\x28\x50\x02\x89\x67\xe4\x91\x5f\x44\x5c\xe6\xc8\xf5\xde\x4b\x4e\x36\xf8\x7a\x20\x5c\xb6\x08\x1c\xc7\xfb\x52\x98\x8a\xd3\x2e\xdc\xde\x9d\x5c\xd0\xb7\x1b\x9e\x71\x7a\x98\xa1\x03\x99\x7f\x6b\xe8\x43\xd0\x27\xfc\x0c\xb3\xdb\xa0\x7e\x1a\x6a\x9e\xce\x3a\xcc\xce\x81\x04\x20\x38\xe6\x8b\x67\xee\xdf\xc7\xb3\x7f\x03\x00\x00\xff\xff\xa8\xe2\x2c\xeb\xa0\x30\x00\x00")

func regoSpecJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecJson,
		"rego-spec.json",
	)
}

func regoSpecJson() (*asset, error) {
	bytes, err := regoSpecJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.json", size: 12448, mode: os.FileMode(420), modTime: time.Unix(1521706104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoTypeMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x3f\x6f\xdb\x3c\x10\xc6\x77\x7f\x8a\x03\xf3\x02\x2f\x50\x24\x56\xa7\x0e\x5e\x8b\x02\x5d\x0a\x74\xe8\x56\x74\x38\x8b\x27\xf9\x12\x8a\x64\x8f\xe7\xa4\x6a\xe1\xef\x5e\x50\x8a\x98\xc8\xb2\xe3\x00\x45\x36\xe9\xfe\xe8\x39\x3d\xbf\x23\xff\xac\x00\x00\xcc\x7f\xa9\xde\x51\x87\x66\x03\x66\xa7\x1a\x37\x55\x75\x9b\x82\xbf\x19\xa3\xeb\x20\x6d\x65\x05\x1b\xbd\x79\xff\xa1\x1a\x63\x57\xe6\x7a\xec\x54\x56\x47\xb9\xef\x5b\x1f\x09\xbe\x60\x8c\xec\xdb\x34\x65\x2d\xa5\x5a\x38\x2a\x07\x3f\xd4\xec\x38\x41\xc3\x8e\x80\x13\xec\x13\x59\xd0\x00\x1d\x46\xa0\x5f\x4a\xe2\xd1\x81\xf6\x91\x52\x8e\x3a\xf4\xed\x1e\x5b\x82\x14\xa9\xe6\x86\xeb\xb4\x2e\x92\x7d\x1c\x14\xc3\xf6\x96\x6a\x9d\xa2\x68\x2d\x67\x1d\x74\x5f\x25\x44\x12\x65\x4a\x66\x03\x0d\xba\x44\x8f\x25\x11\x35\xcb\xcc\xf2\xa3\x01\x43\x7a\xfd\x6e\xf6\x3e\x1a\x23\xd4\x64\xad\xab\xca\x52\xc3\x7e\x50\x48\x55\x8d\x4a\x6d\x90\xde\x94\xe2\xc3\xf0\x74\x28\xbf\x5d\x6a\xe7\x12\xa5\x71\x21\x54\x7c\xfc\x38\x95\x5c\xcf\x0b\x16\x56\x12\x4c\x5f\x2b\x6e\x6e\x7b\x68\xc9\x93\xa0\x06\x49\xc0\x1e\x82\x58\x92\x6c\xa7\x0a\xfa\xe4\x50\xe9\xd8\x6a\xf6\x39\xbb\x23\x16\x08\x0f\x1e\xb8\x8b\x8e\x3a\xf2\x8a\x59\x68\x7d\x3c\xc4\x49\xeb\x4b\xf6\x32\x82\x52\xfa\x32\x8a\x97\x90\x5c\x40\xd3\x8d\x1b\x68\x16\x3d\x87\xd5\xe9\xb7\xc3\xd3\x64\x66\x6a\x3e\x4f\xe7\xf9\x96\x5f\x24\xc4\x09\xee\xa8\x7f\xbe\xeb\x13\x06\x0e\x1e\xd0\xcf\x59\xfc\x9f\x20\xed\xb7\xf9\x09\x1a\x09\x1d\x60\x59\xfd\x37\x66\x21\xf4\x73\xcf\x42\xd6\x6c\xe0\xfb\x12\xc1\x20\x33\x0b\xff\x38\x66\x79\x01\xe2\xe3\xa0\x67\x30\x9e\xd8\xeb\xb2\xac\x76\x30\xe6\xf8\xcf\x17\x0e\x24\x95\xd3\xc8\x97\x7d\x26\x2f\xca\xab\x87\xf9\x1c\x1e\x32\xb5\x61\xb9\xd0\xf1\x6f\xca\x27\xe5\x0d\x66\xea\x62\x90\xd7\x4f\xf5\xe9\x9e\xbc\xee\xd1\xc1\x13\x63\x18\x3f\x01\x41\x20\x62\x7d\x97\xef\x4d\xdd\xa1\x42\x94\x70\xcf\x36\xdf\xa8\xff\x3c\xf7\xb9\xe3\x33\x5e\x7c\xab\xc3\xea\x6f\x00\x00\x00\xff\xff\x72\x98\x35\xd6\x4b\x06\x00\x00")

func regoTypeMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoTypeMappingJson,
		"rego-type-mapping.json",
	)
}

func regoTypeMappingJson() (*asset, error) {
	bytes, err := regoTypeMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-type-mapping.json", size: 1611, mode: os.FileMode(420), modTime: time.Unix(1521685528, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen.sh": genSh,
	"rego-abstract.in": regoAbstractIn,
	"rego-abstract.json": regoAbstractJson,
	"rego-attribute.in": regoAttributeIn,
	"rego-info.json": regoInfoJson,
	"rego-spec.in": regoSpecIn,
	"rego-spec.json": regoSpecJson,
	"rego-type-mapping.json": regoTypeMappingJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gen.sh": &bintree{genSh, map[string]*bintree{}},
	"rego-abstract.in": &bintree{regoAbstractIn, map[string]*bintree{}},
	"rego-abstract.json": &bintree{regoAbstractJson, map[string]*bintree{}},
	"rego-attribute.in": &bintree{regoAttributeIn, map[string]*bintree{}},
	"rego-info.json": &bintree{regoInfoJson, map[string]*bintree{}},
	"rego-spec.in": &bintree{regoSpecIn, map[string]*bintree{}},
	"rego-spec.json": &bintree{regoSpecJson, map[string]*bintree{}},
	"rego-type-mapping.json": &bintree{regoTypeMappingJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

