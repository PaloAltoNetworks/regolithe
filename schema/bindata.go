// Code generated by go-bindata.
// sources:
// gen.sh
// rego-abstract.in
// rego-abstract.json
// rego-attribute.in
// rego-info.json
// rego-param.in
// rego-shared-params.in
// rego-shared-params.json
// rego-spec.in
// rego-spec.json
// rego-type-mapping.json
// rego-validation-mapping.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x6b\xc4\x20\x14\x84\xef\xfe\x8a\xd7\xb4\x60\x7b\x50\x7f\x40\xa0\x90\x42\x0e\x3d\x14\x4a\xb0\x67\x79\x1a\x6b\x6c\x1b\x15\xb5\xff\x7f\xd9\x6c\x58\xb2\x61\x2f\xcb\x1e\xdf\x0c\x33\xf3\xf1\x1e\x1f\x84\xf6\x41\x68\x2c\x13\x21\xc9\xe6\x3f\x60\xc9\x02\x2d\x42\xa9\x4e\xca\xe1\xfd\xed\x4b\xf6\x4a\x09\xda\x3c\x3d\x1b\xac\x90\xad\x8b\x0c\x6b\xcd\x5e\xff\x57\xcb\x7d\x78\x69\xa8\x70\x2d\x5d\x0d\x5d\x6a\x46\x53\xb9\x0f\xf0\xba\x93\x7e\x4a\x0c\xf7\x0c\x9c\x53\x9f\xdd\xd0\x7d\xf4\xb2\x1f\xf6\xa9\x84\x19\xe7\x3d\x52\x49\xd6\x6c\x70\x96\xf3\x0a\xca\x8d\xa5\x13\x66\x3b\x9e\xbc\xb2\x6d\xbf\xd0\x97\x19\x92\x67\x60\xdf\xc0\x8f\x5f\x1e\xb1\x22\x77\xb1\x25\x2e\xb2\xf5\x04\x96\x7e\x1d\x14\x33\xd9\x19\x81\x93\x43\x00\x00\x00\xff\xff\xfe\x7b\x84\xde\x8e\x01\x00\x00")

func genShBytes() ([]byte, error) {
	return bindataRead(
		_genSh,
		"gen.sh",
	)
}

func genSh() (*asset, error) {
	bytes, err := genShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.sh", size: 398, mode: os.FileMode(493), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\xc4\x30\x10\x44\xfb\x7c\xc5\x2a\x47\x79\x87\xa9\x28\xd2\x1d\x12\x05\x1d\x42\xa1\x8e\x36\xf6\x9a\xf8\x64\x6c\x6b\x77\x4f\x08\xa1\xfc\x3b\x4a\x0c\xe1\xa0\xa0\xb3\x76\xde\x78\x46\xf3\xd1\x00\x00\xb4\x57\x62\x27\x7a\xc5\xb6\x83\x76\x52\x2d\x9d\x31\x27\xc9\xe9\x50\xaf\xd7\x99\x5f\x8c\x63\xf4\x7a\xb8\xb9\x35\xf5\xb6\x6b\xf7\xd5\xa9\x41\x23\x2d\xbe\xe3\x28\xca\x68\xf5\x5b\x70\x24\x96\x43\xd1\x90\xd3\x2a\x27\xc0\x2f\x02\x30\xc6\xfc\x26\xa0\x19\x1c\xd9\x88\x4c\x80\x20\xa4\x90\x3d\x8c\x28\x04\xa8\xca\x61\x3c\x2b\x09\x60\x72\x26\x33\x30\x45\x5c\x7e\x12\xd0\x09\x15\x2c\x26\x18\x09\x98\xce\x42\x0e\x42\xd2\x0c\x59\x27\x62\x90\x42\x36\xf8\x60\x2b\xbc\x75\x7c\x2f\x6b\xc5\x3c\x9e\xe8\xa7\x20\x3a\x17\x16\x0c\xe3\x23\xe7\x42\xac\x81\xa4\xed\xc0\x63\x14\xda\x37\x95\x29\x97\x4a\xdd\xaa\x7a\xb7\x86\xbf\xee\x75\x4b\x26\xbf\xa4\xed\x8c\x23\x1f\xd2\x9a\x21\xe6\xc2\xb1\xe1\xf3\xfa\x9a\xb7\xc1\x36\xfa\xdf\xb0\x61\x38\xf6\xfd\xd3\xc3\xdd\x73\x7f\x3f\x0c\x7f\xff\x6a\xe6\xe6\x33\x00\x00\xff\xff\x33\x37\x6b\x77\xd3\x01\x00\x00")

func regoAbstractInBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractIn,
		"rego-abstract.in",
	)
}

func regoAbstractIn() (*asset, error) {
	bytes, err := regoAbstractInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.in", size: 467, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xcd\x8e\xdb\x36\x10\xbe\xef\x53\x0c\x36\x01\x02\xb4\xeb\x38\xbd\x14\xc8\xde\xf6\x90\x43\x80\xa4\x0d\x8a\x9e\xb2\xd8\x18\x23\x69\x64\x33\xa1\x48\x66\x48\xed\xda\x2d\xf2\xee\x05\xa9\x1f\x4b\xfe\x93\x6c\x69\xed\xf4\x94\x0d\x39\x33\xe4\x37\x33\xfc\x66\x28\xfa\xdf\x2b\x00\x80\xeb\x97\x36\x5e\x50\x86\xd7\xb7\x70\xbd\x70\xce\xdc\x4e\xa7\x5f\xad\x56\x93\x62\xf4\xb5\xe6\xf9\x34\x61\x4c\xdd\xe4\xcd\xef\xd3\x62\xec\xc5\xf5\x4d\xa1\xe9\x84\x93\xe4\xf5\xee\x22\xeb\x18\x63\x57\x4d\x24\x64\x63\x16\xc6\x09\xad\xc2\xb4\x02\x2c\x25\x00\xa5\xd4\x4f\x16\x9c\x86\x84\x62\x89\x4c\x80\x60\xc9\x81\x4e\x21\x42\x4b\x80\xce\xb1\x88\x72\x47\x16\x50\x25\x53\xcd\xc0\x24\xd1\x5b\xb2\xe0\x16\xe8\x20\x46\x05\x11\x01\x53\x6e\x29\x01\xa1\x9c\x06\xed\x16\xc4\x60\x0d\xc5\x22\x15\x71\x21\x5c\xef\x71\x65\xc2\x16\x75\xf4\x95\xd6\x1b\xc4\x24\x11\x5e\x0c\xe5\x27\xd6\x86\xd8\x09\xb2\xd7\xb7\x90\xa2\xb4\x74\x73\x55\xc8\x98\xe6\x4c\xe1\xab\x42\xb7\xde\x61\x6b\xbc\xf0\x25\x53\xea\x57\x7b\x31\x4d\x28\x15\x2a\xac\x61\xa7\x0d\x8d\x5a\xfc\x47\xf8\xeb\x47\xed\xb0\x5a\xba\xff\x62\x3b\xa1\xd5\xb3\x1b\x31\xf8\x20\x6c\x70\xf2\x23\xb1\x15\x5a\x51\xd2\xf0\xf4\xeb\x4d\xdd\xc3\xee\x69\x89\x1a\x74\x8e\x58\x7d\xda\xed\xac\x5a\xec\xcb\xe3\xfd\x9b\xc9\xdb\x87\x5f\x5f\xee\x9c\x6e\xc1\x41\x66\x5c\x6d\xec\xa8\x0b\x55\x23\x6b\x84\x02\x04\x83\xec\x44\x9c\x4b\xe4\x0a\xf0\x6b\x78\xef\xe0\x49\x48\x09\xb9\xcf\x32\x29\x9b\x3a\x29\xeb\x0c\xdc\x82\xc0\x30\x3d\x0a\x9d\xdb\x4a\x2b\x24\x21\x60\x92\x80\x66\xd0\x8f\xc4\x4f\x2c\x1c\x05\x51\xad\xc8\x56\x39\x9c\x6c\x7a\xb0\xde\xaf\x70\x94\xed\x76\x49\xbf\x30\x1e\x02\xff\x17\x19\x26\x4b\xca\xf9\x5d\xae\xe1\x78\x7f\xf8\x0d\x72\x35\x4d\x09\x14\xb6\xf7\xed\x32\x18\x67\xfa\x9e\x0b\xa6\xe4\xfa\x16\xee\xf7\x4a\x05\x49\x85\x19\x1d\xb0\xb4\x06\xd5\x21\xd3\x84\xb3\x57\xf2\xe1\xc0\x96\xfb\xa7\x69\x4b\x6d\xcf\xc1\xde\xbd\x84\xa7\x2b\x4a\x66\xf1\x02\xb9\x5b\x7c\x0b\x56\x88\xd2\x9c\x96\xa6\xe0\x2e\x04\xeb\x58\xa8\x79\x23\x58\x59\x6e\x1d\x2c\xb4\xd2\xec\x39\x31\x22\x78\x44\x29\x92\x0e\xd7\x41\x33\x6f\x0a\x93\xfb\x3d\x08\x6b\x9e\xe9\x07\x73\x96\x91\xb5\x38\xa7\x93\xe0\x7e\x2c\x74\x81\x96\x46\xa2\x50\x1e\x6c\x91\x8c\xc1\x0b\xd5\x79\x09\xa7\xb4\xe5\xda\x8b\x01\xd6\x22\xee\x91\x08\xbb\xa0\xde\x15\x36\x7c\xc4\x72\x4f\x22\x9a\xb7\xcf\xe1\xca\x10\xbc\x53\x79\x76\x0c\xbe\x43\x04\xd8\x52\xe8\x26\x97\x9d\xf6\x4b\xff\x75\x2f\x00\x0d\x82\xf7\x8a\x5f\xee\xef\x26\x9f\x7f\x9b\xbc\x7d\xb8\xc7\xc9\x3f\x77\x93\xcf\x9e\xd1\x7f\x79\x79\x38\x10\x50\xd7\xba\xbd\xb3\x5d\xa1\xca\x9d\x9e\x93\x22\x46\x17\xd8\xe9\xf8\x40\xfd\xbd\x68\xf4\x15\x20\x2c\xb4\x4c\x42\xb4\x0a\x29\x1a\x61\xfc\x8d\xd4\x51\x47\x2f\xd2\x5a\x12\x1e\x60\xaf\x3e\xf8\x62\xa6\xd0\xb2\xcc\xb4\x92\xab\x11\xf0\xf9\x06\xc9\x9b\xf2\x64\xe2\x3b\xab\x24\x0f\x94\x13\x96\x21\xf0\xd4\x17\x96\x3b\x3b\xce\x84\x52\xcc\xa5\x9b\x69\x4e\x88\x4f\xc6\x19\x0e\x5b\x55\xe2\x5a\x41\x0d\xfd\x20\xfa\x9a\x1c\xd6\x81\xb0\x8e\x47\xfe\x8d\x7a\x9d\xa6\x67\x01\x1b\xb6\x7b\x32\xd8\x0a\xca\x6e\xd0\x47\x80\xba\xaf\x48\x65\x0d\xef\x06\xae\x85\x72\x34\x27\xf6\x7f\xaa\x5c\xca\xe2\xdf\x2c\x2a\x46\xaa\x76\xa4\xe6\x8b\x87\x81\x0e\x31\x4c\xf1\x78\x47\xb8\x61\xef\xfc\xb1\x6d\x6e\xed\xd4\xc8\xd6\x43\x43\xe2\x3a\x4a\x2d\xa4\x25\x66\x46\xd2\x80\x5c\x7d\x57\x58\x28\xf3\xd4\x17\xc2\xff\x6f\xa2\xd2\xd2\x68\x3b\x56\x96\x9a\x3c\x92\x22\x96\x2b\xa8\xac\x9e\x90\xab\x3d\x54\x4a\x9e\xf0\x5a\x8e\x73\x1a\x9a\x0e\x8e\x94\xdd\xba\x8a\x1e\x58\xbc\xe5\x83\x3f\x0d\x7e\xcf\xc9\x93\x6e\x99\x0e\x06\x05\xb7\xef\xee\x81\xa9\xa3\x15\xc4\x3a\x33\x42\x12\x6f\x5d\x40\x77\xae\xb3\x71\x4f\x1a\x84\x31\x15\xd2\x11\x63\x24\x4f\xe7\xe6\x76\xc1\xad\x50\xf9\xdc\x2f\x8c\xfb\xca\x63\x72\xf6\x61\x3f\xaa\xbb\x1d\x85\xa2\x52\xcd\x24\xe6\x6a\xe6\x4b\xdf\x38\x1d\x13\x94\x26\x2f\x52\x4d\xe7\xe4\x7b\xd0\x11\x90\x84\x0f\x00\x0b\x7c\x24\x40\x58\x37\x80\xa5\xf9\x73\xa3\x12\x09\x29\x27\x52\x31\x0a\xb2\x46\x03\x84\x90\xa1\x50\xd0\x30\xff\x3c\xac\x93\x2b\xf1\x3d\xa7\xf7\xe5\x25\xc4\x13\xcf\x20\x77\x64\xb8\x9c\x49\x52\x73\xb7\x38\xd9\x1d\x19\x2e\x45\x96\x67\x50\x98\xd9\xee\x12\xab\x1b\x59\xef\x1b\x50\xed\x96\xaa\x02\x0d\x46\x38\xac\x21\xac\x00\xee\xe9\x82\x2b\x7c\x75\xbd\x3c\x37\x40\xa1\x06\x87\x50\xa8\x9f\x3a\x84\x42\x0d\x0d\x61\x09\xf0\x27\x0d\x61\xf8\xb8\x77\x2a\x36\xaf\x7c\xf1\x76\x56\x67\xc2\xcd\x28\x33\xee\xb4\xd2\xf7\x3e\x0d\x54\x76\xb3\x11\x97\xb2\xc8\x27\xac\x8d\xa1\x04\x44\x0a\x61\x09\xd0\x0c\x45\x4b\x7a\xe6\xe2\x11\x6e\xb7\xcf\xd4\xc0\xd4\x37\xe7\x8b\xf5\x2f\x86\x45\x86\xbc\x1a\xaf\x7f\x29\x6a\x23\x94\x76\x2f\xd2\xc4\x30\x61\x32\xd6\x37\x1e\x61\xc1\x9b\x0b\xdf\x79\x2e\x00\xa4\x7e\x29\x18\x05\x47\x69\xed\xdc\x30\x2c\xc5\x4c\x6e\x1c\x10\x85\xad\xf0\x58\x64\x17\x3a\x97\x49\xe0\x0a\x42\xe9\xe0\x49\xb8\x05\xc4\xc8\x47\xf1\xe0\x48\x00\x9f\xb5\x6b\xb6\x97\xe9\x9a\xad\xd3\xa3\xe5\x5e\x69\xeb\xb9\x2f\xe5\x83\x5b\x63\x9b\x47\xe5\x06\x86\xd5\xe5\x0c\x8d\x09\x2f\x32\x1a\x8c\x88\xbf\x05\xb2\x7f\x5a\x90\x0a\xb5\xae\x68\x3b\x6c\xf8\x66\xec\x34\xbc\xa2\xa5\x23\x56\x28\x5f\x9d\xbb\x80\x3b\x46\x65\x05\xa9\x91\xce\xe6\xda\xdc\xb9\x53\x75\x50\xcc\x42\x38\x9a\x4f\xdb\x27\x84\xa1\x87\x06\xa9\x3c\xeb\x7c\xf2\xad\xa5\x8f\x7b\x3a\xea\xdf\xc3\x06\xf1\x54\x6a\xec\x13\xa4\x20\xdc\xff\x20\x42\x0d\xb3\xa7\xac\x14\xb6\xf7\x36\x3a\x1f\xed\x5b\xd2\x4e\x74\xbe\x9c\xd7\xb2\xd5\xf1\xeb\x2b\xcf\x94\x1e\x21\xfa\xe1\x08\x8c\x4c\xe9\x47\x34\xdd\xcf\x7c\xc3\xbe\xbb\x86\x77\x6f\xdc\xfe\x09\xcc\x5e\x85\x8d\x33\xf3\x47\xc9\x71\x08\x71\x6e\x9d\xce\x60\x6d\x70\xfd\xfb\x8e\x59\x73\x50\x48\xf2\x44\x87\xc6\xc8\x95\xff\xe3\xe4\x5b\xcb\x99\x1e\x6c\x3b\x95\x3a\xde\x59\xf7\xce\xee\x9e\xd9\x1e\x6d\x8f\xac\xff\x57\xfe\x96\xe9\xea\xc7\xd5\x7f\x01\x00\x00\xff\xff\x05\x39\xc3\xb0\x53\x26\x00\x00")

func regoAbstractJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractJson,
		"rego-abstract.json",
	)
}

func regoAbstractJson() (*asset, error) {
	bytes, err := regoAbstractJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.json", size: 9811, mode: os.FileMode(420), modTime: time.Unix(1549410083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAttributeIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x51\x8f\xdb\x36\x0c\x7e\xef\xaf\x20\x82\x02\x05\xb6\x5e\xb1\x3d\xb6\x6f\x7d\xe8\x43\x81\x76\x1b\x86\x3d\xf5\x7a\x0d\x68\x9b\x4e\xb4\xca\x92\x8e\x92\x72\xc9\x86\xfb\xef\x83\x64\x3b\xb1\x73\x49\xec\xd8\xbe\xa4\xf3\xcb\x05\x36\x45\xe9\x23\xa9\x8f\x94\x78\xd0\x78\x66\x6e\x63\x68\xf6\x0e\x66\x3a\xf9\x9b\x52\x37\x7b\xfd\xa2\xf5\x35\x23\x9b\xb2\x30\x4e\x68\x15\x84\x3e\x09\xeb\x40\xe7\xb0\x22\xb6\x42\x2b\xca\x00\x9d\x63\x91\x78\x47\xf6\xcd\xfe\x58\xcc\x32\x11\x06\xa2\xfc\x83\xb5\x21\x76\x82\xec\xec\x1d\xe4\x28\x2d\xed\x89\x1a\x74\x8e\x58\xb5\xe4\xfe\x6d\x89\x44\xb1\x6f\xab\xdb\x5f\x6e\xde\xde\xfd\xfc\xf5\xe5\xc1\xef\x2d\x3c\xc8\x8c\x9b\xbd\x25\x75\xc1\xda\x81\x01\xa1\x00\xc1\x20\x3b\x91\x7a\x89\x5c\x23\x7e\x03\x1f\x1d\x3c\x08\x29\xc1\x5b\x02\x94\xb2\x39\x26\x67\x5d\x80\x5b\x12\x18\xa6\x95\xd0\xde\xd6\xa3\x2c\xa0\xca\x00\xb3\x0c\x34\x83\x5e\x11\x3f\xb0\x70\x14\x45\xb5\x22\x0b\x19\xa5\x12\x99\xb2\x7d\x13\x6e\xd7\x2b\x1c\x15\x87\x6d\xd2\xcf\x8f\xa7\xc0\xff\x49\x86\xc9\x92\x72\x61\x95\x3b\x38\xc1\x1e\x61\x81\x5c\x7f\xa6\x0c\x4a\xdd\xc7\x56\x19\x95\x33\xdd\x7b\xc1\x94\xcd\xde\xc1\xed\x51\xa9\x28\xa9\xb0\xa0\x13\x9a\x76\xa0\x3a\x64\x9a\x70\x8e\x4a\xde\x9d\x58\x72\xff\x38\x6d\x0d\x33\xa7\x83\xb5\x3d\x85\x94\xfa\x81\xb2\x79\xba\x44\xee\x16\x7f\x02\x2b\x7a\x69\x41\x6b\x03\x6e\x89\x0e\x10\xac\x63\xa1\x16\x0d\x67\x15\xde\x3a\x58\x6a\xa5\x19\x9c\x86\x84\x60\x85\x52\x64\x1d\xa6\x83\x66\xdc\x94\x2a\x8f\x5b\x30\x3c\x8f\x1d\xae\x68\xc1\x9c\x17\x64\x2d\x2e\x68\x10\xdc\xcf\xe5\x58\xa0\xb5\x91\x28\x54\x00\x5b\x06\x63\xb4\x42\xbd\x5f\xe2\x2e\x6d\x99\xf6\x6a\x80\xb5\x48\x7b\x04\xc2\x21\xa8\xef\x4b\x1d\xc1\x63\x3e\x90\x88\xe6\xa7\xfb\x70\x63\x08\x3e\x28\x5f\x9c\x83\xef\x14\x01\xb6\x06\x74\x93\xcb\x41\xfd\x95\xfd\xba\x27\x80\x06\xc3\x87\x81\xdf\x6e\xdf\xdf\x7c\xf9\xf5\xe6\xed\xdd\x2d\xde\xfc\xf3\xfe\xe6\x4b\xa0\xf4\x9f\xbe\xbe\x3c\xed\x89\xf0\x3c\x8e\xf3\x95\x77\x7a\x41\x8a\x18\x5d\xa4\xa7\xf3\x3d\xf5\xd7\x92\x1a\x7e\x11\x16\x5a\x2a\x21\xd9\xc4\x18\x4d\x30\xfd\x4e\xea\xac\xbd\x97\x68\x2d\x09\x4f\xd0\x57\x1f\x7c\x29\x13\x86\x95\xce\xb5\x92\x9b\x09\xf0\xa5\xa8\x20\xa8\x0a\x6c\x62\xc9\x41\xe6\x23\xe7\xc4\x69\x08\x02\xf7\xc5\xe9\x2e\x8e\x33\xa3\x1c\xbd\x74\x73\xcd\x19\xf1\x60\x9c\x71\xb7\xd5\x39\xae\xe5\x54\x6f\x43\x59\x13\x92\x72\x9c\x07\xe2\x3c\x01\xf9\x77\xea\xb5\x9d\x9e\x05\x6c\x5c\xee\x60\xb0\x35\x94\xc3\xa0\xcf\x00\x75\x5b\xb3\xca\x0e\xde\x6b\x98\x09\xe5\x68\x41\x1c\x7e\x2a\x2f\x65\xf9\xb7\x48\xca\x37\x75\x3d\xb2\x25\x8c\xbb\x91\x06\x31\x4c\xe9\x74\x5b\xb8\xa1\xef\xf2\xbe\x6d\x2e\x6d\xa8\x67\xb7\xaf\xc6\xf8\x75\x92\x64\x48\x6b\x2c\x8c\xa4\x11\xb1\xfa\xa1\xd4\x50\xc5\x69\xc8\x84\xff\xdf\x40\xa5\xb5\xd1\x76\xaa\x28\x35\x3e\x91\x22\x95\x1b\xa8\xb5\x0e\x88\xd5\x1e\x43\x2a\x9e\x08\xa3\x1c\x7b\x1a\x1b\x0e\x8e\x54\x3c\xfd\x0c\xb2\xc1\xef\x06\xef\x3d\x05\xd2\xad\xc2\xc1\xa0\x60\x5b\x16\xc0\x21\x35\x25\x54\x32\x75\xb2\x81\x54\x17\x46\x48\xe2\x27\x47\xd0\x83\xf3\xec\x1d\x94\x46\x61\xcc\x85\x74\xc4\x98\xc8\xe1\xdc\xdc\x4e\xb8\x35\xaa\x10\xfb\xa5\xf2\x90\x79\x8c\xe7\xe0\xf6\xb3\xca\xdb\x49\x28\x2a\xd7\x4c\x62\xa1\xe6\x21\xf5\x4d\x53\x31\x41\xa5\xf2\x2a\xd9\x74\x41\xa1\x08\x9d\x00\x49\xbc\x01\x58\xe2\x8a\x00\x61\x57\x00\x56\xea\x2f\x8d\x4a\x64\xa4\x9c\xc8\xc5\x24\xc8\x1a\x05\x10\x42\x81\x42\x41\x43\xfd\xf3\xb0\x8e\x57\xe2\xde\xd3\xc7\xea\x14\x12\x88\x67\x94\x39\x0a\x5c\xcf\x25\xa9\x85\x5b\x0e\x36\x47\x81\x6b\x51\xf8\x02\x4a\x35\x4f\xab\xc4\xfa\x48\xd6\xfb\x08\xb4\x35\x4b\x9d\x81\x46\x23\x1c\x57\x10\xd6\x00\x8f\x54\xc1\x35\xbe\x6d\xbe\xbc\x34\x40\xa1\x46\xbb\x50\xa8\x1f\xda\x85\x42\x8d\x75\x61\x05\xf0\x07\x75\x61\xbc\xdd\x1b\x8a\x2d\x0c\xbe\x7a\x39\xab\x0b\xe1\xe6\x54\x18\x37\x2c\xf5\x7d\xcc\x23\x95\xbd\xde\xf3\x4b\x95\xe4\x33\xd6\xc6\x50\x06\x22\x87\x38\x05\x68\x86\xb2\x24\xbd\x70\xf2\x88\xa7\xdb\x67\x2a\x60\xb6\x27\xe7\xab\xd5\x2f\x86\x45\x81\xbc\x99\xae\x7e\x29\x73\x23\x54\x7a\xaf\x52\xc4\x30\x61\x36\xd5\x1d\x8f\xb0\x10\xd4\xc5\x7b\x9e\x2b\x00\xd9\xb6\x0a\x26\xc1\x51\x69\xbb\x34\x0c\x4b\x29\x93\x9b\x06\x44\xa9\x2b\x76\x8b\xec\x52\x7b\x99\x45\xae\x20\x94\x0e\x1e\x84\x5b\x42\x8a\x7c\x16\x0f\x4e\x04\xf0\x59\xab\x66\x7b\x9d\xaa\xd9\x3a\x3d\x59\xec\x55\xba\x9e\xfb\x50\x3e\xba\x34\xb6\x3e\xa9\x16\x30\x2e\x2f\x17\x68\x4c\x6c\xc9\x68\x30\x22\xfd\x1e\xc9\xfe\x61\x49\x2a\xe6\xba\xb2\xec\xb0\xf1\xce\xd8\x69\x78\x45\x6b\x47\xac\x50\xbe\xba\x74\x02\x77\x8c\xca\x0a\x52\x13\xed\xcd\x9d\xba\x4b\x87\xea\x28\x9f\x45\x77\x34\x7b\xdb\x03\xdc\xd0\x63\x04\x29\x5f\x74\xf6\x7c\xb7\xd2\xe7\xf5\x8e\xfa\xd7\xb0\x51\x3c\x97\x1a\xfb\x38\x29\x0a\xf7\xdf\x88\xb0\x85\xd9\x53\x56\x0a\xdb\x7b\x19\x9d\x5d\xfb\x96\xb4\x13\x9d\xad\xf3\xad\x6c\xbd\xfd\xfa\xca\x33\xe5\x67\x88\x7e\x3a\x03\x23\x53\xfe\x19\x4d\x77\x9b\x6f\xdc\xbd\x6b\x6c\x7c\xc7\xce\xd4\xb0\x7b\xc7\xdf\x2a\x8e\x43\x48\xbd\x75\xba\x80\x9d\xc2\xdd\x3f\x78\xcc\x9b\x2f\x85\xa4\x40\x74\x68\x8c\xdc\x84\x1f\x83\x4f\x2d\x17\xea\xd8\x76\x0e\xea\xe8\xb3\x1e\xfd\x7a\xf8\xcb\xd3\xb7\xed\x37\x8f\x2f\xfe\x0b\x00\x00\xff\xff\x7e\x0d\x3a\x43\x90\x24\x00\x00")

func regoAttributeInBytes() ([]byte, error) {
	return bindataRead(
		_regoAttributeIn,
		"rego-attribute.in",
	)
}

func regoAttributeIn() (*asset, error) {
	bytes, err := regoAttributeInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-attribute.in", size: 9360, mode: os.FileMode(420), modTime: time.Unix(1547059967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoInfoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x4e\xc3\x40\x0c\xc7\xf7\x3c\x85\x75\x30\xb6\x0d\x13\x43\x36\xc6\x0e\xa0\x4e\x2c\x88\xc1\x4d\x7c\xad\xab\x34\x77\xd8\x0e\x02\x55\x7d\x77\x74\xb9\xa6\x4a\x3f\x36\x96\x44\xf9\xd9\xff\x8f\xf8\x50\x00\x00\xb8\x47\xad\xb7\xb4\x47\x57\x81\xdb\x9a\xc5\xaa\x2c\x77\x1a\xba\x79\xa6\x8b\x20\x9b\xb2\x11\xf4\x36\x7f\x7a\x2e\x33\x7b\x70\xb3\xac\x34\xb6\x96\x92\x6e\xd9\xf9\x30\xc2\x86\xb4\x16\x8e\xc6\xa1\x4b\xa3\x57\x32\x04\xee\x7c\x90\x3d\x26\x06\xb8\x0e\xbd\x01\x82\x92\x41\xf0\xa0\x91\x6a\xf6\x5c\x0f\x43\x5d\x9c\xad\x7f\xe3\xe0\x1c\xd6\x3b\xaa\x6d\xa4\xd8\x34\x9c\xf6\xb0\x5d\x49\x88\x24\xc6\xa4\xae\x02\x8f\xad\xd2\x69\x45\xe8\xab\x67\xa1\xc6\x55\xf0\x31\x90\x81\x46\x21\xcf\x3f\x27\x9b\xbc\x17\x82\x4d\xbf\xbf\x49\x34\x55\x1e\xc8\xe7\xac\x28\x4e\xba\x49\xcc\xe1\xc6\x6f\xca\x2e\x6a\xab\x09\x77\x9b\x89\xff\xbd\xd3\xac\x06\x13\xb0\x00\xbd\x52\x7a\xd5\xd8\xb6\x80\x91\xd5\x9d\x75\xc7\xeb\xca\xff\x8b\x7c\xc3\x3d\xa5\xab\xdb\x96\x20\xd9\x5d\x9e\xff\x56\xec\xb1\x6f\x53\x66\xce\xbe\xdb\x6a\x3c\xdc\x4d\xb1\xab\xe8\xf7\xbc\x37\xa6\xbf\xac\x96\xd7\x71\xe3\x9f\x70\x67\xb4\x21\x99\xc4\x15\xf9\x79\x2c\xfe\x02\x00\x00\xff\xff\xb8\x06\xde\x01\xb3\x02\x00\x00")

func regoInfoJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoInfoJson,
		"rego-info.json",
	)
}

func regoInfoJson() (*asset, error) {
	bytes, err := regoInfoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-info.json", size: 691, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoParamIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcb\x6e\xdc\x3a\x0c\xdd\xe7\x2b\x08\xaf\x83\xfb\x01\x59\x27\x8b\x0b\xb4\xc5\xa0\x0d\xba\x09\x82\x80\xb6\x39\x33\x2c\xf4\x70\x25\x39\x0f\x14\xf9\xf7\x42\xf6\x78\x62\x8d\x2d\x5b\xb6\x51\xb4\xde\x0c\x6c\x91\x47\xd4\xe1\x21\xc5\x81\xde\x93\x39\x76\x82\xb2\x1b\xc8\x76\x68\x50\x92\x23\x03\xdf\xc8\x65\xd7\x57\xa1\xd5\x5b\xd5\x18\xe9\xfc\x07\x15\x83\x55\x2c\x4b\x76\xac\x15\x8a\x9d\xd1\x15\x19\xc7\x64\xb3\x1b\xd8\xa3\xb0\x74\x61\x5a\xf5\x0d\x7e\x05\x6b\xcd\xba\xa1\x9f\x35\x1b\x2a\x47\x57\x23\x01\x5b\xf8\xda\x7a\x49\x52\xce\xc2\xdd\x6b\x65\xc8\x5a\xd6\xca\x5e\x04\x7a\xc6\x28\xc9\x16\x86\x2b\x1f\xb3\x47\xba\xa5\x3d\x2b\x82\x97\x23\x3a\x28\xb4\xcc\x59\xa1\x5f\xb2\xa0\xf7\x50\x7d\xec\x82\x86\xa0\x8b\xef\xbf\x18\x74\xc7\x14\x1a\x83\x6f\x31\x23\x76\x24\xc7\x09\x58\x84\x93\x88\xb5\x08\x6f\x01\x66\x80\x6b\x9d\x61\x75\xc8\x26\x1d\xde\xa3\xab\xe3\x2b\xc3\xaf\xef\xc3\xc0\x33\x52\xce\xc4\xf4\x04\x81\x62\x3e\xb1\x75\x3e\xa7\x1f\xca\x49\x16\x88\x7f\xcd\x09\xdc\x91\x40\x9c\x50\xf0\x19\x59\x60\x2e\xa8\xa7\x91\x3f\x2f\x8b\x81\xfa\xa7\xb4\x11\x3b\x06\x82\x65\x75\xe8\x47\x3e\x85\x32\x59\xfc\x81\x65\x7a\x23\x08\xdc\x7a\x45\xff\x30\x2d\x4c\x85\x92\xe6\xc4\xdb\x3f\xf4\x8c\x69\x73\xb2\xa8\xc9\xe3\x44\xc8\x33\x7d\x6c\x18\x74\x5a\x31\x0d\x9b\xf1\x97\xf9\x13\xc3\x48\xaa\xbd\x9b\x17\xa9\x17\xec\x39\xc9\x31\x75\x86\x31\x2c\x29\xe8\x05\xa9\x58\x4b\xc0\x6d\x72\x3a\x47\xb6\xcc\x7a\xde\x7f\x9f\x8e\x13\xd6\x3a\x1e\xee\xbd\xf3\x72\x02\xee\x8f\x04\x7e\xdf\xe0\x2e\x5b\x73\xf2\x04\x0f\x52\xb5\x9c\xad\xe1\xb3\x75\x32\x6e\x63\xcd\xca\xd1\x61\xb2\x4f\x05\xe6\x7b\xa1\x71\xaa\x55\x05\xc6\xb9\xd6\x82\x30\x45\x5e\x70\x3e\x66\xa2\x6d\x59\x1b\x4c\x94\x2e\xb4\x89\x97\x13\x1d\xa9\x7b\x1e\x37\xc9\x50\xd6\xc2\x71\x25\xd6\x4b\xf1\x73\x0b\xc0\x05\xbb\xb9\x51\x02\xa2\xe3\x96\x05\xbe\xa8\x47\x28\x50\x41\x4e\x60\x49\x39\xe8\x82\x04\xcf\x48\xf4\x5e\x0d\x23\x3d\x09\xb6\x4b\xe7\x26\x92\x50\x08\xfd\x42\xe5\x53\x71\xd4\x5c\x24\x74\x79\x88\x70\xb5\xd3\xd6\xb2\x20\xf8\x8e\xa2\xa6\xd8\xbc\x11\x80\x5c\xb0\xf5\x7f\xcb\x52\x53\xc3\x6c\xc1\x8b\xef\xba\x99\x41\x2c\xa0\x10\x2d\x83\x7e\x0f\x3f\x88\x3c\x27\x6f\xb2\x64\x1c\x84\x65\x23\x21\x2c\x6d\x9b\x30\x39\x1a\x42\xd2\x3d\xb3\xc7\x5a\xb8\xa7\xe6\xfc\x1b\x6e\x9a\x06\xa5\x4d\xd5\x3a\x5d\x37\xfe\x4d\x14\x83\xdb\xc6\xcb\x5d\x4b\x76\x8e\xca\x05\x09\x7a\xe8\x32\xd4\xeb\x52\xbd\x66\x08\x99\xaa\x85\x68\x7f\x65\xde\x7e\xe9\xc6\xb4\x33\xf9\xdb\xba\x05\xbd\xa2\xac\x04\x6d\xe4\xf6\xae\x45\x59\xcd\x6d\xe7\x3f\xce\xed\xbf\x45\xe8\xf6\x7f\x39\x57\xe1\xdb\xef\x00\x00\x00\xff\xff\x76\x36\xe8\x20\xb1\x0f\x00\x00")

func regoParamInBytes() ([]byte, error) {
	return bindataRead(
		_regoParamIn,
		"rego-param.in",
	)
}

func regoParamIn() (*asset, error) {
	bytes, err := regoParamInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-param.in", size: 4017, mode: os.FileMode(420), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x31\x6f\xc2\x30\x10\x85\x77\x7e\xc5\xc9\x74\xaa\x0a\xee\xd4\x81\x8d\x81\xb1\x12\xa2\xec\x91\xb1\x9f\x6b\xa3\x60\x5b\xe7\x5b\x50\x95\xff\x5e\x39\x29\x69\xd3\x2d\x79\xf7\xbd\x7b\xe7\xf7\xb5\x22\x22\x52\x4f\xd5\x06\xdc\x8c\xda\x91\x0a\x22\x65\xa7\xf5\xb5\xe6\xb4\x99\xd4\x6d\xe6\x4f\xed\xd8\x78\xd9\xbc\xbe\xe9\x49\x5b\xab\x97\xc9\x29\x51\x7a\x34\xdf\x47\x30\x0c\x47\x47\xc3\xe6\x06\x01\xd7\x07\xe1\x50\x2d\xc7\x22\x31\xa7\xc6\x9d\x03\xa8\xcc\x10\x39\xf8\x98\xe0\x28\x80\x41\xd6\x24\xba\x80\x18\x1e\x0c\x8b\x64\xe1\xe8\x72\xa7\x2c\x01\x4c\xb5\xc0\x46\x1f\xad\x69\x9b\xea\x76\x3e\xe0\x5e\xc6\xfc\x7c\xb9\xc2\xca\x43\x35\xce\xc5\xc6\x99\xfe\xc8\xb9\x80\x25\xa2\xaa\x1d\x79\xd3\x57\xfc\x20\xc5\x88\x80\xd3\x62\x3e\xd5\x31\x8e\xb7\xcf\x8b\xff\xa9\x26\x86\x6f\x59\x6b\x3d\x9e\x3d\x26\x54\xfd\xfb\x1a\x35\xe3\xc3\xf8\x35\xcc\x15\xcc\xf4\x32\xe4\x8f\xb5\xe9\x5d\x77\xdc\x9f\xf6\xef\x87\xf3\xe1\xd4\x75\xff\x77\xad\x86\xd5\x77\x00\x00\x00\xff\xff\xc9\x23\xe7\x9b\xae\x01\x00\x00")

func regoSharedParamsInBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsIn,
		"rego-shared-params.in",
	)
}

func regoSharedParamsIn() (*asset, error) {
	bytes, err := regoSharedParamsInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.in", size: 430, mode: os.FileMode(420), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xdc\x38\x0c\xbd\xcf\xaf\x20\x9c\x3d\x2d\x92\x99\x3d\xed\x21\xe7\xe4\x50\xa0\x2d\x82\x26\xe8\x25\x08\x02\xda\xa6\xc7\x0a\x64\xc9\x95\x38\xf9\x40\x31\xff\xbd\x90\x34\x76\xec\xf8\x7b\x06\x45\xdb\x4b\x63\xe9\x91\x22\x1f\x9f\x28\xce\xcf\x15\x00\x40\xf4\x8f\x4d\x72\x2a\x30\xba\x84\x28\x67\x2e\x2f\x37\x9b\x27\xab\xd5\x45\x58\x5d\x6b\xb3\xdd\xa4\x06\x33\xbe\xf8\xef\xff\x4d\x58\x3b\x8b\xce\x83\x25\x0b\x96\xe4\xec\x6e\x73\x34\x94\xc2\x0d\x1a\x2c\x88\xc9\xd8\x0a\x91\x92\x4d\x8c\x28\x59\x68\xe5\x70\x77\x39\x41\x59\x83\x20\xa5\x4c\x28\x4a\x21\x27\x43\x90\xa0\x82\x98\xc0\x50\x46\x86\x12\x52\x09\xa5\x10\xbf\x81\xe6\x9c\x0c\xd8\x92\x12\x91\x89\x04\x9d\x27\xbb\xae\x03\x78\x2b\xfd\xf9\x3a\x7e\xa2\x84\xab\x55\x4c\x53\xe1\x70\x28\x6f\x8c\x2e\xc9\xb0\x20\x1b\x5d\x42\x86\xd2\xd2\x01\x52\x22\x33\x19\xd5\xda\x0f\x74\xf8\xed\xf5\xbf\xad\xef\x40\x93\xa1\xcc\x9d\x75\xb6\xf1\x61\xfb\x13\xec\xe6\x3d\x9b\xa8\x86\xef\xfd\x5f\xfb\x9a\x82\x1a\xdd\x3e\xa4\x61\xda\x39\xac\x66\xb6\xa6\x14\x6e\xa9\x4a\xf0\x1d\xd5\x97\x7e\xbd\x3b\x4d\xc3\x7b\x28\xfd\x3c\xd4\xfb\x86\x7e\xec\x84\xa1\xb4\x77\x77\x20\x60\x0b\xdf\x82\x55\x41\x8a\x2d\x5c\xbf\x96\x86\xac\xf5\x34\x9c\xf7\xfb\xf8\x20\x96\x2b\xaf\x0e\x78\xc9\x91\x21\xd1\x45\x2c\x54\xa8\x3e\xe8\xac\x29\x22\x34\x4e\x34\x21\xbe\xf5\x90\xeb\x8a\x29\x34\x06\xdf\x86\x40\x82\xa9\xe8\x27\x60\x91\x9f\x99\xbe\x16\xf9\x5b\xe0\xb3\xe5\xd7\xb2\x11\x6a\x1b\x8d\x1a\xec\x07\x77\xfb\x77\xba\xab\xfb\x6e\xe0\x11\x29\x36\x43\x7a\x82\x96\x62\x3e\x0b\xcb\xae\xa6\x9d\xee\xd1\x31\xe9\x08\xc4\x7d\xc6\x04\x9c\x13\xc8\x83\x17\x7c\x46\x21\x31\x96\xcd\x46\xf3\xfb\x65\xd1\x51\xff\x98\x36\x86\xd2\x40\xb0\x42\x6d\x9b\x91\x8f\x79\x19\xbd\xfc\x2d\xe4\xfc\x46\xd0\x32\x6b\x5c\xfa\xfb\x71\x61\x2a\x2c\x68\x4a\xbc\xcd\xa4\x27\xa0\x3e\xb3\x41\xc8\xc3\x48\xc8\x13\x7d\xac\x1b\xf4\xbc\xcb\xd4\x6d\xc6\x5f\xa7\x33\x86\x9e\x52\x3b\x33\x27\x52\x6e\xbe\x83\x43\xea\x6c\xc7\xb0\xe4\x42\x2f\x28\xc5\xb1\x04\x5c\xcd\x2e\x67\xcf\x91\x51\xc3\xfa\xcf\xd3\x71\xf0\x75\x1c\x0f\x77\xce\x78\x39\x01\x6e\x10\x72\xe7\xb6\xde\xb2\x63\x32\x9f\x61\x41\x6a\x57\x4c\xde\xe1\x1a\x3d\xdb\xaf\x47\x0b\xc5\xb4\x1d\xed\x53\x2d\x78\x26\x35\x8e\xb5\xaa\x16\x38\xd6\x5a\x12\xce\x91\x17\xd4\x69\xce\xc4\xa6\x3b\x83\x33\xa5\x0b\xa1\xf0\xc5\x48\x47\xaa\xfe\x3d\x9c\x24\xc3\x62\x27\x59\x94\xf2\x78\x29\x7e\x09\x0e\x44\x22\x78\x6a\x94\x80\xc1\x71\xcb\x82\xf8\x70\x1f\xab\xc1\xdc\x92\x62\xa8\x82\x04\xc7\xc8\xe0\xbb\xda\x8e\xf4\x20\xd8\xaa\x9c\x27\x91\x84\x52\xea\x17\x4a\x1f\x93\x5c\x8b\x64\x46\x97\x87\x01\xae\x6e\xb4\xb5\x42\x12\x7c\x47\xb9\xa3\xa1\x79\xa3\xe5\xe4\x03\x5b\x9f\x02\x4b\xfe\x0e\x0b\x0b\x4e\x7c\xe7\x7e\x06\xb1\x80\x52\x06\x06\xdd\x19\x6e\x10\x79\x9e\x7d\xc8\x92\x71\x10\x96\x8d\x84\xb0\xb4\x6d\xc2\xe8\x68\x08\xb3\xde\x99\x0c\x77\x92\x1f\x7d\xfe\x27\xbc\x34\xde\x4b\x28\xd5\x71\xba\xf6\xf6\x3e\x8a\xce\x6b\xe3\xe4\xae\x0b\xc1\x4c\xe9\x82\x02\xdd\x57\x15\x6a\x74\xa9\x46\x33\x84\x48\xed\xa4\x0c\xff\x17\x71\x58\xa9\xc6\xb4\x9a\xfc\xd3\xba\x05\xbd\x62\x51\x4a\x3a\x91\xdb\xeb\xe0\xe5\x68\x6e\x2b\xfb\x7e\x6e\xff\x2e\x42\x4f\xff\x95\xb3\xea\xff\x3a\xfc\xdc\x5f\xed\x57\xbf\x02\x00\x00\xff\xff\xa9\xb8\x42\xf1\x51\x11\x00\x00")

func regoSharedParamsJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsJson,
		"rego-shared-params.json",
	)
}

func regoSharedParamsJson() (*asset, error) {
	bytes, err := regoSharedParamsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.json", size: 4433, mode: os.FileMode(420), modTime: time.Unix(1549410083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xcd\x8e\xdb\x36\x10\xbe\xef\x53\x0c\x94\x1e\xbd\x71\x4f\x3d\xf8\xe6\x36\x8b\x36\x40\xd3\x2e\x5c\xf7\x54\x04\xc6\x58\x1c\xd9\xcc\x52\x22\x43\x52\xbb\x31\x02\xbf\x7b\x41\xea\xdf\xa2\x64\x39\xdd\x75\xb1\xb9\x04\xce\x90\x33\xfc\xf8\x0d\xe7\x4f\xfb\xf5\x06\x00\x20\xfa\xc1\xc4\x7b\x4a\x31\x5a\x40\xb4\xb7\x56\x2d\xe6\xf3\x4f\x46\x66\xb7\x85\xf4\xad\xd4\xbb\x39\xd3\x98\xd8\xdb\x1f\x7f\x9a\x17\xb2\x37\xd1\xac\xd0\xb4\xdc\x0a\x72\x7a\x7f\x29\x8a\x79\xc2\x63\xb4\x5c\x66\xd5\x2a\x23\x13\x6b\xae\xbc\x68\x01\xd1\x8a\x94\x26\x43\x99\x35\x80\x19\xc8\xed\x27\x8a\x2d\x3c\x71\xbb\x07\x14\x02\xb8\x13\x5b\xab\xf9\x36\xb7\xe4\x76\x30\xd0\x24\xbc\x3d\x53\x1f\x77\x50\xfe\xb4\x42\xb7\x92\x22\x63\xdc\x6d\x43\x71\xaf\xa5\x22\x6d\x39\x99\x68\x01\x09\x0a\x43\xe5\x16\x4d\x9f\x73\xae\x89\x45\x0b\xf8\xc7\x4b\xbc\x34\x95\x8c\x44\xe4\xff\xff\xb1\xdc\xa8\xda\x16\xbe\x36\x5b\x1b\x64\x1d\x79\x41\x9f\xa6\xc4\xa1\x7a\x33\x67\x94\xf0\xcc\x63\x31\xf3\x96\x46\xbd\xfd\x38\x6b\x2c\x36\x97\xeb\x19\xac\xae\x89\x5a\xe3\x21\x9a\x75\x17\x4f\x48\xfd\x9d\x1b\x0b\x32\x69\xb8\x82\x2d\xd9\x27\xa2\x0c\xec\x9e\x40\x57\x94\x13\xab\x08\x77\xc4\x4a\xbb\x27\x0d\x32\x23\xf3\xf6\xd4\x3c\xb7\x94\xf6\x21\x8d\xdc\xb3\x3a\x38\xea\x28\x1c\x83\x77\x2e\x08\x9f\x48\x60\xcb\x3b\x8d\xc5\x63\xfd\xb4\xea\x8d\x5d\x47\x0d\x1c\x51\x3f\xd4\x0f\x7e\x7d\x9c\xd3\xdf\xa4\x60\x06\xb6\x68\x78\x0c\x3c\x4b\xa4\x4e\xfd\x0d\x1d\xcd\x61\x52\x7b\x2c\x06\x1f\x6a\xbd\x7a\xfe\xc1\xb6\x5e\x49\xe0\xe1\xd6\xab\x0a\xe3\x07\xdc\xd1\x89\xfd\x52\xd1\xd8\x4d\x86\xe9\xd0\xa2\xcc\x75\x4c\x83\x1b\x28\xb3\xdc\x1e\x06\x97\xdb\x7c\x05\x96\x77\x5a\xe6\xaa\xfb\x1e\x3e\xce\x6e\xba\x17\x1b\x08\xb4\x86\x23\xc1\xd1\x0c\x2c\xf6\x30\xb4\xe2\xa0\xd4\x03\x2b\x1b\x3f\x01\x82\x69\xe7\xa7\x53\x77\xd5\x36\xc7\x02\xaf\xde\x34\x1c\x21\x3d\x3b\xc6\x6a\x9e\xed\xa2\xe0\xc6\x63\x4f\x7a\x0c\x50\x99\x2b\x86\x96\x86\x59\x18\x8f\x49\x8c\xfb\x91\x39\x74\x12\x23\x41\xd7\x3a\xa9\xed\xb9\x69\xee\x5d\xef\x09\x5a\xa2\xe9\xa1\x58\x1b\x3c\xe7\x93\x10\xd2\x76\x18\x4c\x45\xfa\x0b\xa6\x24\x6e\x63\x34\xc4\xe0\x91\xb4\xe9\xa0\x2d\x63\xf2\x79\x41\x7e\xb1\x94\xb1\xcb\x23\x65\x8b\x86\xba\x71\x01\x76\xcf\xcd\x89\xa8\xb4\x0e\xaf\x2a\x6a\x3c\x68\x13\x2c\xae\x43\xac\xfc\xa9\xf0\x73\x4e\xf0\x40\x07\x78\x44\x91\x13\x28\xe4\xda\x80\xdd\xa3\x85\x18\x33\xd8\x12\xe4\xce\xa5\xdb\x03\xc4\x32\x55\x5c\x90\xee\x15\xcf\xde\x4d\xca\xf4\x3f\x09\x33\xcf\x18\x7d\xf9\x86\x84\xe7\xd0\xc8\x3c\x63\x50\x19\xb8\x92\x97\xc6\xec\x4c\xb4\x05\x53\xbd\x0e\x41\xcf\x87\xa5\x21\x6e\x77\x64\xaf\x91\xd8\xaa\x72\x7c\x49\x52\x73\xe9\xa0\xca\x0f\xa5\xfe\x95\x92\x5b\x51\xa5\x2f\xc1\xea\x35\x2a\x74\xa8\xf8\xb3\xc2\x51\x9a\x3f\x8e\x96\xba\x00\xa0\x40\x7b\xcb\x0d\x94\x96\xce\xa2\xdb\x4a\x29\x08\x27\xfa\xb6\xdb\x32\x5d\x02\x52\x89\x5c\xa3\xb8\x4e\x2d\x68\xba\xbe\x4b\x10\xe6\x19\x77\xb9\xcf\x3f\xc5\x9a\x52\x9e\xed\x3c\xd0\x17\x78\x79\x5a\xca\x91\x78\x9c\xe6\x67\x8c\xdd\xbc\x68\x0a\x2e\xa5\xb4\x17\x76\x78\x17\xf9\xfe\x11\x05\x67\x03\xc3\xda\x10\xec\x3f\xca\xb8\x46\x88\x73\x63\x65\x0a\x8d\x11\x48\xb4\x4c\x3d\xf0\x4d\x5b\xc8\x05\xb9\xae\x15\x95\x12\x07\xf7\xa3\x21\xff\xf5\x14\x5e\x46\x16\xe3\xbd\x1f\x57\xa6\xd1\xf4\x3e\x01\xab\x73\x9a\xb9\xea\xe5\x7c\x47\x85\x47\xab\x12\x5b\xd4\x5f\xdf\x96\x34\xf1\x5d\x1d\xd2\xf0\x88\x8a\x7f\xbb\xc3\x27\xcc\xad\x0a\x35\xa6\x64\x49\x17\x44\x6e\x36\xf7\xcb\xd5\xf2\xc3\xdd\xfa\x6e\xb5\xd9\x04\x15\x4e\x3e\x17\x6c\x36\xcb\xf5\x7a\xf5\xfe\xe7\xbf\xd7\x77\x03\x0a\xf5\x14\x3d\x3c\xb9\xae\xaa\x2d\xe3\xc3\xeb\x52\x08\xf9\xe4\xe7\x1f\x46\xb1\x40\x4d\x80\xf5\xc7\x81\xe6\xdb\xc0\x93\xec\x06\x4c\xff\x43\xc0\x95\x46\xd8\x26\x63\xfd\xb7\x79\xf1\xf2\xcc\x57\x6b\x14\x8d\x1d\x1a\x40\x10\x3c\x7b\xa8\x62\xcf\x93\x56\x27\x9c\xe7\xcc\x7f\xb1\xa6\xef\x6e\xa8\xbb\x52\x8b\xf5\x42\xf3\xf0\x84\x1c\x70\x62\xe3\x7c\x9c\xc2\x32\x9e\x10\xae\x9d\x0f\xa7\x45\xc1\x28\x4e\x28\x7e\x57\xa7\xfe\x5f\xe1\xd9\x46\x7b\x1a\xa0\x9d\x8d\xe7\xe2\x73\xd2\xd0\xdf\xe7\xf0\xdd\xe8\x97\xa6\x10\xa1\xef\x42\x5f\x09\xc2\x24\xf6\xc8\xbc\x24\x88\x99\xeb\x49\x5c\xc5\x1a\x29\x76\xa1\xfb\x38\x2d\x1e\x4a\xe4\x43\x17\x5a\x93\x10\x06\x78\xf7\x2a\x45\x1d\xac\x11\x3c\x67\xb7\xb3\x13\x72\x8b\x62\x73\x52\xf3\xc6\xef\xf7\xab\xd7\x81\xfb\x5a\x07\x56\x94\x90\xa6\x2c\x1e\x1e\x48\x7b\x7f\x1d\x28\x15\x5c\xfe\x2d\x30\x40\x83\x01\x7c\x38\x93\x9b\x72\x8b\xce\xa9\xb5\xe4\x3a\xa7\xd7\xd3\x22\x4d\xe1\x35\x9c\xc5\x5a\x9a\xd3\x33\xd8\x4d\xf1\xef\xf1\xe6\xdf\x00\x00\x00\xff\xff\x12\xc6\x7c\x90\xec\x19\x00\x00")

func regoSpecInBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecIn,
		"rego-spec.in",
	)
}

func regoSpecIn() (*asset, error) {
	bytes, err := regoSpecInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.in", size: 6636, mode: os.FileMode(420), modTime: time.Unix(1549402042, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1c\xdb\x8e\xdb\x36\xf6\x3d\x5f\x71\xe0\x06\x28\xb0\x3b\x93\xe9\xbe\x2c\xd0\xbc\x05\x9b\x60\x37\x40\xd3\x0d\xd2\x62\x1f\x3a\x98\x1a\xb4\x74\x64\xb3\x43\x91\x2a\x49\x79\xec\x2d\xe6\xdf\x17\x24\x45\x5d\xac\x1b\x65\xcb\x76\x66\xd1\x79\x48\x66\x24\xf2\xf0\xdc\x2f\xe4\xa1\xfe\x78\x05\x00\xb0\x78\xad\xa2\x0d\xa6\x64\xf1\x16\x16\x1b\xad\xb3\xb7\x77\x77\xbf\x29\xc1\x6f\xdd\xd3\x37\x42\xae\xef\x62\x49\x12\x7d\xfb\xdd\xdf\xef\xdc\xb3\x6f\x16\x37\x6e\xa6\xa6\x9a\xa1\x99\xf7\x53\x86\x11\x4d\x68\x44\x34\x15\xdc\xbf\x8d\x51\x45\x92\x66\xf6\xd1\x5b\x58\x7c\xc1\x4c\xa2\x42\xae\x15\x10\x0e\x62\xf5\x1b\x46\x1a\x9e\xa8\xde\x00\x61\x0c\xa8\x79\xac\xb5\xa4\xab\x5c\xa3\x19\x11\x83\x44\x66\xe1\xa9\x72\xb9\x7d\x66\x57\x73\x73\xfd\x53\x12\xc7\xd4\x0c\x23\xec\xb3\x14\x19\x4a\x4d\x51\x2d\xde\x42\x42\x98\xc2\x62\x88\xc4\xdf\x73\x2a\x31\x5e\xbc\x85\x7b\xfb\xc4\x3e\x4d\x45\x8c\x6c\x61\xff\x7e\x28\x06\x66\x75\x08\x7f\x54\x43\x2b\xcc\x1a\xcf\x1d\xfb\x24\x26\x06\xab\x6f\xee\x62\x4c\x28\xb7\xb8\xa8\xbb\xda\x8c\x72\xf8\xf3\x4d\x05\xb1\x22\xae\x05\xd0\x93\x49\xa4\x24\xfb\xc5\x4d\xf3\xe5\x01\x53\x7f\xa0\x4a\x83\x48\x2a\x5e\xc1\x0a\xf5\x13\x22\x07\xbd\x41\x90\x9e\xe5\x18\x7b\x86\x1b\xc6\x0a\xbd\x41\x09\x82\xa3\x7a\x73\x08\x9e\x6a\x4c\xdb\x28\x0d\xd0\xe9\x17\x5e\x34\x26\x3c\x77\xd2\xec\x18\x1e\xc8\xc0\x9a\x74\x2a\x88\xcf\xa5\x6a\x95\x03\x9b\x82\xea\x59\xa2\x54\xd4\x4f\xf6\xfd\x30\x4f\xff\x25\x58\xac\x60\x45\x14\x8d\x80\xf2\x44\xc8\xd4\x52\x68\xd8\xdc\xcd\xd4\x16\x17\x3b\x15\xb5\x7c\x3b\xae\xb0\x35\x2d\xe9\x50\xdc\xf2\x6d\x46\xa2\x47\xb2\xc6\x03\xf8\xc5\x44\xa5\x97\x9c\xa4\x7d\x2f\x45\x2e\x23\xec\x1d\x80\x5c\x53\xbd\xef\x7d\x5d\xe7\x57\xc7\xeb\xb5\x14\x79\xd6\xd4\x87\x87\x9b\x57\x4d\xc2\x7a\x0c\xad\xe2\x11\xa3\x44\xf5\xbc\x6c\xe1\x50\xb3\x83\x62\x1e\x68\x51\xc9\x09\x08\xa8\xba\x7f\x3a\x14\x57\x09\x73\xc8\xf0\xca\x41\xfd\x16\xd2\x82\xa3\xb4\xa4\x7c\xbd\xe8\x1c\xf8\xdc\x7a\xfa\xdc\xc1\xca\x3c\x8b\x89\xc6\x7e\x2e\x0c\xdb\x24\x89\xda\x96\xd9\xb7\x52\x8c\x0c\x2f\xb5\x52\x5d\x72\x61\xe2\xfd\x79\x83\x50\x7b\x14\x6e\x8a\x25\xc0\x31\x99\x74\x61\x5a\x37\x83\x50\x4c\xff\x41\x52\x64\xb7\x11\x51\x18\xc3\x16\xa5\x6a\x60\x5b\xd8\xe4\xbc\x48\xee\x34\xf2\x78\xba\xa5\xac\x88\xc2\xa6\x5d\x80\xde\x50\x75\xf0\xa8\x80\x0e\x2f\xca\x6a\x2c\xd2\xaa\x33\xb8\xf6\x71\xe5\xdf\x19\xf9\x3d\x47\x78\xc4\x3d\x6c\x09\xcb\x11\x32\x42\xa5\x02\xbd\x21\x1a\x22\xc2\x61\x85\x90\x1b\x91\xae\xf6\x10\x89\x34\xa3\x0c\x65\x2b\x78\xb6\x28\x29\xdc\x7f\x10\xce\x94\xc7\xb8\x3b\xc2\xe1\x19\x6c\x44\xce\x63\xf0\x00\x2e\x24\xa5\x21\x38\x81\xb0\x20\x54\xea\xd0\x29\xf9\xee\xa7\x5d\xbc\x5d\xa3\xbe\x84\x63\xf3\xe1\x78\x8a\x53\x33\xee\xc0\xfb\x87\x62\xfe\x85\x9c\x9b\x8b\xd2\x53\x70\xb5\x33\x3c\x76\x24\xa3\xb3\xa2\x93\x49\xba\x1d\x0c\x75\x1d\x08\x75\xa4\xb7\x54\x41\x01\x69\x14\xbb\x95\x10\x0c\x49\xa0\x6c\x9b\x29\xd3\x14\x24\x33\x96\x4b\xc2\x2e\x13\x0b\xaa\xac\x6f\x0a\x86\x39\xa7\xc6\xf7\x59\x55\x2c\x59\x4a\xf9\xda\x22\x7a\x06\xcd\x93\x42\x0c\xd8\x63\x98\x9c\x49\x64\xea\x45\xe5\x78\x29\x84\x9e\x98\xe1\x4d\x92\xfd\x96\x30\x1a\xf7\x14\x6b\x7d\x68\xff\x58\xd8\x35\x81\x28\x57\x5a\xa4\x50\x01\x81\x44\x8a\xd4\x22\xbe\xac\x3f\xa4\x0c\x4d\xd6\x4a\xb2\x8c\xed\xcd\x2f\x15\xf3\x5f\x4e\xe0\x8d\x51\x93\x68\x63\xcb\x95\x30\x36\x7d\x4c\x40\xcb\x1c\x6f\x4c\xf4\x32\xb2\x43\x27\x51\x1f\x62\x5d\xfc\xb5\x69\x49\x65\xdf\x7e\x91\x8a\x8f\x24\xa3\xc7\x0b\x3c\xa0\x6e\xcd\x88\x24\x29\x6a\x94\x5d\xc5\xba\xaf\x2c\x3f\xfb\x41\xf0\x13\xb6\x4a\xbe\xd9\x0a\xc2\xb1\xba\xa9\x56\x30\xf6\x48\xa0\x8d\xb0\x82\x2f\x6e\x56\x6a\x37\x67\x3e\xec\x8c\xb5\xa9\xda\xc6\x4b\x0b\xc6\x81\x14\xdf\x9b\xc0\x89\xf0\x64\x93\x25\x91\xae\x28\x2f\xf6\x22\x44\x02\x15\xef\x80\x48\x63\xca\x0e\xbf\x8b\x65\x93\x73\xe7\x29\x63\xf0\x26\xc0\x84\x29\xf9\x0f\xf4\xe6\x40\xfd\x6f\x02\xb3\x65\xae\x65\x9f\x3e\x41\x43\x63\x7c\xce\x59\x69\x4e\xb0\x82\x98\x3f\x57\x68\xad\x95\xf9\x52\x7d\x4b\x28\x23\x2b\x86\x35\x1d\x39\xbf\x5a\xb4\xb4\x7f\x48\x37\xfa\xc8\x20\xa0\x28\x5f\xd7\x31\x1f\x82\x32\x68\xfc\x8d\x91\xe1\x8e\xa0\x31\x6d\x70\x97\xa8\x31\xb2\x67\x47\xa7\x97\xe8\x91\xa1\x96\xb2\xde\x21\x0f\x03\x28\x8f\xf8\xb1\x36\xd2\x61\xc6\xd4\x76\xc6\x3f\x8e\x53\x0c\x03\xf1\xdb\xe5\xe5\x05\xb0\x3e\xed\x6c\xe2\x30\xc5\xa0\x27\x88\xe2\x58\x06\xbc\x0f\x16\x67\xc7\x92\x8b\xf7\xed\x4d\x97\xeb\xb1\xa3\x80\x75\x1c\x1f\x7e\x36\x93\xa7\x33\xc0\xe4\x9f\x66\xdd\x46\x2c\x3b\x86\xf2\x80\x19\xc8\xf3\x74\xd4\x86\xcb\xd1\xc1\x70\xc1\xed\x2f\x68\x5c\x0f\xfa\xa9\xc6\xf0\x84\x09\x32\xe4\xaa\x1a\x83\x7d\x72\x15\x38\xdc\x92\x19\x38\x36\xce\x25\x09\x54\x5d\x70\x82\x4f\x07\x3c\x92\xff\x79\x38\x49\x0d\xd3\x9c\x69\x9a\xb1\xe3\x55\xf1\x93\x03\x40\x23\xaa\xc7\x52\x09\xe8\x4d\xb7\x14\xd0\x03\x7b\xf4\x1b\x55\x76\xcf\xdb\x23\x09\x86\x23\xbd\x71\xb5\x89\xe9\x58\xae\x5c\xff\x19\x63\x12\x61\x4c\x3c\x61\xbc\x8c\x36\x82\x46\x01\x5e\x1e\x7a\x78\xf5\x59\x28\x65\x4a\xa3\xff\x10\x96\xf7\xee\x6e\x35\x80\x74\x94\x18\xde\x86\xa9\x02\xa3\x7c\x37\x36\x07\x51\xf6\xdc\xd1\x72\xd0\xac\x61\x12\x91\x6d\xf0\x22\x53\xd2\x41\x98\x96\x12\xc2\x54\xb7\x09\x83\xa9\x21\x04\xc5\x99\x84\xe4\x4c\x2f\x2d\xfd\x27\x44\x1a\x0b\xc5\x89\xea\x38\xbd\xb6\xf3\xdd\x06\xec\x61\xb4\x31\xea\x2e\x52\xaa\x35\xc6\x13\x04\x74\xef\x25\x54\xf3\x52\x35\x67\x08\x0b\x9e\x33\xe6\xfe\x4f\x57\xee\x89\x4f\xd3\x4a\xe6\x9f\xe6\x2d\x70\x47\xd2\x8c\xe1\x89\xbc\xfd\xe0\xa0\x1c\xcd\x5b\x3f\xbf\x9b\xb7\x5f\x17\x43\x4f\xaf\x72\x02\x6a\xfa\xa1\x13\xfd\xe1\x6a\xbd\x67\x23\xbe\xd8\xe0\xc3\xb8\xd6\xc6\xd0\x3a\x18\x9e\x52\xe9\x13\xad\x51\xf2\xcf\x23\x05\xff\xaf\xdb\xfb\xef\x6e\xbf\x7f\xf8\xeb\xeb\x81\xfa\x2d\xa4\x76\xea\x3b\x4f\xad\x5a\x32\x28\x07\x62\x54\x46\xd3\x28\x67\x44\x7a\x82\xdf\xc0\x47\x0d\x4f\x94\x31\xc8\x15\x5a\x97\x5a\x9b\x53\x6e\xd1\x64\x12\xb7\x54\xe4\xca\xcf\x72\x1d\x1e\x24\x8e\x41\x48\x10\x5b\x94\x4f\x92\x6a\x57\x1f\x0a\x13\xdb\x62\x8c\x18\x19\xda\x27\x98\xb0\x05\x30\x5e\x77\x0d\x76\xaa\x94\xe4\x4c\xdf\x98\x87\xf9\xab\x33\x3d\x9e\xc6\x36\xc8\x39\xaa\x3a\x3b\xb2\x0e\x9d\x52\xd4\x55\xf9\x01\xe9\xd8\x56\x1b\x25\xcb\x4a\x69\x8d\xbb\xcc\x6d\x11\x12\x70\xae\xa5\x26\xac\x34\x57\x1a\x36\x82\x0b\x09\x5a\x98\xb4\xc8\x6e\xb6\x5e\xba\x64\x69\x90\xb9\x4c\x51\xa9\xa1\x13\xa2\x21\x72\x3f\xb9\xb9\x80\xbb\x8c\x11\xca\xfd\xfe\xbc\x74\x5c\xf0\xf6\x62\xad\xb4\xc1\xda\xab\x11\x3c\x21\xef\x3b\x20\xf5\x9d\x83\x51\xa4\x63\x90\x08\xd9\xb6\x43\x93\xce\x7d\x08\x2b\x24\x2e\x9d\xac\x05\x96\x2a\x85\x83\x37\x13\x7f\xbd\x7f\x77\xfb\xcb\xdf\x6e\xbf\x7f\xb8\x27\xb7\xff\x7d\x77\xfb\x8b\xf1\xe8\x7f\x79\x7d\xee\xac\x8f\xe4\x5a\xac\x91\xa3\x24\x7a\x60\xc3\xb8\x31\xa5\xa3\x38\xae\xc4\x42\x15\x34\x40\xc2\x6a\x6f\x55\x74\x45\xa2\x47\xe4\x93\x4c\x6f\x96\x12\x24\x92\x68\x6b\xc7\xa5\xe0\x6c\x3f\x03\x7d\xa6\xbc\x32\xa0\x5c\x8d\xa5\x21\xce\xad\xcb\xb1\xcb\x20\x18\xd7\x17\x5a\xaa\xce\x4b\xa7\xcf\xde\x85\x8c\x51\x1e\x4d\x67\x23\x33\x6c\x08\xd5\x36\x3e\x10\x13\x93\x5d\x7e\x6e\xd7\x31\x94\x3f\x62\x90\x35\x9d\x85\xd8\x09\xe9\x74\x67\x2f\x51\x47\xa9\x51\x12\xfd\x75\xa5\xc3\xa3\x0c\xc9\x24\x46\xf3\x99\x70\x0d\xde\xe5\x65\x3b\x71\xbb\x33\xac\x4b\xec\x18\xb9\xce\x12\x0b\x8f\x28\xfd\x06\xcb\x36\x13\x08\x5f\xae\xa2\xe2\x2e\x13\x6a\x2e\x2d\xcd\xf2\x15\xa3\x11\xdb\x83\x87\x7a\x84\xae\x06\x55\xd1\xd6\x4f\x98\x59\x5a\xe6\x23\x3b\x8b\xe3\x0c\x18\x6d\x4b\x3b\x58\xfc\x6c\x2d\x6a\x8d\x75\xc6\xda\xd5\xa6\xd0\x98\x50\xa6\x51\x92\x55\xe8\xee\xe8\x68\xc0\xf5\x54\x19\xdd\x77\xc0\x4d\xe4\xc9\x72\x69\xc4\x3e\x29\xbb\x9d\xc5\x45\x25\x42\x22\x5d\xf3\xa5\x09\x7d\xf3\x64\x4c\x50\x80\xbc\x4a\x34\x5d\xa3\xc9\x41\x67\xa0\xc4\x6e\x00\x6c\xc8\x16\x81\x40\x95\x00\x16\xe0\x2f\x4d\x15\x8d\x91\x6b\x9a\xd0\x59\x28\xab\x25\x40\x04\x52\x42\x39\xd4\xc0\x9f\xc7\xeb\xb8\x86\xac\x8f\x45\x11\x62\x1c\xcf\x69\xe7\x15\x64\xb7\x64\xc8\xd7\x7a\x73\x34\x3b\x52\xb2\xa3\x69\x9e\x82\x03\xd3\xce\x12\x7d\x45\x16\x7e\xd6\xe5\xd9\xe2\x23\xd0\xc9\x14\x9e\x96\x10\x7a\x02\x7b\xb2\x60\x4f\x5f\xf8\x29\xda\xcc\x04\x52\x7e\xb2\x08\x29\xff\xaa\x45\x48\xf9\xa9\x22\x2c\x08\xfc\x4a\x45\x18\xde\xc5\x30\xd2\x26\x7c\xb5\x74\x56\xa4\x54\x2f\x31\xcd\xf4\x71\xa1\xaf\xec\xf5\xd3\x5d\x41\x3e\x96\x22\xcb\x30\x06\x9a\x80\x5d\x02\x84\x04\x97\x92\x5e\x38\x78\xd8\xea\xf6\x4c\x09\x4c\x59\x39\x5f\x2d\x7f\xc9\x24\x4d\x89\xdc\xcf\x97\xbf\xb8\xd8\x08\x05\xdc\xab\x24\x31\x12\x49\x3c\xd7\x1e\x0f\x55\x60\xc0\xd9\x7d\x9e\x2b\x10\x32\xd2\xbc\x39\x91\x8e\x02\xda\xa5\xc9\x50\x18\xc9\x81\x1b\x17\x93\x88\x70\xb0\xec\x61\x91\xda\x88\x9c\xc5\xd6\x57\x20\x61\xc5\xd5\xe1\x88\xc8\x49\x7e\x70\x26\x02\xcf\x9a\x35\xab\xeb\x64\xcd\x4a\x8b\xd9\x74\xaf\x80\x75\xee\xa2\xfc\xe4\xd4\x58\xe5\xab\xf0\xa6\xb2\x81\xb8\x9c\x92\x2c\xb3\x27\x32\x02\x32\x1a\x3d\x5a\x67\xff\xb4\x29\x6e\x61\xfb\xd6\x13\x85\xda\x0c\xf8\x16\x77\x1a\x25\x27\xec\xdb\x8b\xf7\xcf\x49\xc2\x15\x45\x3e\x93\x6d\x56\xe0\x2e\xad\xaa\x27\xc9\xcc\x77\xf3\x9d\x92\x47\xfd\xd9\xcc\xe7\x87\x4f\x69\xe6\x63\x54\x05\xa3\x31\x7a\x68\xdf\x18\x6d\xdb\xfe\x42\x31\x2e\xcc\x2f\x74\xbc\xc4\x64\xc2\xd0\x1f\x26\xd0\x28\x31\xf9\x44\xb2\x73\xb7\x2b\x86\x5c\x5f\x6a\x4c\x38\xcb\x55\xa6\xa3\xac\xed\x85\x74\xd7\xf5\xbe\x9d\xb3\x61\xa9\xfc\xd0\x46\xff\x15\xa4\x2f\x7e\xc8\x70\xc7\x92\x3d\x5e\xb7\x9f\x48\x28\xba\x06\x80\x94\xdf\x0f\xa9\x3e\x1f\xf2\x24\x9a\x77\xea\xda\xcd\x4c\x17\xfa\xca\x45\x75\xa9\xb1\xf1\x6e\xf2\x27\x25\xa6\x5f\x8e\x2c\x67\xd4\x76\x00\x19\xe5\x8f\x5e\xa7\x2d\xd3\xca\x26\xa0\x39\xaf\x48\xba\x33\xe5\xff\xaf\xef\x3e\x5c\xe8\x16\xf6\x99\x3e\x99\x31\xc1\x42\x0b\x18\xe3\x76\x0a\xef\xa2\x00\x73\x6d\x7c\x5b\xc9\x39\x62\xb7\x82\xfb\xdd\xaf\x7a\x2d\xf3\xec\x6d\x36\x7b\x38\x6c\x68\x1c\xb1\xcf\xa0\xef\x82\xb4\x79\x38\x7e\xbf\x25\xe0\x4e\x4b\x1f\x13\x5b\xcc\x9c\x62\xc4\x01\x27\xf3\x9d\xf4\x98\x59\x74\xa8\x95\xa4\x95\xd5\x22\x63\xe5\x75\x80\xd2\x93\x87\x9c\xe5\x1f\x77\x21\x7a\xcd\xc4\x8a\xb0\xe5\xc0\xb5\xd8\x36\x7d\xff\xb4\x73\xa0\x71\xe9\x34\x41\x89\x3c\xea\xff\x66\x45\xab\xe1\xaf\x98\x60\xfc\xaf\xc3\xa1\x7e\xbd\xd4\x9a\xb3\xeb\x80\xb3\x19\x49\xed\x95\xc9\x48\x5e\xce\x2d\xea\x10\xbe\x76\x7b\xb1\xda\xcc\x70\x0f\xf6\xca\xfd\xfb\xfc\xea\x7f\x01\x00\x00\xff\xff\xaf\x65\xd2\xb4\x0f\x4e\x00\x00")

func regoSpecJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecJson,
		"rego-spec.json",
	)
}

func regoSpecJson() (*asset, error) {
	bytes, err := regoSpecJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.json", size: 19983, mode: os.FileMode(420), modTime: time.Unix(1549410083, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoTypeMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\x9b\x40\x10\xc6\xef\x7e\x8a\x11\xa9\x54\xa9\x6a\x4c\x4f\x3d\xf8\x5e\xa9\x97\x4a\x3d\xf4\x56\xf5\x30\x66\x07\x98\x64\xd9\xdd\xce\x0e\x49\x69\xc5\xbb\x57\x0b\x36\x0e\x98\xd8\x91\xa2\xf8\x04\xf3\x87\x99\xfd\x7d\x9f\xf7\xdf\x06\x00\x20\x7b\x17\x8b\x9a\x1a\xcc\x76\x90\xd5\xaa\x61\x97\xe7\x77\xd1\xbb\xdb\x31\xba\xf5\x52\xe5\x46\xb0\xd4\xdb\x4f\x9f\xf3\x31\x76\x93\x7d\x1c\x3b\x95\xd5\x52\xea\xfb\xd1\x05\x82\x6f\x18\x02\xbb\x2a\x1e\xb3\x86\x62\x21\x1c\x94\xbd\x1b\x6a\x6a\x8e\x50\xb2\x25\xe0\x08\x6d\x24\x03\xea\xa1\xc1\x00\xf4\x47\x49\x1c\x5a\xd0\x2e\x50\x4c\x51\x8b\xae\x6a\xb1\x22\x88\x81\x0a\x2e\xb9\x88\xdb\x69\x64\x17\x86\x89\x7e\x7f\x47\x85\x1e\xa3\x68\x0c\xa7\x39\x68\xbf\x8b\x0f\x24\xca\x14\xb3\x1d\x94\x68\x23\x1d\x4a\x02\x6a\x1a\x33\xcb\x8f\x00\x86\xf4\xf6\xc3\xec\x7d\x04\x23\x54\xa6\x59\x37\xb9\xa1\x92\xdd\x30\x21\xe6\xc3\x06\x53\x61\x3f\x3c\xf5\xd3\x91\xa7\xba\xf9\xe7\x0f\x6b\x2f\x06\xcc\xf8\x1d\xce\x32\x25\xd7\xf0\xdd\x53\xf7\x94\x9e\x0a\xba\x68\x31\x95\x00\xba\x39\xc8\xf7\x11\x62\xbb\x4f\x4f\x50\x8a\x6f\x00\x27\x98\x43\xfd\x76\x39\x6e\x15\xec\x94\xbd\x0e\x78\x2a\xbd\x0c\xfa\x12\xf0\x2b\xe0\x9b\xd1\x5f\xd9\x59\x4f\xbf\x59\x7f\xeb\x4f\x9b\x65\xc7\xe6\xe7\x35\x38\xd8\xf7\xaa\x0c\x04\x05\x2a\x55\x5e\x4e\x52\xec\x3b\xa8\xc8\x91\xa0\x7a\x89\xc0\x0e\xbc\x18\x92\xa7\x0a\xd1\xd2\xe5\xec\x52\xb6\x26\x16\xf0\x8f\x0e\xb8\x09\x96\x1a\x72\xfa\xc6\xe2\x08\xfd\x6e\x59\xc8\x64\x3b\xf8\x79\xae\xc9\xdc\xda\xe9\xf7\x6b\x29\xee\x15\x55\x57\x7d\x7e\x89\xe5\x04\xc8\x0c\x60\x96\x27\x3f\x23\x10\x55\xd6\x3d\x70\xde\x97\x25\xe7\xbc\x78\x99\xaf\xfe\x31\x09\x36\xb8\x0d\x2d\xff\xa5\xa4\xce\x1b\xec\xd4\x04\x2f\x2f\xdf\xea\xcb\x03\x39\x6d\xd1\xc2\x49\x63\x18\x3f\x01\x5e\x20\x60\x71\x9f\xae\x49\xad\x51\x21\x88\x7f\x60\x93\x2e\xd0\x57\xef\xfd\xdc\xff\x69\xbc\xeb\x36\xfd\xe6\x7f\x00\x00\x00\xff\xff\x9a\x8a\x83\x1c\x3a\x06\x00\x00")

func regoTypeMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoTypeMappingJson,
		"rego-type-mapping.json",
	)
}

func regoTypeMappingJson() (*asset, error) {
	bytes, err := regoTypeMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-type-mapping.json", size: 1594, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoValidationMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x8e\xd3\x30\x10\xc6\xef\x7d\x8a\x51\x16\x09\x09\xed\x36\x9c\x38\xf4\xce\x11\xc4\x61\xc5\x05\x71\x98\xc6\xe3\xd4\xbb\xfe\xc7\x78\x52\xa8\x50\xde\x1d\x39\x69\x9d\x4d\xda\x6e\x11\x12\xa7\x3a\xfe\x66\x3c\xe3\xdf\x37\xf5\xef\x15\x00\x40\xf5\x26\x35\x3b\x72\x58\x6d\xa0\xda\x89\xc4\x4d\x5d\x3f\xa5\xe0\x1f\xc6\xdd\x75\xe0\xb6\x56\x8c\x5a\x1e\xde\x7f\xa8\xc7\xbd\xbb\xea\x7e\xcc\x14\x23\x96\x72\xde\x57\xb4\x46\xa1\x98\xe0\xe1\x13\xc6\x68\x7c\x7b\x0a\x51\x94\x1a\x36\x31\x4b\x39\xf0\x71\x67\x12\x68\x63\x09\x4c\x82\x2e\x91\x02\x09\xe0\x30\xc2\x7e\x3a\x41\x77\xbe\xc9\x8b\x94\x35\x8b\xbe\xed\xb0\x25\x48\x91\x1a\xa3\x4d\x93\xd6\xa5\xfa\x21\x0e\xc5\xc3\xf6\x89\x1a\x39\xed\xa2\x52\x26\x67\xa3\xfd\xc2\x21\x12\x8b\xa1\x54\x6d\x40\xa3\x4d\x74\x0c\x89\x28\x42\xec\x67\xfa\xc8\x62\x90\xd7\xef\x66\xdf\x23\x23\x26\x9d\x6b\xdd\xd5\x8a\xb4\xf1\x43\x85\x54\x0f\x1d\x94\xc0\x7e\x58\xf5\xe5\xe2\x25\x6e\x7e\xfc\xb1\xed\x45\x81\x82\xf2\x31\xcb\xf7\x73\xf1\x12\xc4\x67\x3a\xbc\x64\x28\x8c\x3e\xd9\x11\x20\x7a\xa0\x5f\xf9\x86\x68\x21\x57\x7b\x9b\x20\x75\xdb\xbc\x02\xcd\xc1\x01\x16\x98\x43\xfc\x7a\x59\xee\x22\xd8\xa2\xde\x06\x5c\x42\x5f\x07\xfd\x1a\xf0\x1b\xe0\xdd\x71\xc8\xce\x72\xfa\xd5\xe5\xaf\x7e\xea\xac\x3a\x25\x5f\xf7\x60\x3e\xc3\xd7\x6d\x20\x68\x50\xa8\x0d\x3c\x59\xb1\x3d\x40\x4b\x9e\x18\x25\x70\x02\xe3\x21\xb0\x22\x7e\xe9\x10\xcd\xcd\xc9\x41\x59\xdd\x91\x61\x08\x3f\x3d\x18\x17\x2d\x39\xf2\xf2\x9f\xcd\x61\xfa\xd1\x19\x26\x55\x6d\xe0\xdb\xb9\x27\x1e\x1d\xcd\xf1\x7e\x5f\x9a\x7b\xc3\xd5\xe1\x84\xab\xbe\x2e\x58\x7e\x46\x47\x10\x74\xc6\x50\xfe\xff\x19\x5a\x83\xd6\xe6\xdf\x48\xac\x03\xbb\x41\x9f\x9e\x8a\x25\x9c\x33\x48\x49\xf8\xf2\x98\x9c\xe7\x55\xc6\xc5\xc0\xf2\xd7\x1d\x7f\xdc\x93\x97\x0e\x2d\x4c\xc8\x61\x3c\x02\x02\x43\xc4\xe6\x39\xbf\x5a\xb2\x43\x81\xc8\x61\x6f\x14\xa5\x45\xf7\xe5\xa2\xff\x7e\x8d\x6b\xd3\x3e\xbe\x44\xab\x7e\xf5\x27\x00\x00\xff\xff\x75\x74\x59\xb0\xe3\x05\x00\x00")

func regoValidationMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoValidationMappingJson,
		"rego-validation-mapping.json",
	)
}

func regoValidationMappingJson() (*asset, error) {
	bytes, err := regoValidationMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-validation-mapping.json", size: 1507, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen.sh": genSh,
	"rego-abstract.in": regoAbstractIn,
	"rego-abstract.json": regoAbstractJson,
	"rego-attribute.in": regoAttributeIn,
	"rego-info.json": regoInfoJson,
	"rego-param.in": regoParamIn,
	"rego-shared-params.in": regoSharedParamsIn,
	"rego-shared-params.json": regoSharedParamsJson,
	"rego-spec.in": regoSpecIn,
	"rego-spec.json": regoSpecJson,
	"rego-type-mapping.json": regoTypeMappingJson,
	"rego-validation-mapping.json": regoValidationMappingJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gen.sh": &bintree{genSh, map[string]*bintree{}},
	"rego-abstract.in": &bintree{regoAbstractIn, map[string]*bintree{}},
	"rego-abstract.json": &bintree{regoAbstractJson, map[string]*bintree{}},
	"rego-attribute.in": &bintree{regoAttributeIn, map[string]*bintree{}},
	"rego-info.json": &bintree{regoInfoJson, map[string]*bintree{}},
	"rego-param.in": &bintree{regoParamIn, map[string]*bintree{}},
	"rego-shared-params.in": &bintree{regoSharedParamsIn, map[string]*bintree{}},
	"rego-shared-params.json": &bintree{regoSharedParamsJson, map[string]*bintree{}},
	"rego-spec.in": &bintree{regoSpecIn, map[string]*bintree{}},
	"rego-spec.json": &bintree{regoSpecJson, map[string]*bintree{}},
	"rego-type-mapping.json": &bintree{regoTypeMappingJson, map[string]*bintree{}},
	"rego-validation-mapping.json": &bintree{regoValidationMappingJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

