// Code generated by go-bindata.
// sources:
// gen.sh
// rego-abstract.in
// rego-abstract.json
// rego-attribute.in
// rego-info.json
// rego-param.in
// rego-shared-params.in
// rego-shared-params.json
// rego-spec.in
// rego-spec.json
// rego-type-mapping.json
// rego-validation-mapping.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x6b\xc4\x20\x14\x84\xef\xfe\x8a\xd7\xb4\x60\x7b\x50\x7f\x40\xa0\x90\x42\x0e\x3d\x14\x4a\xb0\x67\x79\x1a\x6b\x6c\x1b\x15\xb5\xff\x7f\xd9\x6c\x58\xb2\x61\x2f\xcb\x1e\xdf\x0c\x33\xf3\xf1\x1e\x1f\x84\xf6\x41\x68\x2c\x13\x21\xc9\xe6\x3f\x60\xc9\x02\x2d\x42\xa9\x4e\xca\xe1\xfd\xed\x4b\xf6\x4a\x09\xda\x3c\x3d\x1b\xac\x90\xad\x8b\x0c\x6b\xcd\x5e\xff\x57\xcb\x7d\x78\x69\xa8\x70\x2d\x5d\x0d\x5d\x6a\x46\x53\xb9\x0f\xf0\xba\x93\x7e\x4a\x0c\xf7\x0c\x9c\x53\x9f\xdd\xd0\x7d\xf4\xb2\x1f\xf6\xa9\x84\x19\xe7\x3d\x52\x49\xd6\x6c\x70\x96\xf3\x0a\xca\x8d\xa5\x13\x66\x3b\x9e\xbc\xb2\x6d\xbf\xd0\x97\x19\x92\x67\x60\xdf\xc0\x8f\x5f\x1e\xb1\x22\x77\xb1\x25\x2e\xb2\xf5\x04\x96\x7e\x1d\x14\x33\xd9\x19\x81\x93\x43\x00\x00\x00\xff\xff\xfe\x7b\x84\xde\x8e\x01\x00\x00")

func genShBytes() ([]byte, error) {
	return bindataRead(
		_genSh,
		"gen.sh",
	)
}

func genSh() (*asset, error) {
	bytes, err := genShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.sh", size: 398, mode: os.FileMode(493), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xbf\xaf\xda\x40\x0c\xde\xf3\x57\x58\xa1\x63\x20\x9d\x3a\xb0\x51\xb5\x03\x5b\x55\xd1\x39\x72\x72\x0e\x39\x14\xee\x22\xdb\xa8\x45\x15\xff\x7b\x75\xb9\x10\x92\xd0\xf7\x78\xe3\xf9\xfb\xe1\x4f\xfe\xee\x6f\x02\x00\x90\x7e\x92\xaa\xa1\x33\xa6\x5b\x48\x1b\xd5\x6e\x9b\xe7\x27\xf1\x6e\x1d\xa7\x1b\xcf\xc7\xdc\x30\xd6\xba\xfe\xfc\x25\x8f\xb3\x55\x9a\x45\xa5\x5a\x6d\x29\xe8\x76\xa5\x28\x63\xa5\x77\xc0\x90\x54\x6c\x3b\xb5\xde\xf5\xb0\x03\x1c\x18\x80\x6d\xeb\x7f\x0b\xa8\x07\x43\x55\x8b\x4c\x80\x20\xa4\xe0\x6b\x28\x51\x08\x50\x95\x6d\x79\x51\x12\x40\x67\x72\xcf\xc0\xd4\x62\x70\x12\xd0\x06\x15\x2a\x74\x50\x12\x30\x5d\x84\x0c\x58\xa7\x1e\xbc\x36\xc4\x20\x1d\x55\xb6\xb6\x55\x24\x8f\x19\xaf\x5d\x1f\xd1\x97\x27\x7a\x04\x44\x63\x6c\xa0\x61\xfb\x83\x7d\x47\xac\x96\x24\xdd\x42\x8d\xad\x50\x96\x44\x4e\x37\x45\xe2\xad\xa2\x76\x4c\x38\x9b\xc7\x5b\x32\xd5\x61\xdb\x2a\x37\x54\x5b\xd7\xef\x90\x7c\xa2\x18\xe9\xb7\xec\xe1\x68\x9d\xa1\x3f\x1f\xb7\xbb\xd3\x1f\x5e\xc9\xc4\x31\x9d\x50\xe7\xc1\xdf\x5c\x33\xf6\xb8\x1f\x18\xd9\x1c\x5f\xd4\xf9\xad\x7f\x96\x14\x0a\x21\x18\x5c\x43\x81\xe1\x19\x5a\xd8\x2c\x0d\xde\x3f\xf7\x3c\xcb\xd0\x17\x32\xe3\x75\xe9\x63\x95\xce\xcf\xf9\x5f\xea\x5e\x68\x67\x7a\x51\xb6\xee\x98\x3e\x91\x6e\xc9\xff\x5f\xd3\x1e\x17\x3f\xa3\x28\x76\x87\xc3\xcf\xfd\xd7\x5f\x87\xef\x45\xb1\x2c\x2b\xb9\x25\xff\x02\x00\x00\xff\xff\x2d\x2e\x3c\x87\x80\x03\x00\x00")

func regoAbstractInBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractIn,
		"rego-abstract.in",
	)
}

func regoAbstractIn() (*asset, error) {
	bytes, err := regoAbstractInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.in", size: 896, mode: os.FileMode(420), modTime: time.Unix(1554756461, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x5b\x6f\xdb\xb8\x12\x7e\xcf\xaf\x18\xb8\x05\x0a\x9c\x93\xc4\x3d\x2f\x07\x68\xde\x02\x9c\x3e\x04\x68\xcf\x16\x8b\x7d\x6a\x90\x1a\x23\x69\x64\xb3\xa5\x48\x76\x48\x25\xf6\x2e\xf2\xdf\x17\xa4\x2e\x96\xe2\x8b\x64\x4b\xb1\xbb\xfb\xb0\x8d\xa5\x99\x21\xbf\xb9\x7e\x12\xf5\xd7\x05\x00\xc0\xe4\xad\x8d\x17\x94\xe1\xe4\x06\x26\x0b\xe7\xcc\xcd\x74\xfa\xdd\x6a\x75\x55\x5c\xbd\xd6\x3c\x9f\x26\x8c\xa9\xbb\x7a\xff\xdf\x69\x71\xed\xcd\xe4\xb2\xd0\x74\xc2\x49\xf2\x7a\xb7\x91\x75\x8c\xb1\xab\x6e\x24\x64\x63\x16\xc6\x09\xad\xc2\x6d\x05\x58\x4a\x00\x4a\xa9\x9f\x2c\x38\x0d\x09\xc5\x12\x99\x00\xc1\x92\x03\x9d\x42\x84\x96\x00\x9d\x63\x11\xe5\x8e\x2c\xa0\x4a\xa6\x9a\x81\x49\xa2\xb7\x64\xc1\x2d\xd0\x41\x8c\x0a\x22\x02\xa6\xdc\x52\x02\x42\x39\x0d\xda\x2d\x88\xc1\x1a\x8a\x45\x2a\xe2\x42\xb8\xde\xe3\xca\x84\x2d\xea\xe8\x3b\xad\x37\x88\x49\x22\xbc\x18\xca\x2f\xac\x0d\xb1\x13\x64\x27\x37\x90\xa2\xb4\x74\x79\x51\xc8\x98\xe6\x9d\xc2\x57\x85\x6e\xbd\xc3\xd6\xf5\xc2\x97\x4c\xa9\x5f\xed\xcd\x34\xa1\x54\xa8\xb0\x86\x9d\x36\x34\x6a\xf1\xe7\xcb\xb5\x45\xa1\x12\x5a\xf6\x37\x57\x89\xaf\x6d\x5d\x34\x2c\x4e\x1a\xa2\xed\x8d\xef\x5c\xa6\x8e\xe3\x5d\x29\x71\xd9\xbe\xff\x22\x9c\xff\x0b\x3f\x23\xf2\x01\x21\x28\xad\xfa\x00\xfa\x9f\x3e\x0a\xd7\x2f\x0d\xec\x77\x77\x7b\x2f\x65\xbc\x90\x19\x57\x2f\xed\x08\x47\xd9\xe6\xfe\x3b\xf5\x3a\x74\x5b\xfa\xd6\xb1\x50\xf3\xc9\x86\xd0\xf3\xc5\xf6\x5f\xcd\x38\xee\xcb\x8c\xad\x79\xb8\xcb\xc3\x9f\x84\x0d\x15\xf1\x48\x6c\x85\x56\x94\x34\xca\x62\x88\x73\x0d\x3a\x47\xac\xbe\x6c\xcf\xec\x5a\xec\xdb\xe3\xfd\xfb\xab\x0f\x0f\xff\x7e\xdb\xed\xae\x5d\xee\xde\x87\xaa\x51\xe2\x42\x01\x82\x41\x76\x22\xce\x25\x72\x05\xf8\x1a\xee\x1c\x3c\x09\x29\x21\xf7\x2d\x41\xca\xa6\x4e\xca\x3a\x0b\xa9\x66\x98\x1e\x85\xce\x6d\xa5\x15\x3a\x06\x60\x92\x80\x66\xd0\x8f\xc4\x4f\x2c\x1c\x05\x51\xad\xc8\x56\x0d\x27\x79\xe9\xc1\x7a\xbf\xfb\x53\xa4\x3b\x8c\xfb\xc0\xff\x4e\x86\xc9\x92\x72\x7e\x97\x6b\x38\x55\xd9\x70\x75\x9b\x12\x28\x6c\xef\xda\x65\x30\xce\xf4\x33\x17\x4c\xc9\xe4\x06\xee\x77\x4a\x05\x49\x85\x19\xed\xb1\xb4\x06\xd5\x21\xd3\x84\xb3\x53\xf2\x61\xcf\x96\xfb\xa7\x69\x4b\x6d\x47\x17\xde\xbe\x84\x9f\x2d\x94\xcc\xe2\x05\x72\xb7\xf8\x06\xac\x10\xa5\x39\x2d\x4d\x31\x68\x10\x8a\x5e\xd0\x08\x56\x96\x5b\x07\x0b\xad\x34\xfb\x01\x16\x11\x3c\xa2\x14\x49\x87\xeb\xa0\x4f\x7b\x69\xfe\xf7\xdc\x11\x8a\x16\xcc\x59\x46\xd6\xe2\x9c\x8e\x82\xfb\xb9\xd0\x05\x5a\x1a\x89\x42\x79\xb0\x45\x32\x06\x2f\x54\xf5\x12\xaa\xb4\xe5\xda\xb3\x01\xd6\x22\xee\x91\x08\xdb\xa0\xde\x16\x36\x7c\xc4\x72\xdf\x44\x34\x6f\xd6\xe1\xca\x10\x7c\x54\x79\x76\x08\xbe\x7d\x0d\xb0\xa5\xd0\xdd\x5c\xb6\xda\x2f\xfd\xd7\xbd\x00\x34\x1a\xbc\x57\xfc\x76\x7f\x7b\xf5\xf5\x3f\x57\x1f\x1e\xee\xf1\xea\xcf\xdb\xab\xaf\xbe\xa3\xff\xeb\xed\xfe\x40\xc0\xc6\xa0\xdb\xb8\xdb\x15\xaa\xdc\xe9\x39\x29\x62\x74\xa1\x3b\x1d\x1e\xa8\x3f\x16\x0d\x12\x08\xc2\x42\xcb\x24\x44\xab\x90\xa2\x11\xc6\x3f\x48\x1d\x54\x7a\x91\xd6\x92\x70\x4f\xf7\xea\x83\x2f\x66\x0a\xfc\x72\xa6\x95\x5c\x8d\x80\xcf\xb3\x59\x6f\xca\x37\x13\x4f\x83\x93\x3c\xb4\x9c\xb0\x0c\x81\x6f\x7d\x61\xb9\x93\xe3\x4c\x28\xc5\x5c\xba\x99\xe6\x84\xf8\x68\x9c\xa1\xd8\xaa\x11\xd7\x0a\x6a\x20\xef\xe8\x67\x72\x58\x07\xc2\x3a\x1e\xf9\x0f\xea\x55\x4d\xaf\x02\x36\x6c\xf7\x68\xb0\x15\x94\xed\xa0\x0f\x00\x75\x5f\x35\x95\x35\xbc\x4b\xcf\xde\x1d\xcd\x89\xfd\x9f\x2a\x97\xb2\xf8\x37\x8b\x8a\x2b\x15\x1d\xa9\xfb\xc5\xc3\x40\x87\x18\xa6\x78\xbc\x12\x6e\xd8\x3b\x7d\x6c\x9b\x5b\x3b\x36\xb2\xf5\xa5\x21\x71\x1d\x65\x16\xd2\x12\x33\x23\x69\x40\xae\x7e\x2c\x2c\x94\x79\xea\x07\xe1\x3f\x37\x51\x69\x69\xb4\x1d\x2b\x4b\x4d\x1e\x49\x11\xcb\x15\x54\x56\x8f\xc8\xd5\x1e\x2a\x65\x9f\xf0\x5a\x8e\x73\x1a\x94\x0e\xb5\x07\x66\x81\xe7\x1f\xe3\x86\xff\x63\x46\x05\xe1\x0d\x0f\x5c\x11\x55\xf0\x3d\xed\x7b\x12\x1c\x52\x24\x43\x77\x0d\x77\x29\x50\x66\xdc\x0a\xfc\x5a\x55\x13\x3f\x7d\xfe\x3b\x52\x76\xe3\xe5\x46\x5f\xb4\xbf\x19\xfc\x99\x93\x9f\x32\x65\xfe\x1b\x14\xdc\x7e\xb3\x14\x46\x53\xb4\x82\x58\x67\x46\x48\xe2\x8d\x27\xee\xbd\x18\xcb\x04\x1f\x84\x31\x15\xd2\x11\x63\x24\x8f\x1f\x46\x6d\x86\x51\xa1\xf2\xc5\x5e\x18\xf7\xa3\xd6\xe4\xec\x03\x7d\x10\x9d\x1f\xa5\x27\xa7\x9a\x49\xcc\xd5\xcc\xcf\xfa\x71\x28\x22\x94\x26\xcf\x42\x1f\xe6\xe4\x49\xf7\x08\x48\x42\x01\x2e\xf0\x91\x00\x61\xcd\x78\x4b\xf3\xa7\x46\x25\x12\x52\x4e\xa4\x62\x14\x64\x0d\xc6\x87\x90\xa1\x50\xd0\x30\xff\x3a\x6d\x36\x57\xe2\x67\x4e\x77\xe5\x53\x97\xef\xb4\x83\xdc\x91\xe1\x72\x26\x49\xcd\xdd\xe2\x68\x77\x64\xb8\x14\x59\x9e\x41\x61\x66\x93\x16\x57\x8f\xa0\xbd\x1f\xf9\x6a\xb7\x54\x23\x77\x30\xc2\x61\x0c\xb8\x02\xb8\x83\xf6\x57\xf8\x6a\x82\x70\x6a\x80\x42\x0d\x0e\xa1\x50\xbf\x74\x08\x85\x1a\x1a\xc2\x12\xe0\x2f\x1a\xc2\xa3\x59\x8e\xc7\x16\x68\xcb\xb9\xf9\xbb\xce\x84\x9b\x05\x1a\x75\x14\x8e\xbb\x34\xb4\xb2\xcb\x17\x71\x29\x87\x7c\xc2\xda\x18\xcf\xdc\x2a\xa6\xa6\x19\x0a\x0e\x7e\xe2\xe1\x11\x1e\xe7\x5f\x89\xc0\xd4\xaf\x0a\xce\xc6\x5f\x0c\x8b\x0c\x79\x35\x1e\x7f\x29\x66\x23\x94\x76\xcf\x42\x62\x98\x30\x19\xeb\xa5\x96\xb0\xe0\xcd\x85\x17\x5b\x67\x00\x52\x1f\x8d\x8c\x82\xa3\xb4\x76\x6a\x18\x96\x62\x26\x37\x0e\x88\xc2\x56\x38\x1d\xb3\x0b\x9d\xcb\x24\xf4\x0a\x42\xe9\x9f\xf9\xdc\x02\x62\xe4\x83\xfa\xe0\x48\x00\x5f\x95\x35\xdb\xf3\xb0\x66\xeb\xf4\x68\xb9\x57\xda\x7a\xed\xb7\x10\x83\xa9\xb1\xcd\xa3\x72\x03\xc3\xe6\x72\x86\xc6\x84\x23\x28\x0d\x46\xc4\x3f\x42\xb3\x7f\x5a\x90\x0a\xb3\xae\xa0\x1d\x36\xbc\x24\x77\x1a\xde\xd1\xd2\x11\x2b\x94\xef\x4e\x3d\xc0\x1d\xa3\xb2\x82\xd4\x48\xb5\xb9\x36\x77\xea\x54\x1d\x14\xb3\x10\x8e\xe6\x59\xfe\x11\x61\xe8\xa1\x41\x2a\xcf\x3a\xcf\xb8\x6b\xe9\xc3\xce\xca\xfa\x73\xd8\x20\x9e\x4a\x8d\x7d\x82\x14\x84\xfb\x17\x22\xd4\x30\x7b\xca\x4a\x61\x7b\x6f\xa3\xf3\x2b\x85\x96\xb4\x13\x9d\x9f\x0a\xd4\xb2\x55\xf9\xf5\x95\x67\x4a\x0f\x10\xfd\x74\x00\x46\xa6\xf4\x33\x9a\xee\x73\xcd\x61\x2f\x9a\xc3\x41\x3f\x6e\x7e\x54\xb5\x53\x61\xdb\x5b\x56\x5f\x2f\x10\xe7\xd6\xe9\x0c\xd6\x06\xd7\x1f\xb4\xcc\x9a\x17\x85\x24\xdf\xe8\xd0\x18\xb9\xf2\x7f\x1c\xfd\xd4\x72\xa2\x13\xea\x4e\xa5\x8e\x83\xe5\x9d\x77\xb7\xdf\xd9\xbc\xba\xf3\x0b\xad\x8b\xe2\xff\xcf\x17\x7f\x07\x00\x00\xff\xff\x3a\xbd\x12\xe9\xf1\x28\x00\x00")

func regoAbstractJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractJson,
		"rego-abstract.json",
	)
}

func regoAbstractJson() (*asset, error) {
	bytes, err := regoAbstractJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.json", size: 10481, mode: os.FileMode(420), modTime: time.Unix(1562019161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAttributeIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4d\x6f\xdb\x38\x13\xbe\xf7\x57\x0c\x8c\x02\x05\xde\xb7\x29\x76\x8f\xed\xad\x87\x1e\x02\xb4\xdd\xc5\x62\x4f\x4d\x53\x63\x24\x8d\x6c\x6e\x28\x92\x19\x92\x8e\xbd\x8b\xfc\xf7\x05\x29\xc9\x96\x12\xdb\x92\x25\xc5\xee\xfa\x92\x40\x1a\x0e\xf9\xcc\xe7\x43\x52\xd0\xf8\xcd\xdc\xc6\xd0\xec\x03\xcc\x74\xf2\x17\xa5\x6e\xf6\xf6\x55\xeb\x6d\x46\x36\x65\x61\x9c\xd0\x2a\x08\x7d\x16\xd6\x81\xce\x61\x45\x6c\x85\x56\x94\x01\x3a\xc7\x22\xf1\x8e\xec\xbb\xa7\x63\x31\xcb\x44\x18\x88\xf2\x77\xd6\x86\xd8\x09\xb2\xb3\x0f\x90\xa3\xb4\xf4\x44\xd4\xa0\x73\xc4\xaa\x25\xf7\x4f\x4b\x24\x8a\xfd\x58\xdd\xfc\x72\xf5\xfe\xf6\xff\xdf\x5f\xef\x7d\xdf\xc2\x83\xcc\xb8\x79\xb2\xa4\x2e\x58\x3b\x30\x20\x14\x20\x18\x64\x27\x52\x2f\x91\x6b\xc4\xef\xe0\xda\xc1\x83\x90\x12\xbc\x25\x40\x29\x9b\x63\x72\xd6\x05\xb8\x25\x81\x61\x5a\x09\xed\x6d\x3d\xca\x02\xaa\x0c\x30\xcb\x40\x33\xe8\x15\xf1\x03\x0b\x47\x51\x54\x2b\xb2\x90\x51\x2a\x91\x29\x7b\x6a\xc2\xed\x7a\x85\xa3\x62\xbf\x4d\xfa\xf9\xf1\x18\xf8\x3f\xc8\x30\x59\x52\x2e\xac\x72\x07\x27\xd8\x23\x2c\x90\xeb\xd7\x94\x41\xa9\xfb\xd0\x2a\xa3\x72\xa6\x7b\x2f\x98\xb2\xd9\x07\xb8\x39\x28\x15\x25\x15\x16\x74\x44\xd3\x0e\x54\x87\x4c\x13\xce\x41\xc9\xdb\x23\x4b\xee\x1f\xa7\xad\x61\xe6\x78\xb0\xb6\xa7\x90\x52\x3f\x50\x36\x4f\x97\xc8\xdd\xe2\xcf\x60\x45\x2f\x2d\x68\x6d\xc0\x2d\xd1\x01\x82\x75\x2c\xd4\xa2\xe1\xac\xc2\x5b\x07\x4b\xad\x34\x83\xd3\x90\x10\xac\x50\x8a\xac\xc3\x74\xd0\x8c\x9b\x52\xe5\x61\x0b\x86\xdf\x63\x87\x2b\x5a\x30\xe7\x05\x59\x8b\x0b\x1a\x04\xf7\x4b\x39\x16\x68\x6d\x24\x0a\x15\xc0\x96\xc1\x18\xad\x50\xe7\x4b\xcc\xd2\x96\x69\x2f\x06\x58\x8b\xb4\x47\x20\xec\x83\xfa\xb1\xd4\x11\x3c\xe6\x43\x11\xd1\xfc\x3c\x0f\x37\x86\xe0\x93\xf2\xc5\x29\xf8\x8e\x15\xc0\xd6\x80\xee\xe2\xb2\x57\x7f\x65\xbf\xee\x09\xa0\x51\xe1\xc3\xc0\x1f\x37\x1f\xaf\xbe\xfd\x7a\xf5\xfe\xf6\x06\xaf\xfe\xfe\x78\xf5\x2d\x94\xf4\xff\x7d\x7f\x7d\xdc\x13\xe1\xf7\x38\xce\x57\xde\xe9\x05\x29\x62\x74\xb1\x3c\x9d\xee\xa9\x3f\x97\xd4\xf0\x8b\xb0\xd0\x52\x09\xc9\x26\xc6\x68\x82\xe9\x1d\xa9\x93\x72\x2f\xd1\x5a\x12\x1e\x29\x5f\x7d\xf0\xa5\x4c\x18\x56\x3a\xd7\x4a\x6e\x26\xc0\x97\xa2\x82\xa0\x2a\x54\x13\x4b\x0e\x32\x1f\x6b\x4e\x9c\x86\x20\xd4\xbe\x38\xdd\xd9\x71\x66\x94\xa3\x97\x6e\xae\x39\x23\x1e\x8c\x33\x66\x5b\xdd\xe3\x5a\x4e\xf5\x36\xd0\x9a\xd0\x94\xe3\x3c\x10\xe7\x09\xc8\xef\xa8\x57\x3a\xbd\x08\xd8\xb8\xdc\xc1\x60\x6b\x28\xfb\x41\x9f\x00\xea\xa6\xae\x2a\x3b\x78\x6f\x61\x26\x94\xa3\x05\x71\xf8\x57\x79\x29\xcb\xbf\x45\x52\x3e\xa9\xf9\xc8\xb6\x60\xdc\x8e\x34\x88\x61\x4a\xa7\x4b\xe1\x86\xbe\xf3\xfb\xb6\xb9\xb4\xa1\x9e\xdd\x3e\x1a\xe3\xd7\x49\x9a\x21\xad\xb1\x30\x92\x46\xc4\xea\xa7\x52\x43\x15\xa7\xa1\x13\xfe\x77\x03\x95\xd6\x46\xdb\xa9\xa2\xd4\xf8\x44\x8a\x54\x6e\xa0\xd6\x3a\x20\x56\x7b\x0c\xa9\xea\x44\x18\xe5\xd8\xd3\xa8\x70\xd8\x5a\x60\x1e\x89\xfe\x10\x33\x7c\xc5\x82\x4a\xc6\x1b\x77\x5c\x09\xd5\xf0\x03\xef\x7b\x10\x1c\x43\xa4\x40\xf7\x0e\xae\x73\xa0\xc2\xb8\x0d\x84\xb9\xea\x22\x7e\xfe\xf8\x77\xa4\xe2\x76\x6f\x10\xda\xdf\x0c\xde\x7b\x0a\x5d\xa6\x8a\x7f\x83\x82\x6d\x89\x3f\xf4\xe2\x84\xca\xd6\x94\x6c\x20\xd5\x85\x11\x92\xf8\xd9\x9e\xfb\x28\xc6\x2a\xc0\x47\x61\xcc\x85\x74\xc4\x98\xc8\xe1\xcd\xa8\xcd\x30\x6a\x54\x21\xd9\x4b\xe5\xa1\xd5\x1a\xcf\xc1\xd1\x27\xf1\xf9\x49\x6a\x72\xae\x99\xc4\x42\xcd\x43\xaf\x9f\x86\x22\x42\xa5\xf2\x22\xf4\x61\x41\x81\x75\x4f\x80\x24\x26\xe0\x12\x57\x04\x08\x3b\xc6\x5b\xa9\x3f\x37\x2a\x91\x91\x72\x22\x17\x93\x20\x6b\x30\x3e\x84\x02\x85\x82\x86\xfa\x97\x29\xb3\x5e\x89\x7b\x4f\xd7\xd5\xb6\x2b\x54\xda\x51\xe6\x28\x70\x3d\x97\xa4\x16\x6e\x39\xd8\x1c\x05\xae\x45\xe1\x0b\x28\xd5\x3c\xa7\xc5\xf5\x1e\xb4\xf7\x9e\x6f\x6b\x96\xba\xe5\x8e\x46\x38\x8e\x01\xd7\x00\x0f\xd0\xfe\x1a\xdf\x96\x20\x9c\x1b\xa0\x50\xa3\x5d\x28\xd4\x4f\xed\x42\xa1\xc6\xba\xb0\x02\xf8\x93\xba\x70\x30\xcb\x09\xd8\x22\x6d\xb9\x34\x7f\xd7\x85\x70\xf3\x48\xa3\x06\xe1\xb8\xce\x63\x29\x7b\xfb\xc4\x2f\x55\x93\xcf\x58\x1b\x13\x98\x5b\xcd\xd4\x34\x43\xc9\xc1\xcf\xdc\x3c\xe2\x76\xfe\x85\x08\xcc\xf6\xa8\xe0\x62\xfc\xc5\xb0\x28\x90\x37\xd3\xf1\x97\xb2\x37\x42\xa5\xf7\x22\x24\x86\x09\xb3\xa9\x0e\xb5\x84\x85\xa0\x2e\x1e\x6c\x5d\x00\xc8\xf6\x6e\x64\x12\x1c\x95\xb6\x73\xc3\xb0\x94\x32\xb9\x69\x40\x94\xba\xe2\xf5\x98\x5d\x6a\x2f\xb3\x58\x2b\x08\x65\xd8\xf3\xb9\x25\xa4\xc8\x27\xd5\xc1\x89\x00\xbe\x28\x6b\xb6\x97\x61\xcd\xd6\xe9\xc9\x62\xaf\xd2\xf5\xd2\xa7\x10\xa3\xa9\xb1\xf5\x49\xb5\x80\x71\x7d\xb9\x40\x63\xe2\x1d\x94\x06\x23\xd2\xbb\x58\xec\x1f\x96\xa4\x62\xaf\x2b\x69\x87\x8d\x87\xe4\x4e\xc3\x1b\x5a\x3b\x62\x85\xf2\xcd\xb9\x1b\xb8\x63\x54\x56\x90\x9a\x28\x37\x77\xea\xce\x1d\xaa\xa3\x7c\x16\xdd\xd1\xbc\xcc\x1f\xe0\x86\x1e\x23\x48\xf9\xa2\xf3\x92\x7b\x2b\x7d\xda\x65\x59\x7f\x0e\x1b\xc5\x73\xa9\xb1\x8f\x93\xa2\x70\xff\x44\x84\x2d\xcc\x9e\xb2\x52\xd8\xde\xcb\xe8\xfc\x4c\xa1\x25\xed\x44\xe7\xb7\x02\x5b\xd9\x3a\xfd\xfa\xca\x33\xe5\x27\x88\x7e\x3e\x01\x23\x53\xfe\x05\x4d\xf7\xbd\xe6\xb8\x83\xe6\x78\xd3\x1f\xaf\xe2\x86\x9d\x3b\x7e\xad\x6a\x1c\x42\xea\xad\xd3\x05\xec\x14\xee\xbe\x68\x99\x37\x1f\x0a\x49\xa1\xd0\xa1\x31\x72\x13\xfe\x19\xbc\x6b\x39\xd3\x15\x75\xe7\xa0\x8e\x8b\xe5\x83\x6f\xf7\xbf\x79\xfe\xb4\xfd\xe4\xf1\xd5\xbf\x01\x00\x00\xff\xff\xcc\xf1\x8b\x53\x81\x25\x00\x00")

func regoAttributeInBytes() ([]byte, error) {
	return bindataRead(
		_regoAttributeIn,
		"rego-attribute.in",
	)
}

func regoAttributeIn() (*asset, error) {
	bytes, err := regoAttributeInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-attribute.in", size: 9601, mode: os.FileMode(420), modTime: time.Unix(1562017814, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoInfoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x4e\xc3\x40\x0c\xc7\xf7\x3c\x85\x75\x30\xb6\x0d\x13\x43\x36\xc6\x0e\xa0\x4e\x2c\x88\xc1\x4d\x7c\xad\xab\x34\x77\xd8\x0e\x02\x55\x7d\x77\x74\xb9\xa6\x4a\x3f\x36\x96\x44\xf9\xd9\xff\x8f\xf8\x50\x00\x00\xb8\x47\xad\xb7\xb4\x47\x57\x81\xdb\x9a\xc5\xaa\x2c\x77\x1a\xba\x79\xa6\x8b\x20\x9b\xb2\x11\xf4\x36\x7f\x7a\x2e\x33\x7b\x70\xb3\xac\x34\xb6\x96\x92\x6e\xd9\xf9\x30\xc2\x86\xb4\x16\x8e\xc6\xa1\x4b\xa3\x57\x32\x04\xee\x7c\x90\x3d\x26\x06\xb8\x0e\xbd\x01\x82\x92\x41\xf0\xa0\x91\x6a\xf6\x5c\x0f\x43\x5d\x9c\xad\x7f\xe3\xe0\x1c\xd6\x3b\xaa\x6d\xa4\xd8\x34\x9c\xf6\xb0\x5d\x49\x88\x24\xc6\xa4\xae\x02\x8f\xad\xd2\x69\x45\xe8\xab\x67\xa1\xc6\x55\xf0\x31\x90\x81\x46\x21\xcf\x3f\x27\x9b\xbc\x17\x82\x4d\xbf\xbf\x49\x34\x55\x1e\xc8\xe7\xac\x28\x4e\xba\x49\xcc\xe1\xc6\x6f\xca\x2e\x6a\xab\x09\x77\x9b\x89\xff\xbd\xd3\xac\x06\x13\xb0\x00\xbd\x52\x7a\xd5\xd8\xb6\x80\x91\xd5\x9d\x75\xc7\xeb\xca\xff\x8b\x7c\xc3\x3d\xa5\xab\xdb\x96\x20\xd9\x5d\x9e\xff\x56\xec\xb1\x6f\x53\x66\xce\xbe\xdb\x6a\x3c\xdc\x4d\xb1\xab\xe8\xf7\xbc\x37\xa6\xbf\xac\x96\xd7\x71\xe3\x9f\x70\x67\xb4\x21\x99\xc4\x15\xf9\x79\x2c\xfe\x02\x00\x00\xff\xff\xb8\x06\xde\x01\xb3\x02\x00\x00")

func regoInfoJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoInfoJson,
		"rego-info.json",
	)
}

func regoInfoJson() (*asset, error) {
	bytes, err := regoInfoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-info.json", size: 691, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoParamIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcb\x6e\xdc\x3a\x0c\xdd\xe7\x2b\x08\xaf\x83\xfb\x01\x59\x27\x8b\x0b\xb4\xc5\xa0\x0d\xba\x09\x82\x80\xb6\x39\x33\x2c\xf4\x70\x25\x39\x0f\x14\xf9\xf7\x42\xf6\x78\x62\x8d\x2d\x5b\xb6\x51\xb4\xde\x0c\x6c\x91\x47\xd4\xe1\x21\xc5\x81\xde\x93\x39\x76\x82\xb2\x1b\xc8\x76\x68\x50\x92\x23\x03\xdf\xc8\x65\xd7\x57\xa1\xd5\x5b\xd5\x18\xe9\xfc\x07\x15\x83\x55\x2c\x4b\x76\xac\x15\x8a\x9d\xd1\x15\x19\xc7\x64\xb3\x1b\xd8\xa3\xb0\x74\x61\x5a\xf5\x0d\x7e\x05\x6b\xcd\xba\xa1\x9f\x35\x1b\x2a\x47\x57\x23\x01\x5b\xf8\xda\x7a\x49\x52\xce\xc2\xdd\x6b\x65\xc8\x5a\xd6\xca\x5e\x04\x7a\xc6\x28\xc9\x16\x86\x2b\x1f\xb3\x47\xba\xa5\x3d\x2b\x82\x97\x23\x3a\x28\xb4\xcc\x59\xa1\x5f\xb2\xa0\xf7\x50\x7d\xec\x82\x86\xa0\x8b\xef\xbf\x18\x74\xc7\x14\x1a\x83\x6f\x31\x23\x76\x24\xc7\x09\x58\x84\x93\x88\xb5\x08\x6f\x01\x66\x80\x6b\x9d\x61\x75\xc8\x26\x1d\xde\xa3\xab\xe3\x2b\xc3\xaf\xef\xc3\xc0\x33\x52\xce\xc4\xf4\x04\x81\x62\x3e\xb1\x75\x3e\xa7\x1f\xca\x49\x16\x88\x7f\xcd\x09\xdc\x91\x40\x9c\x50\xf0\x19\x59\x60\x2e\xa8\xa7\x91\x3f\x2f\x8b\x81\xfa\xa7\xb4\x11\x3b\x06\x82\x65\x75\xe8\x47\x3e\x85\x32\x59\xfc\x81\x65\x7a\x23\x08\xdc\x7a\x45\xff\x30\x2d\x4c\x85\x92\xe6\xc4\xdb\x3f\xf4\x8c\x69\x73\xb2\xa8\xc9\xe3\x44\xc8\x33\x7d\x6c\x18\x74\x5a\x31\x0d\x9b\xf1\x97\xf9\x13\xc3\x48\xaa\xbd\x9b\x17\xa9\x17\xec\x39\xc9\x31\x75\x86\x31\x2c\x29\xe8\x05\xa9\x58\x4b\xc0\x6d\x72\x3a\x47\xb6\xcc\x7a\xde\x7f\x9f\x8e\x13\xd6\x3a\x1e\xee\xbd\xf3\x72\x02\xee\x8f\x04\x7e\xdf\xe0\x2e\x5b\x73\xf2\x04\x0f\x52\xb5\x9c\xad\xe1\xb3\x75\x32\x6e\x63\xcd\xca\xd1\x61\xb2\x4f\x05\xe6\x7b\xa1\x71\xaa\x55\x05\xc6\xb9\xd6\x82\x30\x45\x5e\x70\x3e\x66\xa2\x6d\x59\x1b\x4c\x94\x2e\xb4\x89\x97\x13\x1d\xa9\x7b\x1e\x37\xc9\x50\xd6\xc2\x71\x25\xd6\x4b\xf1\x73\x0b\xc0\x05\xbb\xb9\x51\x02\xa2\xe3\x96\x05\xbe\xa8\x47\x28\x50\x41\x4e\x60\x49\x39\xe8\x82\x04\xcf\x48\xf4\x5e\x0d\x23\x3d\x09\xb6\x4b\xe7\x26\x92\x50\x08\xfd\x42\xe5\x53\x71\xd4\x5c\x24\x74\x79\x88\x70\xb5\xd3\xd6\xb2\x20\xf8\x8e\xa2\xa6\xd8\xbc\x11\x80\x5c\xb0\xf5\x7f\xcb\x52\x53\xc3\x6c\xc1\x8b\xef\xba\x99\x41\x2c\xa0\x10\x2d\x83\x7e\x0f\x3f\x88\x3c\x27\x6f\xb2\x64\x1c\x84\x65\x23\x21\x2c\x6d\x9b\x30\x39\x1a\x42\xd2\x3d\xb3\xc7\x5a\xb8\xa7\xe6\xfc\x1b\x6e\x9a\x06\xa5\x4d\xd5\x3a\x5d\x37\xfe\x4d\x14\x83\xdb\xc6\xcb\x5d\x4b\x76\x8e\xca\x05\x09\x7a\xe8\x32\xd4\xeb\x52\xbd\x66\x08\x99\xaa\x85\x68\x7f\x65\xde\x7e\xe9\xc6\xb4\x33\xf9\xdb\xba\x05\xbd\xa2\xac\x04\x6d\xe4\xf6\xae\x45\x59\xcd\x6d\xe7\x3f\xce\xed\xbf\x45\xe8\xf6\x7f\x39\x57\xe1\xdb\xef\x00\x00\x00\xff\xff\x76\x36\xe8\x20\xb1\x0f\x00\x00")

func regoParamInBytes() ([]byte, error) {
	return bindataRead(
		_regoParamIn,
		"rego-param.in",
	)
}

func regoParamIn() (*asset, error) {
	bytes, err := regoParamInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-param.in", size: 4017, mode: os.FileMode(420), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x31\x6f\xc2\x30\x10\x85\x77\x7e\xc5\xc9\x74\xaa\x0a\xee\xd4\x81\x8d\x81\xb1\x12\xa2\xec\x91\xb1\x9f\x6b\xa3\x60\x5b\xe7\x5b\x50\x95\xff\x5e\x39\x29\x69\xd3\x2d\x79\xf7\xbd\x7b\xe7\xf7\xb5\x22\x22\x52\x4f\xd5\x06\xdc\x8c\xda\x91\x0a\x22\x65\xa7\xf5\xb5\xe6\xb4\x99\xd4\x6d\xe6\x4f\xed\xd8\x78\xd9\xbc\xbe\xe9\x49\x5b\xab\x97\xc9\x29\x51\x7a\x34\xdf\x47\x30\x0c\x47\x47\xc3\xe6\x06\x01\xd7\x07\xe1\x50\x2d\xc7\x22\x31\xa7\xc6\x9d\x03\xa8\xcc\x10\x39\xf8\x98\xe0\x28\x80\x41\xd6\x24\xba\x80\x18\x1e\x0c\x8b\x64\xe1\xe8\x72\xa7\x2c\x01\x4c\xb5\xc0\x46\x1f\xad\x69\x9b\xea\x76\x3e\xe0\x5e\xc6\xfc\x7c\xb9\xc2\xca\x43\x35\xce\xc5\xc6\x99\xfe\xc8\xb9\x80\x25\xa2\xaa\x1d\x79\xd3\x57\xfc\x20\xc5\x88\x80\xd3\x62\x3e\xd5\x31\x8e\xb7\xcf\x8b\xff\xa9\x26\x86\x6f\x59\x6b\x3d\x9e\x3d\x26\x54\xfd\xfb\x1a\x35\xe3\xc3\xf8\x35\xcc\x15\xcc\xf4\x32\xe4\x8f\xb5\xe9\x5d\x77\xdc\x9f\xf6\xef\x87\xf3\xe1\xd4\x75\xff\x77\xad\x86\xd5\x77\x00\x00\x00\xff\xff\xc9\x23\xe7\x9b\xae\x01\x00\x00")

func regoSharedParamsInBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsIn,
		"rego-shared-params.in",
	)
}

func regoSharedParamsIn() (*asset, error) {
	bytes, err := regoSharedParamsInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.in", size: 430, mode: os.FileMode(420), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xdc\x38\x0c\xbd\xcf\xaf\x20\x9c\x3d\x2d\x92\x99\x3d\xed\x21\xe7\xe4\x50\xa0\x2d\x82\x26\xe8\x25\x08\x02\xda\xa6\xc7\x0a\x64\xc9\x95\x38\xf9\x40\x31\xff\xbd\x90\x34\x76\xec\xf8\x7b\x06\x45\xdb\x4b\x63\xe9\x91\x22\x1f\x9f\x28\xce\xcf\x15\x00\x40\xf4\x8f\x4d\x72\x2a\x30\xba\x84\x28\x67\x2e\x2f\x37\x9b\x27\xab\xd5\x45\x58\x5d\x6b\xb3\xdd\xa4\x06\x33\xbe\xf8\xef\xff\x4d\x58\x3b\x8b\xce\x83\x25\x0b\x96\xe4\xec\x6e\x73\x34\x94\xc2\x0d\x1a\x2c\x88\xc9\xd8\x0a\x91\x92\x4d\x8c\x28\x59\x68\xe5\x70\x77\x39\x41\x59\x83\x20\xa5\x4c\x28\x4a\x21\x27\x43\x90\xa0\x82\x98\xc0\x50\x46\x86\x12\x52\x09\xa5\x10\xbf\x81\xe6\x9c\x0c\xd8\x92\x12\x91\x89\x04\x9d\x27\xbb\xae\x03\x78\x2b\xfd\xf9\x3a\x7e\xa2\x84\xab\x55\x4c\x53\xe1\x70\x28\x6f\x8c\x2e\xc9\xb0\x20\x1b\x5d\x42\x86\xd2\xd2\x01\x52\x22\x33\x19\xd5\xda\x0f\x74\xf8\xed\xf5\xbf\xad\xef\x40\x93\xa1\xcc\x9d\x75\xb6\xf1\x61\xfb\x13\xec\xe6\x3d\x9b\xa8\x86\xef\xfd\x5f\xfb\x9a\x82\x1a\xdd\x3e\xa4\x61\xda\x39\xac\x66\xb6\xa6\x14\x6e\xa9\x4a\xf0\x1d\xd5\x97\x7e\xbd\x3b\x4d\xc3\x7b\x28\xfd\x3c\xd4\xfb\x86\x7e\xec\x84\xa1\xb4\x77\x77\x20\x60\x0b\xdf\x82\x55\x41\x8a\x2d\x5c\xbf\x96\x86\xac\xf5\x34\x9c\xf7\xfb\xf8\x20\x96\x2b\xaf\x0e\x78\xc9\x91\x21\xd1\x45\x2c\x54\xa8\x3e\xe8\xac\x29\x22\x34\x4e\x34\x21\xbe\xf5\x90\xeb\x8a\x29\x34\x06\xdf\x86\x40\x82\xa9\xe8\x27\x60\x91\x9f\x99\xbe\x16\xf9\x5b\xe0\xb3\xe5\xd7\xb2\x11\x6a\x1b\x8d\x1a\xec\x07\x77\xfb\x77\xba\xab\xfb\x6e\xe0\x11\x29\x36\x43\x7a\x82\x96\x62\x3e\x0b\xcb\xae\xa6\x9d\xee\xd1\x31\xe9\x08\xc4\x7d\xc6\x04\x9c\x13\xc8\x83\x17\x7c\x46\x21\x31\x96\xcd\x46\xf3\xfb\x65\xd1\x51\xff\x98\x36\x86\xd2\x40\xb0\x42\x6d\x9b\x91\x8f\x79\x19\xbd\xfc\x2d\xe4\xfc\x46\xd0\x32\x6b\x5c\xfa\xfb\x71\x61\x2a\x2c\x68\x4a\xbc\xcd\xa4\x27\xa0\x3e\xb3\x41\xc8\xc3\x48\xc8\x13\x7d\xac\x1b\xf4\xbc\xcb\xd4\x6d\xc6\x5f\xa7\x33\x86\x9e\x52\x3b\x33\x27\x52\x6e\xbe\x83\x43\xea\x6c\xc7\xb0\xe4\x42\x2f\x28\xc5\xb1\x04\x5c\xcd\x2e\x67\xcf\x91\x51\xc3\xfa\xcf\xd3\x71\xf0\x75\x1c\x0f\x77\xce\x78\x39\x01\x6e\x10\x72\xe7\xb6\xde\xb2\x63\x32\x9f\x61\x41\x6a\x57\x4c\xde\xe1\x1a\x3d\xdb\xaf\x47\x0b\xc5\xb4\x1d\xed\x53\x2d\x78\x26\x35\x8e\xb5\xaa\x16\x38\xd6\x5a\x12\xce\x91\x17\xd4\x69\xce\xc4\xa6\x3b\x83\x33\xa5\x0b\xa1\xf0\xc5\x48\x47\xaa\xfe\x3d\x9c\x24\xc3\x62\x27\x59\x94\xf2\x78\x29\x7e\x09\x0e\x44\x22\x78\x6a\x94\x80\xc1\x71\xcb\x82\xf8\x70\x1f\xab\xc1\xdc\x92\x62\xa8\x82\x04\xc7\xc8\xe0\xbb\xda\x8e\xf4\x20\xd8\xaa\x9c\x27\x91\x84\x52\xea\x17\x4a\x1f\x93\x5c\x8b\x64\x46\x97\x87\x01\xae\x6e\xb4\xb5\x42\x12\x7c\x47\xb9\xa3\xa1\x79\xa3\xe5\xe4\x03\x5b\x9f\x02\x4b\xfe\x0e\x0b\x0b\x4e\x7c\xe7\x7e\x06\xb1\x80\x52\x06\x06\xdd\x19\x6e\x10\x79\x9e\x7d\xc8\x92\x71\x10\x96\x8d\x84\xb0\xb4\x6d\xc2\xe8\x68\x08\xb3\xde\x99\x0c\x77\x92\x1f\x7d\xfe\x27\xbc\x34\xde\x4b\x28\xd5\x71\xba\xf6\xf6\x3e\x8a\xce\x6b\xe3\xe4\xae\x0b\xc1\x4c\xe9\x82\x02\xdd\x57\x15\x6a\x74\xa9\x46\x33\x84\x48\xed\xa4\x0c\xff\x17\x71\x58\xa9\xc6\xb4\x9a\xfc\xd3\xba\x05\xbd\x62\x51\x4a\x3a\x91\xdb\xeb\xe0\xe5\x68\x6e\x2b\xfb\x7e\x6e\xff\x2e\x42\x4f\xff\x95\xb3\xea\xff\x3a\xfc\xdc\x5f\xed\x57\xbf\x02\x00\x00\xff\xff\xa9\xb8\x42\xf1\x51\x11\x00\x00")

func regoSharedParamsJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsJson,
		"rego-shared-params.json",
	)
}

func regoSharedParamsJson() (*asset, error) {
	bytes, err := regoSharedParamsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.json", size: 4433, mode: os.FileMode(420), modTime: time.Unix(1562019161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x4d\x6f\xe3\x36\x13\xbe\xe7\x57\x0c\xb4\xef\x31\x59\xbf\xa7\x1e\x72\x73\x9b\xa0\x0d\xd0\x6d\x03\xd7\x3d\x15\x0b\x63\x4c\x8e\x6c\x6e\x28\x51\x4b\x52\xc9\x1a\x0b\xff\xf7\x82\x94\x44\x49\xd6\x87\xa5\x6d\xd6\x45\x7a\x31\x2c\x92\x33\x7c\xf8\xcc\x17\x87\x5f\xaf\x00\x00\xa2\xff\x19\xb6\xa7\x04\xa3\x5b\x88\xf6\xd6\x66\xb7\x8b\xc5\x27\xa3\xd2\x9b\x62\xf4\xbd\xd2\xbb\x05\xd7\x18\xdb\x9b\xff\xff\xb0\x28\xc6\xde\x45\xd7\x85\xa4\x15\x56\x92\x93\xfb\x23\x23\x26\x62\xc1\xd0\x0a\x95\x56\xb3\x9c\x0c\xd3\x22\xf3\x43\xb7\x10\xad\x28\xd3\x64\x28\xb5\x06\x30\x05\xb5\xfd\x44\xcc\xc2\x8b\xb0\x7b\x40\x29\x41\xb8\x61\x6b\xb5\xd8\xe6\x96\xdc\x0a\x0e\x9a\xa4\xd7\x67\xc2\x76\x87\xcc\xef\x56\xc8\x56\xa3\xc8\xb9\x70\xcb\x50\x3e\x6a\x95\x91\xb6\x82\x4c\x74\x0b\x31\x4a\x43\xe5\x12\x4d\x9f\x73\xa1\x89\x47\xb7\xf0\x97\x1f\xf1\xa3\x89\xe2\x24\x23\xff\xfd\xb1\x5c\x98\x35\x35\x7c\xad\x97\xd6\xc8\x5a\xe3\x05\x7d\x9a\x62\x87\xea\xdd\x82\x53\x2c\x52\x8f\xc5\x2c\x1a\x12\x61\xf9\xf1\xba\xd6\x58\x1f\xae\xa3\xb0\x3a\x26\x6a\x8d\x87\xe8\xba\x3d\x79\x42\xea\xaf\xc2\x58\x50\x71\xcd\x15\x6c\xc9\xbe\x10\xa5\x60\xf7\x04\xba\xa2\x9c\x78\x45\xb8\x23\x56\xd9\x3d\x69\x50\x29\x99\xf7\xa7\xea\x85\xa5\xa4\x0b\x69\xe4\x9c\xd5\xc6\x51\x4b\xe0\xd8\x7b\xe6\x82\xf0\x89\x04\x36\xac\x73\xaa\x47\xa4\x9c\xbe\x4c\x37\x45\xb5\xfc\xaa\x8d\xee\x18\xdc\x34\x2c\x6d\x1b\x7d\x70\x9b\xe0\xf6\x0f\xe5\x8a\x71\x1b\xdd\xf9\xcf\x2d\x19\x6f\x93\x52\xab\x33\x9a\xfb\x34\x19\xb1\x8e\x15\xce\xbb\xf4\x34\x67\x19\xb1\xe6\x98\xdc\x19\xd9\x96\xbc\xb1\x5a\xa4\xbb\xa8\xb3\xe8\xf8\xed\xfe\x10\xe8\xfd\xe0\xe7\xc7\xc9\xfd\x45\x49\x6e\x60\x8b\x46\x30\x10\x69\xac\x74\xe2\xdd\xb1\xa2\xb7\x1b\x01\x1d\xb2\x7b\xb3\x4a\x98\x9d\x61\x8a\xde\x2c\x13\x66\x33\x64\x4f\xb8\xa3\x3e\xaa\x35\x19\xbb\x49\x31\x19\x9a\x54\xb9\x66\x34\xb8\x80\x52\x2b\xec\x61\x70\xba\xc9\x57\xcf\xf4\x4e\xab\x3c\x6b\x9b\xef\xe3\xc9\xb9\x06\x92\x62\x4d\x91\x14\x68\x06\x26\x3b\x10\x1a\x39\xab\x94\x03\xab\x6a\x33\x01\xfa\x88\x08\xb5\xe4\xd4\x5a\x41\xe7\x39\xff\x85\xf3\x3e\x0c\x53\xfc\x18\x3a\xbe\x0c\x6d\x2f\x0e\x9a\xf2\x8c\xa3\xa5\x61\x16\xc6\xf3\x27\xb2\x6e\x16\x1d\xda\x89\x93\xa4\x4b\xed\xd4\xb4\xdc\x34\xf3\xae\xf7\x04\x8d\xa1\xe9\x91\x18\x14\x9e\xcd\x2d\x67\xa2\x60\x2a\xd2\x9f\x30\x21\x79\xc3\xd0\x10\x87\x67\xd2\xa6\x85\xb6\x0c\xc9\xd7\x05\xf9\xc5\x52\xca\xe7\x47\xca\x16\x0d\xb5\xe3\x02\xec\x5e\x98\x93\xa1\x52\x3b\xbc\xa9\xa8\xe1\x8a\xe5\x09\xa5\x16\x67\xf9\xd8\x92\x3f\x63\xca\x88\x43\x4b\x1c\x62\xa5\x43\x51\x9d\x9e\x42\x66\x5b\xd0\xf4\xde\xdb\x86\xb0\xfe\x9e\xe1\xe7\x9c\xe0\x89\x0e\xf0\x8c\x32\x27\xc8\x50\x68\x77\x17\x40\x0b\x0c\x53\xd8\x12\xe4\xce\x03\xb7\x07\x60\x2a\xc9\x84\x24\xdd\xb9\x97\x75\x30\x97\xc5\x6a\x12\xe6\x1d\xd9\x4b\xe4\x8a\xaa\xc0\xcd\xc9\x13\x2e\xc2\xaa\x90\x2b\xe5\x2f\x94\x2f\x8a\xba\x37\x07\xab\x97\xa8\xd0\x61\x26\x5e\x15\x4e\xa6\xc5\xf3\x68\xf5\xe8\x01\xd4\x73\xbb\x17\x06\x4a\x4d\x67\xd1\x6d\x95\x92\x84\x13\x6d\xdb\xbe\x84\xcc\x01\x99\xc9\x5c\xa3\xbc\x4c\x7a\xad\xef\x51\x73\x10\xe6\xa9\x70\xf1\xe9\x5d\x31\x50\x2a\xd2\x9d\x07\xfa\x1d\x3c\x4f\x2b\x35\x12\x8f\xd3\xec\x8c\xcc\xb5\xcb\x45\x43\xe1\xf4\xcd\xcc\x78\xb3\x6c\xff\x8c\x52\xf0\x81\x5e\x75\x08\xf6\x6f\x65\x5c\x23\xb0\xdc\x58\x95\x40\xad\x04\x62\xad\x12\x0f\x7c\xd3\x1c\x14\x92\xdc\x45\x10\xb3\x4c\x1e\xdc\x9f\x9a\xfc\x37\x54\xcb\xc8\x22\xdb\xfb\x06\x60\x1a\x4d\x0f\x31\x58\x9d\xd3\xb5\x6b\x0a\x9d\xed\xca\x16\xb1\x2a\x03\x45\x8d\xf0\x95\xbe\x8e\xef\x6a\x93\x9a\x47\xcc\xc4\xb7\x1b\x7c\x42\x9b\x96\xa1\xc6\x84\x2c\xe9\x82\xc8\xcd\xe6\x71\xb9\x5a\x7e\xb8\x5f\xdf\xaf\x36\x9b\x5e\x81\x93\xd7\x92\xcd\x66\xb9\x5e\xaf\x1e\x7e\xfc\x73\x7d\x3f\x20\x10\x1e\x11\x86\x7b\xc1\x55\xb5\x64\xbc\x1d\x5c\x4a\xa9\x5e\x7c\x4b\xc1\x89\x49\xd4\x04\x18\xde\x46\xea\xa7\x91\x17\xd5\x0e\x98\xee\x3b\xc8\x85\x9a\xc2\x3a\x63\x9d\x76\x60\xf3\x5a\xb0\xf9\x99\x2f\x48\x14\x97\x0f\x34\x80\x20\x45\xfa\x54\xc5\x9e\x27\x2d\x24\x9c\xd7\xcc\x7f\x4c\xd3\x7f\xae\x4f\xba\xd0\x15\xeb\x3b\xb5\x98\x13\x72\xc0\x89\x8e\xf3\x71\x0a\x4b\x36\x21\x5c\x5b\xef\xc6\x45\xc1\x28\x76\x28\xfe\x57\xbb\xfe\x5b\xe1\xd9\x44\xfb\x8f\x9e\x48\x26\xf5\xd1\x5d\x0e\xef\x46\xdf\x6e\xfa\x08\xbd\xeb\x6b\xbc\xfb\x49\xec\x90\x39\x27\x88\xb9\xbb\x93\xb8\x8a\x35\x52\xec\xfa\xce\xe3\xa4\x44\x5f\x22\x1f\x3a\xd0\x9a\xa4\x34\x20\xda\x47\x29\xea\x60\x40\xf0\x9a\xb7\x9d\x9d\x54\x5b\x94\x9b\x93\x9a\x37\x7e\xbe\x9f\xbd\x0c\x3c\x06\x19\x58\x51\x4c\x9a\x52\xd6\x79\x1b\x1e\x3a\x66\x10\x70\xf9\xb7\xc0\x00\x35\x06\xf0\xe1\x4c\x1c\x44\xf1\xae\xdf\x80\xe7\x6f\x4e\x6f\xe7\x8a\x34\x85\xd7\xfe\x2c\xd6\x90\x9c\x9e\xc1\xae\x8a\xdf\xe3\xd5\xdf\x01\x00\x00\xff\xff\x83\xe3\xe0\xa0\xeb\x1a\x00\x00")

func regoSpecInBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecIn,
		"rego-spec.in",
	)
}

func regoSpecIn() (*asset, error) {
	bytes, err := regoSpecInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.in", size: 6891, mode: os.FileMode(420), modTime: time.Unix(1554756461, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x6f\xe3\x36\x12\x7f\xdf\xbf\x62\xe0\x2e\x50\xe0\x2e\xd9\xf4\x5e\x0e\x68\xde\x16\xb7\x8b\xbb\x00\xdd\xde\x62\x5b\xdc\x43\x83\xd4\xa0\xa5\x91\xcd\x86\x22\x55\x92\x72\xec\x2b\xf2\xbf\x1f\x48\x8a\xfa\xb0\xbe\x28\x5b\x76\x36\x87\xe6\x61\x37\x91\xc8\x21\xe7\x93\xbf\x21\x87\xfa\xe3\x0d\x00\xc0\xe2\xad\x8a\x36\x98\x92\xc5\x2d\x2c\x36\x5a\x67\xb7\x37\x37\xbf\x29\xc1\xaf\xdd\xd3\x77\x42\xae\x6f\x62\x49\x12\x7d\xfd\xdd\xdf\x6f\xdc\xb3\x6f\x16\x57\xae\xa7\xa6\x9a\xa1\xe9\xf7\x53\x86\x11\x4d\x68\x44\x34\x15\xdc\xbf\x8d\x51\x45\x92\x66\xf6\xd1\x2d\x2c\xbe\x60\x26\x51\x21\xd7\x0a\x08\x07\xb1\xfa\x0d\x23\x0d\x4f\x54\x6f\x80\x30\x06\xd4\x3c\xd6\x5a\xd2\x55\xae\xd1\xb4\x88\x41\x22\xb3\xf4\x54\x39\xdc\x3e\xb3\xa3\xb9\xbe\xfe\x29\x89\x63\x6a\x9a\x11\xf6\x59\x8a\x0c\xa5\xa6\xa8\x16\xb7\x90\x10\xa6\xb0\x68\x22\xf1\xf7\x9c\x4a\x8c\x17\xb7\x70\x6f\x9f\xd8\xa7\xa9\x88\x91\x2d\xec\xdf\x0f\x45\xc3\xac\x4e\xe1\x8f\xaa\x69\x35\xb3\xc6\x73\x27\x3e\x89\x89\x99\xd5\x37\x37\x31\x26\x94\xdb\xb9\xa8\x9b\x5a\x8f\xb2\xf9\xf3\x55\x45\xb1\x62\xae\x45\xd0\xb3\x49\xa4\x24\xfb\xc5\x55\xf3\xe5\x81\x50\x7f\xa0\x4a\x83\x48\x2a\x59\xc1\x0a\xf5\x13\x22\x07\xbd\x41\x90\x5e\xe4\x18\x7b\x81\x1b\xc1\x0a\xbd\x41\x09\x82\xa3\x7a\x77\x48\x9e\x6a\x4c\xdb\x53\x1a\xe0\xd3\x0f\xbc\x68\x74\x78\xee\xe4\xd9\x09\x3c\x50\x80\x35\xed\x1c\xd2\xa1\x3c\xc6\x5d\xb8\x2a\x7c\xf3\x37\xcd\xd9\x3d\x97\x66\x5a\x36\x6d\x2a\xbd\x77\x98\xd2\xec\xef\x8a\x16\xc3\x3a\xfa\x60\xff\x5c\xa1\xb2\x3a\x29\xa8\x1a\xa5\x99\x3f\x55\x86\x51\x4b\x0b\xe3\x26\x1d\x66\x2c\x03\xda\x1c\xea\x37\xd2\xb7\xd1\x5f\x69\x49\xf9\x7a\xd1\x6a\xf4\x7c\xbc\x3d\x94\xe2\xfd\x64\xdf\x0f\x0b\xf7\x5f\x82\xc5\x0a\x56\x44\xd1\x08\x28\x4f\x84\x4c\xad\x39\x7a\xf1\xb6\x3d\xa0\x25\xec\xce\xa8\x52\xbe\x9d\xa0\x8a\xce\x28\x53\xbe\xcd\x48\xf4\x48\xd6\xd8\x25\x6a\x89\x4a\x2f\x39\x49\xfb\x5e\x8a\x5c\x46\xd8\xdb\x00\xb9\xa6\x7a\xdf\xfb\xba\x2e\xaf\x8e\xd7\x6b\x29\xf2\xac\xa9\xbe\x87\x03\xbe\x7a\x82\x62\x25\x22\x46\x89\xea\x79\xd9\x9a\x42\x2d\x66\x15\xfd\x40\x8b\x4a\x4d\x40\xac\x47\x94\x6b\xc9\xa1\xb6\x4a\x9a\x63\xf6\x0b\xe3\x36\x0c\x21\x76\x0c\x2d\x5b\x86\xa6\x15\x97\x94\xf2\x2c\x26\x1a\xfb\xa5\x30\x1c\x3f\x49\xd4\x8e\xa2\x7d\x23\xc5\xc8\xf0\x52\x23\xd5\x35\x17\xa6\xde\x9f\x37\x08\xb5\x47\xe1\x9e\x58\x12\x1c\x8d\x2d\x23\x5e\x10\x3a\xd3\x7f\x90\x14\xd9\x75\x44\x14\xc6\xb0\x45\xa9\x1a\xb3\x2d\x5c\x72\xde\x49\xee\x34\xf2\x78\xba\xa7\xac\x88\xc2\xa6\x5f\x80\xde\x50\x75\xf0\xa8\xa0\x0e\xaf\xca\x6b\x62\x11\xe5\x29\x72\x4d\x26\xd9\xd8\xfb\x78\x4b\x78\x84\x31\x34\xba\x43\x22\x64\xb9\xa8\x86\x87\x90\xc9\x1a\x54\x9d\xb8\xad\x6f\xae\xff\xce\xc8\xef\x39\xc2\x23\xee\x61\x4b\x58\x8e\x90\x11\x2a\x0d\x16\x20\x1a\x22\xc2\x61\x85\x90\x1b\x0b\x5c\xed\x21\x12\x69\x46\x19\xca\x16\x2e\x6b\xcd\xb9\x58\xac\x82\xe6\xbc\x46\x7d\x89\x58\xe1\x17\xb8\x29\x71\xc2\x78\x98\x77\xb9\xa2\xff\x85\xe2\x85\x5b\xf7\xa6\xcc\xd5\xf6\xf0\xb3\x23\x19\x9d\x75\x3a\x99\xa4\xdb\xc1\xd5\xa3\x63\x42\x1d\xe8\x9e\x2a\x28\x28\x8d\xce\x6e\x25\x04\x43\x12\xa8\xdb\x26\x08\x99\x32\xc9\x8c\xe5\x92\xb0\xcb\x84\xd7\x0a\x47\x4d\x99\x61\xce\xa9\xf1\x4f\x6b\x8a\xa5\x48\x29\x5f\xdb\x89\x9e\xc1\xf2\xa4\x10\x03\xfe\x18\xa6\x67\x12\x99\x74\xd9\x25\x14\x86\xde\xc4\x88\x37\x49\xf7\x5b\xc2\x68\xdc\x93\xab\xf6\x4d\xfb\xc7\xc2\xaf\x09\x44\xb9\xd2\x22\x85\x8a\x08\x24\x52\xa4\x76\xe2\xcb\xfa\x43\xca\xd0\x00\x41\x92\x65\x6c\x6f\x7e\xa9\x84\xff\x8a\xd6\x32\xd4\x24\xda\xd8\x04\x20\x4c\x4c\x77\x09\x68\x99\xe3\x95\x49\x0a\x8d\xee\x8a\x14\xd1\x2f\x03\x6e\x8d\xb0\x2b\x7d\xe5\xdf\x7e\x90\x4a\x8e\x24\xa3\xc7\x2b\x3c\x20\x4d\xcb\x88\x24\x29\x6a\x94\x43\xa9\xf0\x67\xdf\x08\x7e\xc2\x56\x12\x35\x5b\x8a\x35\x96\x8a\xd4\x52\xb0\xbe\xbc\xb5\x35\x61\x05\x5f\x5c\xaf\xd4\xee\x4d\x7d\xdc\x19\x6f\x53\xb5\x7d\xa7\x16\x8d\x56\x7e\x9f\x50\x8e\xf0\x64\x17\x74\x91\xae\x28\x2f\xb6\x62\x44\x02\x95\xec\x80\x48\xe3\xca\x6e\x7e\x17\x03\x68\x43\x74\x02\x69\x4d\xa2\x37\x81\x26\x84\x3a\x9f\xff\x69\x3b\xe1\xf0\x9b\x30\xa7\x45\xae\x65\x9f\x3d\x41\xc3\x62\x3c\x1a\xaf\x2c\x27\xd8\x40\xdc\x06\x90\xf5\x56\xe6\xb3\xdf\x2d\xa1\x8c\xac\x18\xd6\x6c\xe4\xfc\x66\xd1\xb2\xfe\x21\xdb\xe8\x63\x83\x80\xa2\x7c\x5d\x9f\xf9\x10\x95\x41\xe7\x6f\xb4\x0c\x0f\x04\x8d\x6e\x83\xfb\x2e\x8d\x96\x3d\x7b\x24\xbd\x4c\x8f\x34\xb5\x9c\xf5\x36\x79\x18\x98\xf2\x48\x1c\x6b\x4f\x3a\xcc\x99\xda\xc1\xf8\xc7\x71\x8e\x61\x60\xfd\x76\xb8\xbc\x20\xd6\x67\x9d\xcd\x39\x4c\x71\xe8\x09\xaa\x38\x56\x00\x1f\x82\xd5\xd9\x31\xe4\xe2\x43\x7b\x1f\xe3\xe5\xc4\x51\xd0\x3a\x4e\x0e\x3f\x9b\xce\xd3\x05\x60\xf0\xa7\x19\xb7\xb1\x96\x1d\xc3\x79\x40\x0f\xe4\x79\x3a\xea\xc3\x65\xeb\x60\xba\xe0\xf6\xf2\x35\xae\x07\xe3\x54\xa3\x79\xc2\x04\x19\x0a\x55\x8d\xc6\x1e\x5c\x05\x36\xb7\x6c\x06\xb6\x8d\x73\x49\x02\x4d\x17\x9c\xe2\xd3\x81\x88\xe4\x7f\x1e\x4e\x32\xc3\x34\x67\x9a\x66\xec\x78\x53\xfc\xe4\x08\xd0\x88\xea\x31\x28\x01\xbd\x70\x4b\x01\x3d\xf0\x47\xbf\x99\x62\xb7\x91\xfd\x24\xc1\x48\xa4\x77\x5d\x6d\xce\x74\x0c\x2b\xd7\x7f\xc6\x84\x44\x18\x13\x4f\x18\x2f\xa3\x8d\xa0\x51\x40\x94\x87\x1e\x59\x7d\x16\x4a\x99\xd4\xe8\x3f\x84\xe5\xad\x83\xa6\x4e\x22\x1d\x29\x86\xf7\x61\xaa\xc0\x18\xdf\x95\xc5\x20\xca\x1e\xbb\x5a\x09\x9a\x31\x0c\x10\xd9\x06\x0f\x32\x05\x0e\xc2\x34\x48\x08\x53\xc3\x26\x0c\x42\x43\x08\x5a\x67\x12\x92\x33\xbd\xb4\xfc\x9f\xb0\xd2\x58\x2a\x4e\x55\xc7\xd9\xb5\xed\xef\x36\x09\x0f\x57\x1b\x63\xee\x22\xa5\x5a\x63\x3c\x41\x41\xf7\x5e\x43\xb5\x28\x55\x0b\x86\xb0\xe0\x39\x63\xee\xff\x74\xe5\x9e\x78\x98\x56\x0a\xff\xb4\x68\x81\x3b\x92\x66\x0c\x4f\x94\xed\x47\x47\xe5\x68\xd9\xfa\xfe\xdd\xb2\xfd\xba\x04\x7a\x7a\x96\x13\x90\xd3\x0f\x15\x34\x0c\x67\xeb\x3d\x47\x14\xc5\x06\x1f\xc6\xb5\x2a\x8e\x53\xce\xb5\x33\xa2\x35\x4a\xfe\x79\x24\xe1\xff\x75\x7b\xff\xdd\xf5\xf7\x0f\x7f\x7d\x3b\x7e\x52\x3d\x98\x3b\xf5\x1d\x51\x56\x15\x29\x94\x03\x31\x26\xa3\x69\x94\x33\x22\x3d\xc3\xef\xe0\x4e\xc3\x13\x65\x0c\x72\x85\x36\xa4\xd6\xfa\x94\x5b\x34\x99\xc4\x2d\x15\xb9\xf2\xbd\x5c\x81\x0b\x89\x63\x10\x12\xc4\x16\xe5\x93\xa4\xda\xe5\x87\xc2\xac\x6d\x31\x46\x8c\x0c\xed\x13\x4c\xd8\x02\x18\xcf\xbb\x06\x0b\x75\x4a\x76\xa6\x6f\xcc\xc3\xfc\xd9\x99\x1e\x87\xb1\x0d\x76\x8e\xca\xce\x8e\xcc\x43\xa7\x24\x75\x15\x3e\x20\x1d\xdb\x6a\xa3\x6c\x59\x2d\xad\x71\x97\xb9\x2d\x42\x02\x2e\xb4\xd4\x94\x95\xe6\x4a\xc3\x46\x70\x21\x41\x0b\x03\x8b\xec\x66\xeb\xa5\x53\x96\x06\x9b\xcb\x14\x95\x1a\x3a\x21\x1a\x62\xf7\x93\xeb\x0b\xb8\xcb\x18\xa1\xdc\xef\xcf\x4b\x27\x05\xef\x2f\xd6\x4b\x1b\xa2\x7d\x31\x86\x27\xe0\xbe\xc3\xc3\x4d\x47\xa3\x80\x63\xf6\x50\xb3\xe5\x87\x06\xce\x7d\x0c\x4b\x24\x2e\x0d\xd6\x02\x53\x95\x22\xc0\x9b\x8e\xbf\xde\xbf\xbf\xfe\xe5\x6f\xd7\xdf\x3f\xdc\x93\xeb\xff\xbe\xbf\xfe\xc5\x44\xf4\xbf\xbc\x3d\x37\xea\x23\xb9\x16\x6b\xe4\x28\x89\x1e\xd8\x30\x6e\x74\xe9\x48\x8e\x2b\xb5\x50\x05\x0d\x92\xb0\xda\x5b\x13\x5d\x91\xe8\x11\xf9\x24\xd7\x9b\x25\x05\x89\x24\xda\xdc\x71\x29\x38\xdb\xcf\xc0\x9f\x49\xaf\x0c\x29\x97\x63\x69\x88\x73\x1b\x72\xec\x30\x08\x26\xf4\x85\xa6\xaa\xf3\xf2\xe9\xd1\xbb\x90\x31\xca\xa3\xf9\x6c\x20\xc3\x86\x52\xed\xe1\x3c\x31\x6b\xb2\xc3\xe7\x76\x1c\xc3\xf9\x23\x06\x79\xd3\x59\x98\x9d\x00\xa7\x3b\xcb\x73\x3a\x52\x8d\x92\xe9\xaf\x0b\x0e\x8f\x0a\x24\x93\x18\xcd\xe7\xc2\x35\x7a\x97\xd7\xed\xc4\xed\xce\xb0\xc2\xab\x63\xf4\x3a\xcb\x5a\x78\x44\xea\x37\x98\xb6\xf9\xea\x9e\xd7\x69\xa8\xb8\xcb\x84\x9a\xcb\x4a\xb3\x7c\xc5\x68\xc4\xf6\xe0\xa9\x1e\x61\xab\x41\x59\xb4\x8d\x13\xa6\x97\x96\xf9\xc8\xce\xe2\x88\x00\x4a\x09\x0c\x57\x68\x1c\x8c\xdf\x3e\x95\xb0\x80\xd7\x26\x5c\x2b\xf4\xec\x1b\xd8\xf7\x44\xa5\x35\x91\x94\xe8\x77\x70\x97\x00\xa6\x99\xde\xbb\xaa\x8e\x22\x88\x5f\xde\xfe\x47\x6b\xc5\x86\xb8\x9d\xb3\x6e\xac\x93\xc7\xbe\x1a\xb2\x29\x3c\x26\x94\x69\x94\x64\x15\xba\x1d\x3c\x8a\x30\x3c\x57\xc6\xd9\x1d\x71\xb3\xd4\x66\xb9\x34\x8a\x9e\x04\xe7\x67\x89\xc9\x89\x90\x48\xd7\x7c\x69\xd6\xfa\x79\x20\x22\x14\x24\x5f\x04\x3e\xac\xd1\x80\xee\x19\x38\xb1\x0e\xb8\x21\x5b\x04\x02\x15\xe2\x2d\xc8\x5f\x9a\x2b\x1a\x23\xd7\x34\xa1\xb3\x70\x56\x43\x7c\x04\x52\x42\x39\xd4\xc8\x9f\x27\xcc\xba\x0a\xb4\xbb\x22\xeb\x32\x91\xf6\xb4\x03\x1a\xb2\x5b\x32\xe4\x6b\xbd\x39\x5a\x1c\x29\xd9\xd1\x34\x4f\xc1\x91\x69\xc3\x62\x9f\x82\x86\x1f\xee\x79\xb1\xf8\x25\xf7\x64\x0e\x4f\x43\xc0\x9e\xc1\x1e\xd8\xef\xf9\x0b\x3f\x36\x9c\x99\x41\xca\x4f\x56\x21\xe5\x5f\xb5\x0a\x29\x3f\x55\x85\x05\x83\x5f\xa9\x0a\x8f\x46\x39\x87\x75\xd1\x2f\x86\xdf\x45\x4a\xf5\xd2\xc2\xa8\xa3\xf8\x28\x8b\x1b\x75\xd7\x22\x1f\x4b\x91\x65\x06\xb9\x79\xa4\x26\x24\x38\x0c\x7e\xe1\xc5\xc3\xa6\xf3\x67\x02\x30\xe5\x56\xc1\x8b\xe1\x97\x4c\xd2\x94\xc8\xfd\x7c\xf8\xc5\xad\x8d\x50\xd0\x7d\x11\x10\x23\x91\xc4\x73\x6d\x6a\x51\x05\x86\x9c\xdd\xd8\x7a\x01\x46\x46\xaa\x55\x27\xf2\x51\x50\xbb\x34\x1b\x0a\x23\x39\x70\xc5\x64\x12\x13\x8e\x96\x3d\x1d\x53\x1b\x91\xb3\xd8\xc6\x0a\x24\xac\xb8\x2a\x1e\x11\x39\x29\x0e\xce\xc4\xe0\x59\x51\xb3\x7a\x19\xd4\xac\xb4\x98\xcd\xf6\x0a\x5a\xe7\xde\x85\x38\x19\x1a\xab\x7c\x15\x5e\x45\x37\xb0\x2e\xa7\x24\xcb\xec\x11\x94\x80\x8c\x46\x8f\x36\xd8\x3f\x6d\x8a\x5b\xf7\xbe\xd6\x46\xa1\x36\x0d\xbe\xc5\x9d\x46\xc9\x09\xfb\xf6\xe2\x05\x83\x92\x70\x45\x91\xcf\xe4\x9b\x15\xb9\x4b\x9b\xea\x49\x3a\xf3\xe5\x8b\xa7\xe0\xa8\x3f\xab\x17\x7d\xf3\x29\xd5\x8b\x8c\xaa\xe0\x69\x8c\x56\x29\x34\x5a\xdb\x3a\xc7\xd0\x19\x17\xee\x17\xda\x5e\x62\x32\xa1\xe9\x0f\x13\x78\x94\x98\x7c\x22\xd9\xb9\xeb\x33\x43\xee\x6b\x35\x3a\x9c\xe5\xee\xd6\x51\xde\xf6\x4a\xca\x09\x7b\xdf\xce\x59\xa1\x55\x7e\x58\xa5\xff\xce\xd5\x17\xdf\x64\xb8\x44\xcb\xd6\x13\xd8\xcf\x2c\x14\x65\x12\x40\xca\xef\xc5\x54\x9f\x8b\x79\x12\xcd\x4b\x84\xed\xea\xad\x0b\x7d\x28\xa3\xba\xc5\xd9\x78\xf7\x70\xf5\xa6\x49\x65\xfc\x2e\xd8\xd4\xdb\xa0\x65\x8f\xda\x0e\x20\xa3\xfc\xd1\xdb\xb4\x15\x5a\x59\xf5\x34\xe7\x9d\x50\x77\x88\xfe\xff\xf5\xed\x88\x0b\x5d\x3b\x3f\xd3\x67\x37\x26\x78\x68\x41\x63\xdc\x4f\xe1\x7d\x14\xe0\xae\x8d\x6f\x69\xb9\x40\xec\x46\x70\xbf\xfb\x51\x5f\xca\x3d\x7b\xab\xeb\xa6\x7e\x36\x26\xe8\xdb\x22\x6d\x19\x8e\x5f\xe8\x09\xb8\xc4\xd3\x27\xc4\x96\x30\xa7\x38\x71\x40\x29\x42\x27\x3f\xa6\x17\x1d\xaa\x9d\x69\xa1\x5a\x64\xac\xbc\xff\x50\x46\xf2\x90\xe2\x85\xe3\x6e\x80\xaf\x99\x58\x11\xb6\x1c\xb8\x07\xdc\xe6\xef\x9f\xb6\x0f\x34\x6e\xd9\x26\x28\x91\x47\xbd\xbb\x60\xed\x0a\xc7\xa2\x83\x89\xbf\x6e\x0e\xf5\xfb\xb4\xd6\x9d\xdd\xd9\xaf\x45\x24\xb5\x57\x06\x91\xbc\x9e\x6b\xe3\x21\x72\xed\x8e\x62\xb5\x9e\xe1\x11\xec\x8d\xfb\xf7\xf9\xcd\xff\x02\x00\x00\xff\xff\xc1\xf4\xed\xfb\xff\x4f\x00\x00")

func regoSpecJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecJson,
		"rego-spec.json",
	)
}

func regoSpecJson() (*asset, error) {
	bytes, err := regoSpecJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.json", size: 20479, mode: os.FileMode(420), modTime: time.Unix(1562019161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoTypeMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\x9b\x40\x10\xc6\xef\x7e\x8a\x11\xa9\x54\xa9\x6a\x4c\x4f\x3d\xf8\x5e\xa9\x97\x4a\x3d\xf4\x56\xf5\x30\x66\x07\x98\x64\xd9\xdd\xce\x0e\x49\x69\xc5\xbb\x57\x0b\x36\x0e\x98\xd8\x91\xa2\xf8\x04\xf3\x87\x99\xfd\x7d\x9f\xf7\xdf\x06\x00\x20\x7b\x17\x8b\x9a\x1a\xcc\x76\x90\xd5\xaa\x61\x97\xe7\x77\xd1\xbb\xdb\x31\xba\xf5\x52\xe5\x46\xb0\xd4\xdb\x4f\x9f\xf3\x31\x76\x93\x7d\x1c\x3b\x95\xd5\x52\xea\xfb\xd1\x05\x82\x6f\x18\x02\xbb\x2a\x1e\xb3\x86\x62\x21\x1c\x94\xbd\x1b\x6a\x6a\x8e\x50\xb2\x25\xe0\x08\x6d\x24\x03\xea\xa1\xc1\x00\xf4\x47\x49\x1c\x5a\xd0\x2e\x50\x4c\x51\x8b\xae\x6a\xb1\x22\x88\x81\x0a\x2e\xb9\x88\xdb\x69\x64\x17\x86\x89\x7e\x7f\x47\x85\x1e\xa3\x68\x0c\xa7\x39\x68\xbf\x8b\x0f\x24\xca\x14\xb3\x1d\x94\x68\x23\x1d\x4a\x02\x6a\x1a\x33\xcb\x8f\x00\x86\xf4\xf6\xc3\xec\x7d\x04\x23\x54\xa6\x59\x37\xb9\xa1\x92\xdd\x30\x21\xe6\xc3\x06\x53\x61\x3f\x3c\xf5\xd3\x91\xa7\xba\xf9\xe7\x0f\x6b\x2f\x06\xcc\xf8\x1d\xce\x32\x25\xd7\xf0\xdd\x53\xf7\x94\x9e\x0a\xba\x68\x31\x95\x00\xba\x39\xc8\xf7\x11\x62\xbb\x4f\x4f\x50\x8a\x6f\x00\x27\x98\x43\xfd\x76\x39\x6e\x15\xec\x94\xbd\x0e\x78\x2a\xbd\x0c\xfa\x12\xf0\x2b\xe0\x9b\xd1\x5f\xd9\x59\x4f\xbf\x59\x7f\xeb\x4f\x9b\x65\xc7\xe6\xe7\x35\x38\xd8\xf7\xaa\x0c\x04\x05\x2a\x55\x5e\x4e\x52\xec\x3b\xa8\xc8\x91\xa0\x7a\x89\xc0\x0e\xbc\x18\x92\xa7\x0a\xd1\xd2\xe5\xec\x52\xb6\x26\x16\xf0\x8f\x0e\xb8\x09\x96\x1a\x72\xfa\xc6\xe2\x08\xfd\x6e\x59\xc8\x64\x3b\xf8\x79\xae\xc9\xdc\xda\xe9\xf7\x6b\x29\xee\x15\x55\x57\x7d\x7e\x89\xe5\x04\xc8\x0c\x60\x96\x27\x3f\x23\x10\x55\xd6\x3d\x70\xde\x97\x25\xe7\xbc\x78\x99\xaf\xfe\x31\x09\x36\xb8\x0d\x2d\xff\xa5\xa4\xce\x1b\xec\xd4\x04\x2f\x2f\xdf\xea\xcb\x03\x39\x6d\xd1\xc2\x49\x63\x18\x3f\x01\x5e\x20\x60\x71\x9f\xae\x49\xad\x51\x21\x88\x7f\x60\x93\x2e\xd0\x57\xef\xfd\xdc\xff\x69\xbc\xeb\x36\xfd\xe6\x7f\x00\x00\x00\xff\xff\x9a\x8a\x83\x1c\x3a\x06\x00\x00")

func regoTypeMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoTypeMappingJson,
		"rego-type-mapping.json",
	)
}

func regoTypeMappingJson() (*asset, error) {
	bytes, err := regoTypeMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-type-mapping.json", size: 1594, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoValidationMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x8e\xd3\x30\x10\xc6\xef\x7d\x8a\x51\x16\x09\x09\xed\x36\x9c\x38\xf4\xce\x11\xc4\x61\xc5\x05\x71\x98\xc6\xe3\xd4\xbb\xfe\xc7\x78\x52\xa8\x50\xde\x1d\x39\x69\x9d\x4d\xda\x6e\x11\x12\xa7\x3a\xfe\x66\x3c\xe3\xdf\x37\xf5\xef\x15\x00\x40\xf5\x26\x35\x3b\x72\x58\x6d\xa0\xda\x89\xc4\x4d\x5d\x3f\xa5\xe0\x1f\xc6\xdd\x75\xe0\xb6\x56\x8c\x5a\x1e\xde\x7f\xa8\xc7\xbd\xbb\xea\x7e\xcc\x14\x23\x96\x72\xde\x57\xb4\x46\xa1\x98\xe0\xe1\x13\xc6\x68\x7c\x7b\x0a\x51\x94\x1a\x36\x31\x4b\x39\xf0\x71\x67\x12\x68\x63\x09\x4c\x82\x2e\x91\x02\x09\xe0\x30\xc2\x7e\x3a\x41\x77\xbe\xc9\x8b\x94\x35\x8b\xbe\xed\xb0\x25\x48\x91\x1a\xa3\x4d\x93\xd6\xa5\xfa\x21\x0e\xc5\xc3\xf6\x89\x1a\x39\xed\xa2\x52\x26\x67\xa3\xfd\xc2\x21\x12\x8b\xa1\x54\x6d\x40\xa3\x4d\x74\x0c\x89\x28\x42\xec\x67\xfa\xc8\x62\x90\xd7\xef\x66\xdf\x23\x23\x26\x9d\x6b\xdd\xd5\x8a\xb4\xf1\x43\x85\x54\x0f\x1d\x94\xc0\x7e\x58\xf5\xe5\xe2\x25\x6e\x7e\xfc\xb1\xed\x45\x81\x82\xf2\x31\xcb\xf7\x73\xf1\x12\xc4\x67\x3a\xbc\x64\x28\x8c\x3e\xd9\x11\x20\x7a\xa0\x5f\xf9\x86\x68\x21\x57\x7b\x9b\x20\x75\xdb\xbc\x02\xcd\xc1\x01\x16\x98\x43\xfc\x7a\x59\xee\x22\xd8\xa2\xde\x06\x5c\x42\x5f\x07\xfd\x1a\xf0\x1b\xe0\xdd\x71\xc8\xce\x72\xfa\xd5\xe5\xaf\x7e\xea\xac\x3a\x25\x5f\xf7\x60\x3e\xc3\xd7\x6d\x20\x68\x50\xa8\x0d\x3c\x59\xb1\x3d\x40\x4b\x9e\x18\x25\x70\x02\xe3\x21\xb0\x22\x7e\xe9\x10\xcd\xcd\xc9\x41\x59\xdd\x91\x61\x08\x3f\x3d\x18\x17\x2d\x39\xf2\xf2\x9f\xcd\x61\xfa\xd1\x19\x26\x55\x6d\xe0\xdb\xb9\x27\x1e\x1d\xcd\xf1\x7e\x5f\x9a\x7b\xc3\xd5\xe1\x84\xab\xbe\x2e\x58\x7e\x46\x47\x10\x74\xc6\x50\xfe\xff\x19\x5a\x83\xd6\xe6\xdf\x48\xac\x03\xbb\x41\x9f\x9e\x8a\x25\x9c\x33\x48\x49\xf8\xf2\x98\x9c\xe7\x55\xc6\xc5\xc0\xf2\xd7\x1d\x7f\xdc\x93\x97\x0e\x2d\x4c\xc8\x61\x3c\x02\x02\x43\xc4\xe6\x39\xbf\x5a\xb2\x43\x81\xc8\x61\x6f\x14\xa5\x45\xf7\xe5\xa2\xff\x7e\x8d\x6b\xd3\x3e\xbe\x44\xab\x7e\xf5\x27\x00\x00\xff\xff\x75\x74\x59\xb0\xe3\x05\x00\x00")

func regoValidationMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoValidationMappingJson,
		"rego-validation-mapping.json",
	)
}

func regoValidationMappingJson() (*asset, error) {
	bytes, err := regoValidationMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-validation-mapping.json", size: 1507, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen.sh": genSh,
	"rego-abstract.in": regoAbstractIn,
	"rego-abstract.json": regoAbstractJson,
	"rego-attribute.in": regoAttributeIn,
	"rego-info.json": regoInfoJson,
	"rego-param.in": regoParamIn,
	"rego-shared-params.in": regoSharedParamsIn,
	"rego-shared-params.json": regoSharedParamsJson,
	"rego-spec.in": regoSpecIn,
	"rego-spec.json": regoSpecJson,
	"rego-type-mapping.json": regoTypeMappingJson,
	"rego-validation-mapping.json": regoValidationMappingJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gen.sh": &bintree{genSh, map[string]*bintree{}},
	"rego-abstract.in": &bintree{regoAbstractIn, map[string]*bintree{}},
	"rego-abstract.json": &bintree{regoAbstractJson, map[string]*bintree{}},
	"rego-attribute.in": &bintree{regoAttributeIn, map[string]*bintree{}},
	"rego-info.json": &bintree{regoInfoJson, map[string]*bintree{}},
	"rego-param.in": &bintree{regoParamIn, map[string]*bintree{}},
	"rego-shared-params.in": &bintree{regoSharedParamsIn, map[string]*bintree{}},
	"rego-shared-params.json": &bintree{regoSharedParamsJson, map[string]*bintree{}},
	"rego-spec.in": &bintree{regoSpecIn, map[string]*bintree{}},
	"rego-spec.json": &bintree{regoSpecJson, map[string]*bintree{}},
	"rego-type-mapping.json": &bintree{regoTypeMappingJson, map[string]*bintree{}},
	"rego-validation-mapping.json": &bintree{regoValidationMappingJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

