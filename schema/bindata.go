// Code generated by go-bindata.
// sources:
// gen.sh
// rego-abstract.in
// rego-abstract.json
// rego-attribute.in
// rego-info.json
// rego-param.in
// rego-shared-params.in
// rego-shared-params.json
// rego-spec.in
// rego-spec.json
// rego-type-mapping.json
// rego-validation-mapping.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x6b\xc4\x20\x14\x84\xef\xfe\x8a\xd7\xb4\x60\x7b\x50\x7f\x40\xa0\x90\x42\x0e\x3d\x14\x4a\xb0\x67\x79\x1a\x6b\x6c\x1b\x15\xb5\xff\x7f\xd9\x6c\x58\xb2\x61\x2f\xcb\x1e\xdf\x0c\x33\xf3\xf1\x1e\x1f\x84\xf6\x41\x68\x2c\x13\x21\xc9\xe6\x3f\x60\xc9\x02\x2d\x42\xa9\x4e\xca\xe1\xfd\xed\x4b\xf6\x4a\x09\xda\x3c\x3d\x1b\xac\x90\xad\x8b\x0c\x6b\xcd\x5e\xff\x57\xcb\x7d\x78\x69\xa8\x70\x2d\x5d\x0d\x5d\x6a\x46\x53\xb9\x0f\xf0\xba\x93\x7e\x4a\x0c\xf7\x0c\x9c\x53\x9f\xdd\xd0\x7d\xf4\xb2\x1f\xf6\xa9\x84\x19\xe7\x3d\x52\x49\xd6\x6c\x70\x96\xf3\x0a\xca\x8d\xa5\x13\x66\x3b\x9e\xbc\xb2\x6d\xbf\xd0\x97\x19\x92\x67\x60\xdf\xc0\x8f\x5f\x1e\xb1\x22\x77\xb1\x25\x2e\xb2\xf5\x04\x96\x7e\x1d\x14\x33\xd9\x19\x81\x93\x43\x00\x00\x00\xff\xff\xfe\x7b\x84\xde\x8e\x01\x00\x00")

func genShBytes() ([]byte, error) {
	return bindataRead(
		_genSh,
		"gen.sh",
	)
}

func genSh() (*asset, error) {
	bytes, err := genShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.sh", size: 398, mode: os.FileMode(493), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\xc4\x30\x10\x44\xfb\x7c\xc5\x2a\x47\x79\x87\xa9\x28\xd2\x1d\x12\x05\x1d\x42\xa1\x8e\x36\xf6\x9a\xf8\x64\x6c\x6b\x77\x4f\x08\xa1\xfc\x3b\x4a\x0c\xe1\xa0\xa0\xb3\x76\xde\x78\x46\xf3\xd1\x00\x00\xb4\x57\x62\x27\x7a\xc5\xb6\x83\x76\x52\x2d\x9d\x31\x27\xc9\xe9\x50\xaf\xd7\x99\x5f\x8c\x63\xf4\x7a\xb8\xb9\x35\xf5\xb6\x6b\xf7\xd5\xa9\x41\x23\x2d\xbe\xe3\x28\xca\x68\xf5\x5b\x70\x24\x96\x43\xd1\x90\xd3\x2a\x27\xc0\x2f\x02\x30\xc6\xfc\x26\xa0\x19\x1c\xd9\x88\x4c\x80\x20\xa4\x90\x3d\x8c\x28\x04\xa8\xca\x61\x3c\x2b\x09\x60\x72\x26\x33\x30\x45\x5c\x7e\x12\xd0\x09\x15\x2c\x26\x18\x09\x98\xce\x42\x0e\x42\xd2\x0c\x59\x27\x62\x90\x42\x36\xf8\x60\x2b\xbc\x75\x7c\x2f\x6b\xc5\x3c\x9e\xe8\xa7\x20\x3a\x17\x16\x0c\xe3\x23\xe7\x42\xac\x81\xa4\xed\xc0\x63\x14\xda\x37\x95\x29\x97\x4a\xdd\xaa\x7a\xb7\x86\xbf\xee\x75\x4b\x26\xbf\xa4\xed\x8c\x23\x1f\xd2\x9a\x21\xe6\xc2\xb1\xe1\xf3\xfa\x9a\xb7\xc1\x36\xfa\xdf\xb0\x61\x38\xf6\xfd\xd3\xc3\xdd\x73\x7f\x3f\x0c\x7f\xff\x6a\xe6\xe6\x33\x00\x00\xff\xff\x33\x37\x6b\x77\xd3\x01\x00\x00")

func regoAbstractInBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractIn,
		"rego-abstract.in",
	)
}

func regoAbstractIn() (*asset, error) {
	bytes, err := regoAbstractInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.in", size: 467, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4d\x6f\xdc\x38\x0f\xbe\xe7\x57\x10\xd3\x02\x05\xde\x37\xd3\xe9\x5e\x16\x68\x6e\x39\xf4\x50\x60\xb1\x5b\x2c\xf6\xd4\x20\x1d\xd0\x36\x3d\x56\x2b\x4b\x2a\x25\x27\x99\x5d\xf4\xbf\x2f\x24\x7f\x8c\x3d\x5f\x76\xc6\xce\x4c\xf7\x94\x89\x44\x52\x7c\x48\x8a\xa4\x24\xff\x73\x05\x00\x30\x7b\x6d\xe3\x8c\x72\x9c\xdd\xc0\x2c\x73\xce\xdc\x2c\x16\x5f\xad\x56\xf3\x72\xf4\xad\xe6\xd5\x22\x61\x4c\xdd\xfc\xdd\xaf\x8b\x72\xec\xd5\xec\xba\xe4\x74\xc2\x49\xf2\x7c\xb7\x91\x75\x8c\xb1\xab\x27\x12\xb2\x31\x0b\xe3\x84\x56\x61\x5a\x01\x56\x14\x80\x52\xea\x47\x0b\x4e\x43\x42\xb1\x44\x26\x40\xb0\xe4\x40\xa7\x10\xa1\x25\x40\xe7\x58\x44\x85\x23\x0b\xa8\x92\x85\x66\x60\x92\xe8\x25\x59\x70\x19\x3a\x88\x51\x41\x44\xc0\x54\x58\x4a\x40\x28\xa7\x41\xbb\x8c\x18\xac\xa1\x58\xa4\x22\x2e\x89\x1b\x1d\xd7\x26\xa8\xa8\xa3\xaf\xb4\x51\x10\x93\x44\x78\x32\x94\x9f\x58\x1b\x62\x27\xc8\xce\x6e\x20\x45\x69\xe9\xfa\xaa\xa4\x31\xed\x99\xd2\x56\x25\x6f\xa3\x61\x67\xbc\xb4\x25\x53\xea\x57\x7b\xb5\x48\x28\x15\x2a\xac\x61\x17\x2d\x8e\x86\xfc\x47\xf8\xf5\xa3\x31\x58\x43\x3d\x7c\xb1\xbd\xd0\x9a\xd9\x2d\x1f\xfc\x26\x6c\x30\xf2\x03\xb1\x15\x5a\x51\xd2\xb2\xf4\xdb\x6d\xde\xe3\xe6\xe9\x90\x1a\x74\x8e\x58\x7d\xda\x6f\xac\x86\xec\xcb\xc3\xdd\xbb\xf9\xfb\xfb\xff\xbf\xde\x3b\xdd\x81\x83\xcc\xb8\xde\xd2\xa8\x0f\x55\x2b\x6a\x84\x02\x04\x83\xec\x44\x5c\x48\xe4\x1a\xf0\x5b\xf8\xe8\xe0\x51\x48\x09\x85\x8f\x32\x29\xdb\x3c\x29\xeb\x1c\x5c\x46\x60\x98\x1e\x84\x2e\x6c\xcd\x15\x82\x10\x30\x49\x40\x33\xe8\x07\xe2\x47\x16\x8e\x02\xa9\x56\x64\xeb\x18\x4e\xb6\x2d\xd8\xe8\x2b\x1c\xe5\xfb\x4d\x32\xcc\x8d\xc7\xc0\xff\x49\x86\xc9\x92\x72\x5e\xcb\x0d\x1c\x6f\x0f\xaf\x20\xd7\xd3\x94\x40\x29\xfb\x90\x96\x41\x38\xd3\xf7\x42\x30\x25\xb3\x1b\xb8\x3b\x48\x15\x28\x15\xe6\x74\x44\xd2\x06\x54\x0f\x4d\x1b\xce\x41\xca\xfb\x23\x2a\x0f\x0f\xd3\x0e\xdb\x81\x8d\xbd\x7f\x09\x9f\xae\x28\x59\xc6\x19\x72\x3f\xf9\x0e\xac\xe0\xa5\x15\x3d\x99\x32\x77\x21\x58\xc7\x42\xad\x5a\xce\xca\x0b\xeb\x20\xd3\x4a\xb3\xcf\x89\x11\xc1\x03\x4a\x91\xf4\x98\x0e\xda\x71\x53\x8a\x3c\x6c\x41\xd8\xe4\x99\x01\x30\xb5\x88\x07\xd8\x65\x1f\xd0\xdb\x52\x86\x07\x50\xf8\x3d\xa5\x79\x37\x2c\xd7\x86\xe0\x83\x2a\xf2\xe7\xe0\x3b\x96\x0f\x3a\x0c\xfd\x7b\x6d\xaf\xfc\xca\x7e\xfd\x0b\x40\x2b\xdf\x79\xc6\x2f\x77\xb7\xf3\xcf\xbf\xcc\xdf\xdf\xdf\xe1\xfc\xef\xdb\xf9\x67\x9f\xe0\xfe\xf7\xfa\xb8\x23\xa0\x49\xfd\x07\x67\xfb\x5c\x55\x38\xbd\x22\x45\x8c\x2e\x6c\xd6\xe7\x3b\xea\xaf\xac\x55\x66\x41\x58\xe8\x88\x84\x68\x1d\xd2\x47\x84\xf1\x37\x52\xcf\x8a\xc4\x48\x6b\x49\x78\x64\x33\x0f\xc1\x17\x33\x85\x0a\xbe\xd4\x4a\xae\x27\xc0\xe7\xfb\x05\x2f\xca\xef\x2d\xdf\x68\x24\x45\xd8\x81\x61\x19\x02\x9f\x09\xc2\x72\x67\xc7\x99\x50\x8a\x85\x74\x4b\xcd\x09\xf1\xc9\x38\xc3\x66\xab\x33\x7e\xc7\xa9\xa1\x3d\x42\x5f\xa2\xc2\x3a\x10\xd6\xf1\xc8\xbf\xd1\xa0\xdd\xf4\x22\x60\x83\xba\x27\x83\xad\xa1\xec\x07\xfd\x0c\x50\x77\x75\x52\xd9\xc0\xbb\x86\x99\x50\x8e\x56\xc4\xfe\xa7\x2a\xa4\x2c\xff\xe6\x51\x39\x52\x57\xe7\x26\x5f\xdc\x8f\x34\x88\x61\x8a\xa7\xdb\xc2\x2d\x79\xe7\xf7\x6d\x5b\xb5\x53\x3d\xdb\x0c\x8d\xf1\xeb\x24\xb5\x90\x9e\x30\x37\x92\x46\xc4\xea\x87\x52\x42\x15\xa7\xbe\x10\xfe\x77\x03\x95\x9e\x8c\xb6\x53\x45\xa9\x29\x22\x29\x62\xb9\x86\x5a\xea\x09\xb1\x3a\x80\xa5\xca\x13\x9e\xcb\x71\x41\x63\xc3\xc1\x91\xb2\x3b\x27\xb3\x23\x8b\x77\x6c\xf0\x87\xc1\xef\x05\xf9\xa4\x5b\x85\x83\x41\xc1\xdd\xa3\x6c\xc8\xd4\xd1\x1a\x62\x9d\x1b\x21\x89\x77\xce\x63\x7b\xd7\xd9\x3a\x36\x8c\xc2\x98\x0a\xe9\x88\x31\x92\xa7\xe7\xe6\x6e\xc1\xad\x51\xf9\xd8\x2f\x85\xfb\xca\x63\x0a\xf6\x6e\xb7\x67\x4f\x51\xa9\x66\x12\x2b\xb5\xf4\xa5\x6f\x9a\x8e\x09\x2a\x91\x17\xa9\xa6\x2b\xf2\x3d\xe8\x04\x48\xc2\x79\x38\xc3\x07\x02\x84\x4d\x03\x58\x89\x3f\x37\x2a\x91\x90\x72\x22\x15\x93\x20\x6b\x35\x40\x08\x39\x0a\x05\x2d\xf1\x2f\x93\x75\x0a\x25\xbe\x17\xf4\xb1\x3a\x84\xf8\xc4\x33\xca\x1c\x39\x3e\x2d\x25\xa9\x95\xcb\x4e\x36\x47\x8e\x4f\x22\x2f\x72\x28\xc5\xec\x76\x89\xf5\x89\x6c\xf0\x09\xa8\x31\x4b\x5d\x81\x46\x23\x1c\xd7\x10\xd6\x00\x0f\x74\xc1\x35\xbe\xa6\x5e\x9e\x1b\xa0\x50\xa3\x5d\x28\xd4\x4f\xed\x42\xa1\xc6\xba\xb0\x02\xf8\x93\xba\x30\xdc\x75\x9d\x8a\xcd\x33\x5f\xbc\x9d\xd5\xb9\x70\x4b\xca\x8d\x3b\xad\xf4\x7d\x4c\x43\x2a\xbb\xde\xf2\x4b\x55\xe4\x13\xd6\xc6\x50\x02\x22\x85\xb0\x04\x68\x86\xb2\x25\x3d\x73\xf1\x08\xa7\xdb\x17\x6a\x60\x9a\x93\xf3\xc5\xfa\x17\xc3\x22\x47\x5e\x4f\xd7\xbf\x94\xb5\x11\x2a\xb9\x17\x69\x62\x98\x30\x99\xea\x8e\x47\x58\xf0\xe2\xc2\x3d\xcf\x05\x80\x34\x17\xe7\x93\xe0\xa8\xa4\x9d\x1b\x86\xa5\x98\xc9\x4d\x03\xa2\x94\x15\xde\x4e\x6c\xa6\x0b\x99\x84\x5c\x41\x28\x1d\x3c\x0a\x97\x41\x8c\xfc\xac\x3c\x38\x11\xc0\x17\xed\x9a\xed\x65\xba\x66\xeb\xf4\x64\xb1\x57\xc9\x7a\xe9\x43\xf9\xe8\xd6\xd8\x16\x51\xa5\xc0\xb8\xba\x9c\xa3\x31\x3e\xaf\x3b\x0d\x46\xc4\xdf\x42\xb2\x7f\xcc\x48\x85\x5a\x57\xb6\x1d\x36\xdc\x19\x3b\x0d\x6f\xe8\xc9\x11\x2b\x94\x6f\xce\x5d\xc0\x1d\xa3\xb2\x82\xd4\x44\x7b\x73\x23\xee\xdc\xa1\x3a\xca\x67\xc1\x1d\xed\x97\xde\x13\xdc\x30\x80\x83\x54\x91\xf7\xbe\x80\x36\xd4\xcf\x7b\x3a\x1a\xde\xc3\x06\xf2\x54\x6a\x1c\xe2\xa4\x40\x3c\x7c\x23\x42\x03\x73\x20\xad\x14\x76\xb0\x1a\xbd\x6f\xd8\x1d\x6a\x27\x7a\x1f\x92\x1b\xda\x7a\xfb\xf5\x3f\xaf\x8d\xbb\xef\x0c\xcf\xaf\xb8\xfb\x25\xc6\x41\x86\xad\x58\xfd\xbd\xca\x2d\x08\x71\x61\x9d\xce\x61\x23\x70\xf3\x99\xc1\xb2\x3d\x28\x24\xf9\x04\x83\xc6\xc8\xb5\xff\x71\xf2\x69\xe1\x4c\x0f\xa5\xbd\x4c\x3d\xef\x9b\x07\x67\xf7\xcf\xec\x8e\x76\x47\x36\xff\x55\x9f\xd4\x5c\xfd\xb8\xfa\x37\x00\x00\xff\xff\xcc\x4b\x48\x7d\xda\x24\x00\x00")

func regoAbstractJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractJson,
		"rego-abstract.json",
	)
}

func regoAbstractJson() (*asset, error) {
	bytes, err := regoAbstractJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.json", size: 9434, mode: os.FileMode(420), modTime: time.Unix(1533265479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAttributeIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x4f\x6f\xdb\x36\x14\xbf\xf7\x53\x3c\x18\x05\x0a\x6c\x49\xb1\x1d\x9b\x5b\x0e\x3d\x04\x18\xb6\x61\xd8\xa9\x69\x6a\x3c\x49\xcf\x36\x17\x8a\x64\x1e\x49\xc7\xde\x90\xef\x3e\x90\x92\x6c\xc9\xb1\x2d\x59\x52\xec\x56\x97\x18\xd2\xe3\x8f\xfc\xbd\xff\x24\x03\xb5\x67\xe2\xd6\x86\x26\x37\x30\xd1\xc9\x3f\x94\xba\xc9\xd5\xbb\xc6\xd7\x8c\x6c\xca\xc2\x38\xa1\x55\x10\xfa\x4d\x58\x07\x7a\x06\x4b\x62\x2b\xb4\xa2\x0c\xd0\x39\x16\x89\x77\x64\x3f\xee\x8e\xc5\x2c\x13\x61\x20\xca\x3f\x59\x1b\x62\x27\xc8\x4e\x6e\x60\x86\xd2\xd2\x8e\xa8\x41\xe7\x88\x55\x43\xee\xbf\x86\x48\x14\xfb\xb6\xbc\xff\xe5\xfa\xd3\xc3\xcf\x5f\xdf\xef\xfd\xde\xe0\x83\xcc\xb8\xde\x59\x52\x1b\xad\x2d\x19\x10\x0a\x10\x0c\xb2\x13\xa9\x97\xc8\x15\xe3\x8f\x70\xe7\xe0\x59\x48\x09\xde\x12\xa0\x94\xf5\x31\x33\xd6\x39\xb8\x05\x81\x61\x5a\x0a\xed\x6d\x35\xca\x02\xaa\x0c\x30\xcb\x40\x33\xe8\x25\xf1\x33\x0b\x47\x51\x54\x2b\xb2\x90\x51\x2a\x91\x29\xdb\x55\xe1\x66\xbd\xc2\x51\xbe\x5f\x27\xdd\xec\x78\x8c\xfc\x5f\x64\x98\x2c\x29\x17\x56\xb9\xa5\x13\xf4\x11\x16\xc8\xd5\x67\xca\xa0\xc0\x3e\xb4\xca\x08\xce\xf4\xe4\x05\x53\x36\xb9\x81\xfb\x83\x52\x51\x52\x61\x4e\x47\x90\xb6\xa4\x5a\x64\xea\x74\x0e\x4a\x3e\x1c\x59\x72\x77\x3f\x6d\x0c\x33\xc7\x9d\xb5\x39\x85\x94\xfa\x99\xb2\x69\xba\x40\x6e\x17\x7f\x45\x2b\x5a\x69\x4e\x2b\x03\x6e\x81\x0e\x10\xac\x63\xa1\xe6\x35\x63\xe5\xde\x3a\x58\x68\xa5\x19\x9c\x86\x84\x60\x89\x52\x64\x2d\xaa\x83\xba\xdf\x14\x90\x87\x35\x18\x9e\x97\x16\x53\x6c\x69\x6a\x91\x76\xd0\xcb\x3e\xa2\xb7\x05\x46\x20\xe0\x43\x4c\x69\x7e\xed\x96\x6b\x43\xf0\x59\xf9\xfc\x14\x7e\xc7\xf2\x41\x63\x40\x7b\xac\xed\xc5\x2f\xf5\xd7\x3e\x01\xd4\x12\x5e\x18\xf8\xed\xfe\xf6\xfa\xcb\xaf\xd7\x9f\x1e\xee\xf1\xfa\xdf\xdb\xeb\x2f\x21\xc3\xfd\xf4\xf5\xfd\x71\x4b\x84\xe7\x65\x98\xad\xbc\xd3\x73\x52\xc4\xe8\x62\xb4\x9e\x6e\xa9\xbf\x17\x54\xb3\x8b\xb0\xd0\x80\x84\x64\x1d\xf3\x47\x82\xe9\x23\xa9\x93\x5c\x31\xd1\x5a\x12\x1e\x89\xe6\x2e\xfc\x52\x26\x0c\x2b\x9d\x6a\x25\xd7\x23\xf0\x4b\x51\x41\x80\x0a\xc1\x65\xc9\x41\xe6\x63\x08\xc6\x69\x08\x42\x2a\x88\xd3\x9d\x9d\x67\x46\x33\xf4\xd2\x4d\x35\x67\xc4\xbd\x79\xc6\x68\xab\x52\x7e\xc3\xa8\xde\x86\x2a\x1f\x6a\x54\x9c\x07\xe2\x3c\x81\xf9\x23\x75\x0a\xa7\x37\x21\x1b\x97\xdb\x9b\x6c\x45\x65\x3f\xe9\x13\x48\xdd\x57\x59\x65\x4b\xef\x0a\x26\x42\x39\x9a\x13\x87\x9f\xca\x4b\x59\xfc\xcd\x93\xe2\x4d\x55\x9e\x37\x09\xe3\x61\xa0\x42\x0c\x53\x3a\x5e\x08\xd7\xf0\xce\x6f\xdb\xfa\xd2\xfa\x5a\x76\xf3\x6a\x88\x5d\x47\x29\x86\xb4\xc2\xdc\x48\x1a\xe0\xab\x9f\x0b\x84\xd2\x4f\x43\x25\xfc\x71\x1d\x95\x56\x46\xdb\xb1\xbc\xd4\xf8\x44\x8a\x54\xae\xa1\x42\xed\xe1\xab\x1d\x86\x94\x79\x22\x8c\x72\xec\x69\xa8\x3b\x38\x52\x71\x33\xd0\x4b\x07\x7f\x18\x7c\xf2\x14\x92\x6e\xe9\x0e\x06\x05\xdb\xa2\x1f\x0c\xa5\x29\xa1\x22\x53\x27\x6b\x48\x75\x6e\x84\x24\x7e\xb5\x23\xdb\x3b\xcf\xce\xbe\x61\x10\xc7\x99\x90\x8e\x18\x13\xd9\x3f\x37\x37\x0b\x6e\xc5\x2a\xf8\x7e\x01\x1e\x2a\x8f\xf1\x1c\xcc\x6e\xcf\x9e\xa2\x66\x9a\x49\xcc\xd5\x34\x94\xbe\x71\x3a\x26\x28\x21\x2f\x52\x4d\xe7\x14\x9a\xd0\x11\x98\xc4\x0d\xf1\x02\x97\x04\x08\xdb\x06\xb0\x84\x3f\x37\x2b\x91\x91\x72\x62\x26\x46\x61\x56\x6b\x80\x10\x72\x14\x0a\x6a\xf0\x6f\x93\x75\xbc\x12\x4f\x9e\xee\xca\x5d\x48\x48\x3c\x83\xd4\x91\xe3\x6a\x2a\x49\xcd\xdd\xa2\xb7\x3a\x72\x5c\x89\xdc\xe7\x50\xc0\xbc\xee\x12\xab\x2d\x59\xe7\x2d\xd0\x46\x2d\x55\x05\x1a\xcc\x70\x58\x43\x58\x11\x3c\xd0\x05\x57\xfc\x36\xf5\xf2\xdc\x04\x85\x1a\x6c\x42\xa1\xbe\x6b\x13\x0a\x35\xd4\x84\x25\xc1\xef\xd4\x84\xf1\xb0\xab\x2f\xb7\x30\xf8\xe2\xed\xac\xce\x85\x9b\x52\x6e\x5c\xbf\xd2\x77\x37\x8b\xa9\xec\x6a\xc7\x2e\x65\x91\xcf\x58\x1b\x43\x19\x88\x19\xc4\x29\x40\x33\x14\x2d\xe9\x99\x8b\x47\xdc\xdd\xbe\x51\x03\xb3\xd9\x39\x5f\xac\x7f\x31\x2c\x72\xe4\xf5\x78\xfd\x4b\x51\x1b\xa1\xc4\xbd\x48\x13\xc3\x84\xd9\x58\x67\x3c\xc2\x42\x80\x8b\xe7\x3c\x17\x20\xb2\x39\x39\x1f\x85\x47\x89\x76\x6e\x1a\x96\x52\x26\x37\x0e\x89\x02\x2b\x5e\x9e\xd8\x85\xf6\x32\x8b\xb9\x82\x50\x3a\x78\x16\x6e\x01\x29\xf2\x49\x79\x70\x24\x82\x6f\xda\x35\xdb\xcb\x74\xcd\xd6\xe9\xd1\x7c\xaf\xc4\x7a\xeb\x4d\xf9\xe0\xd6\xd8\xfa\xa4\x5c\xc0\xb0\xba\x9c\xa3\x31\x21\xaf\x3b\x0d\x46\xa4\x8f\x31\xd9\x3f\x2f\x48\xc5\x5a\x57\xb4\x1d\x36\x9e\x19\x3b\x0d\x1f\x68\xe5\x88\x15\xca\x0f\xe7\x2e\xe0\x8e\x51\x59\x41\x6a\xa4\xd8\xdc\xc2\x9d\xdb\x55\x07\xd9\x2c\x9a\xa3\x7e\xd5\xdb\xc3\x0c\x1d\x46\x90\xf2\x79\xeb\x15\xe8\x46\xfa\xb4\xbb\xa3\xee\x3d\x6c\x14\x9f\x49\x8d\x5d\x8c\x14\x85\xbb\x07\x22\x6c\x68\x76\x94\x95\xc2\x76\x5e\x46\xeb\x25\x76\x43\xda\x89\xd6\x9b\xe4\x8d\x6c\x15\x7e\xed\xd7\x6b\xc3\xce\x3b\xe3\xfd\x6b\xbc\x11\xea\x77\xde\xf7\x7b\x99\x5b\x10\x52\x6f\x9d\xce\x61\x0b\xb8\xfd\x3f\x83\x69\xfd\xa5\x90\x14\x12\x0c\x1a\x23\xd7\xe1\x47\xef\xdd\xc2\x99\x6e\x4a\x5b\x07\xb5\xdc\x6f\x1e\xfc\xba\xff\xcb\xeb\xb7\xcd\x37\x2f\xef\xfe\x0f\x00\x00\xff\xff\x97\xfe\xde\x1e\x17\x23\x00\x00")

func regoAttributeInBytes() ([]byte, error) {
	return bindataRead(
		_regoAttributeIn,
		"rego-attribute.in",
	)
}

func regoAttributeIn() (*asset, error) {
	bytes, err := regoAttributeInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-attribute.in", size: 8983, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoInfoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x4e\xc3\x40\x0c\xc7\xf7\x3c\x85\x75\x30\xb6\x0d\x13\x43\x36\xc6\x0e\xa0\x4e\x2c\x88\xc1\x4d\x7c\xad\xab\x34\x77\xd8\x0e\x02\x55\x7d\x77\x74\xb9\xa6\x4a\x3f\x36\x96\x44\xf9\xd9\xff\x8f\xf8\x50\x00\x00\xb8\x47\xad\xb7\xb4\x47\x57\x81\xdb\x9a\xc5\xaa\x2c\x77\x1a\xba\x79\xa6\x8b\x20\x9b\xb2\x11\xf4\x36\x7f\x7a\x2e\x33\x7b\x70\xb3\xac\x34\xb6\x96\x92\x6e\xd9\xf9\x30\xc2\x86\xb4\x16\x8e\xc6\xa1\x4b\xa3\x57\x32\x04\xee\x7c\x90\x3d\x26\x06\xb8\x0e\xbd\x01\x82\x92\x41\xf0\xa0\x91\x6a\xf6\x5c\x0f\x43\x5d\x9c\xad\x7f\xe3\xe0\x1c\xd6\x3b\xaa\x6d\xa4\xd8\x34\x9c\xf6\xb0\x5d\x49\x88\x24\xc6\xa4\xae\x02\x8f\xad\xd2\x69\x45\xe8\xab\x67\xa1\xc6\x55\xf0\x31\x90\x81\x46\x21\xcf\x3f\x27\x9b\xbc\x17\x82\x4d\xbf\xbf\x49\x34\x55\x1e\xc8\xe7\xac\x28\x4e\xba\x49\xcc\xe1\xc6\x6f\xca\x2e\x6a\xab\x09\x77\x9b\x89\xff\xbd\xd3\xac\x06\x13\xb0\x00\xbd\x52\x7a\xd5\xd8\xb6\x80\x91\xd5\x9d\x75\xc7\xeb\xca\xff\x8b\x7c\xc3\x3d\xa5\xab\xdb\x96\x20\xd9\x5d\x9e\xff\x56\xec\xb1\x6f\x53\x66\xce\xbe\xdb\x6a\x3c\xdc\x4d\xb1\xab\xe8\xf7\xbc\x37\xa6\xbf\xac\x96\xd7\x71\xe3\x9f\x70\x67\xb4\x21\x99\xc4\x15\xf9\x79\x2c\xfe\x02\x00\x00\xff\xff\xb8\x06\xde\x01\xb3\x02\x00\x00")

func regoInfoJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoInfoJson,
		"rego-info.json",
	)
}

func regoInfoJson() (*asset, error) {
	bytes, err := regoInfoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-info.json", size: 691, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoParamIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcb\x6e\xdc\x3a\x0c\xdd\xe7\x2b\x08\xaf\x83\xfb\x01\x59\x27\x8b\x0b\xb4\xc5\xa0\x0d\xba\x09\x82\x80\xb6\x39\x33\x2c\xf4\x70\x25\x39\x0f\x14\xf9\xf7\x42\xf6\x78\x62\x8d\x2d\x5b\xb6\x51\xb4\xde\x0c\x6c\x91\x47\xd4\xe1\x21\xc5\x81\xde\x93\x39\x76\x82\xb2\x1b\xc8\x76\x68\x50\x92\x23\x03\xdf\xc8\x65\xd7\x57\xa1\xd5\x5b\xd5\x18\xe9\xfc\x07\x15\x83\x55\x2c\x4b\x76\xac\x15\x8a\x9d\xd1\x15\x19\xc7\x64\xb3\x1b\xd8\xa3\xb0\x74\x61\x5a\xf5\x0d\x7e\x05\x6b\xcd\xba\xa1\x9f\x35\x1b\x2a\x47\x57\x23\x01\x5b\xf8\xda\x7a\x49\x52\xce\xc2\xdd\x6b\x65\xc8\x5a\xd6\xca\x5e\x04\x7a\xc6\x28\xc9\x16\x86\x2b\x1f\xb3\x47\xba\xa5\x3d\x2b\x82\x97\x23\x3a\x28\xb4\xcc\x59\xa1\x5f\xb2\xa0\xf7\x50\x7d\xec\x82\x86\xa0\x8b\xef\xbf\x18\x74\xc7\x14\x1a\x83\x6f\x31\x23\x76\x24\xc7\x09\x58\x84\x93\x88\xb5\x08\x6f\x01\x66\x80\x6b\x9d\x61\x75\xc8\x26\x1d\xde\xa3\xab\xe3\x2b\xc3\xaf\xef\xc3\xc0\x33\x52\xce\xc4\xf4\x04\x81\x62\x3e\xb1\x75\x3e\xa7\x1f\xca\x49\x16\x88\x7f\xcd\x09\xdc\x91\x40\x9c\x50\xf0\x19\x59\x60\x2e\xa8\xa7\x91\x3f\x2f\x8b\x81\xfa\xa7\xb4\x11\x3b\x06\x82\x65\x75\xe8\x47\x3e\x85\x32\x59\xfc\x81\x65\x7a\x23\x08\xdc\x7a\x45\xff\x30\x2d\x4c\x85\x92\xe6\xc4\xdb\x3f\xf4\x8c\x69\x73\xb2\xa8\xc9\xe3\x44\xc8\x33\x7d\x6c\x18\x74\x5a\x31\x0d\x9b\xf1\x97\xf9\x13\xc3\x48\xaa\xbd\x9b\x17\xa9\x17\xec\x39\xc9\x31\x75\x86\x31\x2c\x29\xe8\x05\xa9\x58\x4b\xc0\x6d\x72\x3a\x47\xb6\xcc\x7a\xde\x7f\x9f\x8e\x13\xd6\x3a\x1e\xee\xbd\xf3\x72\x02\xee\x8f\x04\x7e\xdf\xe0\x2e\x5b\x73\xf2\x04\x0f\x52\xb5\x9c\xad\xe1\xb3\x75\x32\x6e\x63\xcd\xca\xd1\x61\xb2\x4f\x05\xe6\x7b\xa1\x71\xaa\x55\x05\xc6\xb9\xd6\x82\x30\x45\x5e\x70\x3e\x66\xa2\x6d\x59\x1b\x4c\x94\x2e\xb4\x89\x97\x13\x1d\xa9\x7b\x1e\x37\xc9\x50\xd6\xc2\x71\x25\xd6\x4b\xf1\x73\x0b\xc0\x05\xbb\xb9\x51\x02\xa2\xe3\x96\x05\xbe\xa8\x47\x28\x50\x41\x4e\x60\x49\x39\xe8\x82\x04\xcf\x48\xf4\x5e\x0d\x23\x3d\x09\xb6\x4b\xe7\x26\x92\x50\x08\xfd\x42\xe5\x53\x71\xd4\x5c\x24\x74\x79\x88\x70\xb5\xd3\xd6\xb2\x20\xf8\x8e\xa2\xa6\xd8\xbc\x11\x80\x5c\xb0\xf5\x7f\xcb\x52\x53\xc3\x6c\xc1\x8b\xef\xba\x99\x41\x2c\xa0\x10\x2d\x83\x7e\x0f\x3f\x88\x3c\x27\x6f\xb2\x64\x1c\x84\x65\x23\x21\x2c\x6d\x9b\x30\x39\x1a\x42\xd2\x3d\xb3\xc7\x5a\xb8\xa7\xe6\xfc\x1b\x6e\x9a\x06\xa5\x4d\xd5\x3a\x5d\x37\xfe\x4d\x14\x83\xdb\xc6\xcb\x5d\x4b\x76\x8e\xca\x05\x09\x7a\xe8\x32\xd4\xeb\x52\xbd\x66\x08\x99\xaa\x85\x68\x7f\x65\xde\x7e\xe9\xc6\xb4\x33\xf9\xdb\xba\x05\xbd\xa2\xac\x04\x6d\xe4\xf6\xae\x45\x59\xcd\x6d\xe7\x3f\xce\xed\xbf\x45\xe8\xf6\x7f\x39\x57\xe1\xdb\xef\x00\x00\x00\xff\xff\x76\x36\xe8\x20\xb1\x0f\x00\x00")

func regoParamInBytes() ([]byte, error) {
	return bindataRead(
		_regoParamIn,
		"rego-param.in",
	)
}

func regoParamIn() (*asset, error) {
	bytes, err := regoParamInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-param.in", size: 4017, mode: os.FileMode(420), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x31\x6f\xc2\x30\x10\x85\x77\x7e\xc5\xc9\x74\xaa\x0a\xee\xd4\x81\x8d\x81\xb1\x12\xa2\xec\x91\xb1\x9f\x6b\xa3\x60\x5b\xe7\x5b\x50\x95\xff\x5e\x39\x29\x69\xd3\x2d\x79\xf7\xbd\x7b\xe7\xf7\xb5\x22\x22\x52\x4f\xd5\x06\xdc\x8c\xda\x91\x0a\x22\x65\xa7\xf5\xb5\xe6\xb4\x99\xd4\x6d\xe6\x4f\xed\xd8\x78\xd9\xbc\xbe\xe9\x49\x5b\xab\x97\xc9\x29\x51\x7a\x34\xdf\x47\x30\x0c\x47\x47\xc3\xe6\x06\x01\xd7\x07\xe1\x50\x2d\xc7\x22\x31\xa7\xc6\x9d\x03\xa8\xcc\x10\x39\xf8\x98\xe0\x28\x80\x41\xd6\x24\xba\x80\x18\x1e\x0c\x8b\x64\xe1\xe8\x72\xa7\x2c\x01\x4c\xb5\xc0\x46\x1f\xad\x69\x9b\xea\x76\x3e\xe0\x5e\xc6\xfc\x7c\xb9\xc2\xca\x43\x35\xce\xc5\xc6\x99\xfe\xc8\xb9\x80\x25\xa2\xaa\x1d\x79\xd3\x57\xfc\x20\xc5\x88\x80\xd3\x62\x3e\xd5\x31\x8e\xb7\xcf\x8b\xff\xa9\x26\x86\x6f\x59\x6b\x3d\x9e\x3d\x26\x54\xfd\xfb\x1a\x35\xe3\xc3\xf8\x35\xcc\x15\xcc\xf4\x32\xe4\x8f\xb5\xe9\x5d\x77\xdc\x9f\xf6\xef\x87\xf3\xe1\xd4\x75\xff\x77\xad\x86\xd5\x77\x00\x00\x00\xff\xff\xc9\x23\xe7\x9b\xae\x01\x00\x00")

func regoSharedParamsInBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsIn,
		"rego-shared-params.in",
	)
}

func regoSharedParamsIn() (*asset, error) {
	bytes, err := regoSharedParamsInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.in", size: 430, mode: os.FileMode(420), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xdc\x38\x0c\xbd\xcf\xaf\x20\x9c\x3d\x2d\x92\x99\x3d\xed\x21\xe7\xe4\x50\xa0\x2d\x82\x26\xe8\x25\x08\x02\xda\xa6\xc7\x0a\x64\xc9\x95\x38\xf9\x40\x31\xff\xbd\x90\x34\x76\xec\xf8\x7b\x06\x45\xdb\x4b\x63\xe9\x91\x22\x1f\x9f\x28\xce\xcf\x15\x00\x40\xf4\x8f\x4d\x72\x2a\x30\xba\x84\x28\x67\x2e\x2f\x37\x9b\x27\xab\xd5\x45\x58\x5d\x6b\xb3\xdd\xa4\x06\x33\xbe\xf8\xef\xff\x4d\x58\x3b\x8b\xce\x83\x25\x0b\x96\xe4\xec\x6e\x73\x34\x94\xc2\x0d\x1a\x2c\x88\xc9\xd8\x0a\x91\x92\x4d\x8c\x28\x59\x68\xe5\x70\x77\x39\x41\x59\x83\x20\xa5\x4c\x28\x4a\x21\x27\x43\x90\xa0\x82\x98\xc0\x50\x46\x86\x12\x52\x09\xa5\x10\xbf\x81\xe6\x9c\x0c\xd8\x92\x12\x91\x89\x04\x9d\x27\xbb\xae\x03\x78\x2b\xfd\xf9\x3a\x7e\xa2\x84\xab\x55\x4c\x53\xe1\x70\x28\x6f\x8c\x2e\xc9\xb0\x20\x1b\x5d\x42\x86\xd2\xd2\x01\x52\x22\x33\x19\xd5\xda\x0f\x74\xf8\xed\xf5\xbf\xad\xef\x40\x93\xa1\xcc\x9d\x75\xb6\xf1\x61\xfb\x13\xec\xe6\x3d\x9b\xa8\x86\xef\xfd\x5f\xfb\x9a\x82\x1a\xdd\x3e\xa4\x61\xda\x39\xac\x66\xb6\xa6\x14\x6e\xa9\x4a\xf0\x1d\xd5\x97\x7e\xbd\x3b\x4d\xc3\x7b\x28\xfd\x3c\xd4\xfb\x86\x7e\xec\x84\xa1\xb4\x77\x77\x20\x60\x0b\xdf\x82\x55\x41\x8a\x2d\x5c\xbf\x96\x86\xac\xf5\x34\x9c\xf7\xfb\xf8\x20\x96\x2b\xaf\x0e\x78\xc9\x91\x21\xd1\x45\x2c\x54\xa8\x3e\xe8\xac\x29\x22\x34\x4e\x34\x21\xbe\xf5\x90\xeb\x8a\x29\x34\x06\xdf\x86\x40\x82\xa9\xe8\x27\x60\x91\x9f\x99\xbe\x16\xf9\x5b\xe0\xb3\xe5\xd7\xb2\x11\x6a\x1b\x8d\x1a\xec\x07\x77\xfb\x77\xba\xab\xfb\x6e\xe0\x11\x29\x36\x43\x7a\x82\x96\x62\x3e\x0b\xcb\xae\xa6\x9d\xee\xd1\x31\xe9\x08\xc4\x7d\xc6\x04\x9c\x13\xc8\x83\x17\x7c\x46\x21\x31\x96\xcd\x46\xf3\xfb\x65\xd1\x51\xff\x98\x36\x86\xd2\x40\xb0\x42\x6d\x9b\x91\x8f\x79\x19\xbd\xfc\x2d\xe4\xfc\x46\xd0\x32\x6b\x5c\xfa\xfb\x71\x61\x2a\x2c\x68\x4a\xbc\xcd\xa4\x27\xa0\x3e\xb3\x41\xc8\xc3\x48\xc8\x13\x7d\xac\x1b\xf4\xbc\xcb\xd4\x6d\xc6\x5f\xa7\x33\x86\x9e\x52\x3b\x33\x27\x52\x6e\xbe\x83\x43\xea\x6c\xc7\xb0\xe4\x42\x2f\x28\xc5\xb1\x04\x5c\xcd\x2e\x67\xcf\x91\x51\xc3\xfa\xcf\xd3\x71\xf0\x75\x1c\x0f\x77\xce\x78\x39\x01\x6e\x10\x72\xe7\xb6\xde\xb2\x63\x32\x9f\x61\x41\x6a\x57\x4c\xde\xe1\x1a\x3d\xdb\xaf\x47\x0b\xc5\xb4\x1d\xed\x53\x2d\x78\x26\x35\x8e\xb5\xaa\x16\x38\xd6\x5a\x12\xce\x91\x17\xd4\x69\xce\xc4\xa6\x3b\x83\x33\xa5\x0b\xa1\xf0\xc5\x48\x47\xaa\xfe\x3d\x9c\x24\xc3\x62\x27\x59\x94\xf2\x78\x29\x7e\x09\x0e\x44\x22\x78\x6a\x94\x80\xc1\x71\xcb\x82\xf8\x70\x1f\xab\xc1\xdc\x92\x62\xa8\x82\x04\xc7\xc8\xe0\xbb\xda\x8e\xf4\x20\xd8\xaa\x9c\x27\x91\x84\x52\xea\x17\x4a\x1f\x93\x5c\x8b\x64\x46\x97\x87\x01\xae\x6e\xb4\xb5\x42\x12\x7c\x47\xb9\xa3\xa1\x79\xa3\xe5\xe4\x03\x5b\x9f\x02\x4b\xfe\x0e\x0b\x0b\x4e\x7c\xe7\x7e\x06\xb1\x80\x52\x06\x06\xdd\x19\x6e\x10\x79\x9e\x7d\xc8\x92\x71\x10\x96\x8d\x84\xb0\xb4\x6d\xc2\xe8\x68\x08\xb3\xde\x99\x0c\x77\x92\x1f\x7d\xfe\x27\xbc\x34\xde\x4b\x28\xd5\x71\xba\xf6\xf6\x3e\x8a\xce\x6b\xe3\xe4\xae\x0b\xc1\x4c\xe9\x82\x02\xdd\x57\x15\x6a\x74\xa9\x46\x33\x84\x48\xed\xa4\x0c\xff\x17\x71\x58\xa9\xc6\xb4\x9a\xfc\xd3\xba\x05\xbd\x62\x51\x4a\x3a\x91\xdb\xeb\xe0\xe5\x68\x6e\x2b\xfb\x7e\x6e\xff\x2e\x42\x4f\xff\x95\xb3\xea\xff\x3a\xfc\xdc\x5f\xed\x57\xbf\x02\x00\x00\xff\xff\xa9\xb8\x42\xf1\x51\x11\x00\x00")

func regoSharedParamsJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsJson,
		"rego-shared-params.json",
	)
}

func regoSharedParamsJson() (*asset, error) {
	bytes, err := regoSharedParamsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.json", size: 4433, mode: os.FileMode(420), modTime: time.Unix(1533265479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xcd\x6e\x23\x37\x0c\xbe\xe7\x29\x88\xd9\x1e\x93\x75\x4f\x3d\xf8\xe6\x76\x83\xb6\x40\xb7\x0d\x5c\xf7\x54\x2c\x0c\x5a\xa2\x6d\x6d\x34\xd2\xac\xa4\x49\xd6\x58\xf8\xdd\x0b\xcd\xff\x8f\x66\x3c\xd3\x66\xdd\xb4\x97\xc0\xa1\x48\xea\xd3\x47\x91\x22\xe7\xcb\x0d\x00\x40\xf4\x8d\x65\x47\x8a\x31\x5a\x42\x74\x74\x2e\x59\x2e\x16\x1f\xad\x56\x77\xb9\xf4\xad\x36\x87\x05\x37\xb8\x77\x77\xdf\x7e\xb7\xc8\x65\x6f\xa2\xdb\xdc\xd2\x09\x27\xc9\xdb\xfd\x9e\x10\x13\x7b\xc1\xd0\x09\xad\xca\x55\x4e\x96\x19\x91\x64\xa2\x25\x44\x6b\x4a\x0c\x59\x52\xce\x02\x2a\xd0\xbb\x8f\xc4\x1c\x3c\x0b\x77\x04\x94\x12\x84\x17\x3b\x67\xc4\x2e\x75\xe4\x35\x38\x18\x92\x99\x3f\x5b\x6d\x77\x4a\xb2\xdd\x72\xdb\x52\x8a\x9c\x0b\xaf\x86\xf2\xc1\xe8\x84\x8c\x13\x64\xa3\x25\xec\x51\x5a\x2a\x54\x0c\x7d\x4a\x85\x21\x1e\x2d\xe1\xcf\x4c\x92\x49\x63\xcd\x49\x46\xd9\xff\x1f\x0a\xc5\xa4\xe9\xe1\x4b\xad\x5a\x23\x6b\xc9\x73\xfa\x0c\xed\x3d\xaa\x37\x0b\x4e\x7b\xa1\x32\x2c\x76\xd1\xb0\xa8\xd4\xcf\xb7\xb5\xc7\xfa\x70\x3d\x87\xe5\x31\xd1\x18\x3c\x45\xb7\xed\xc5\x0e\xa9\xbf\x08\xeb\x40\xef\x6b\xae\x60\x47\xee\x99\x48\x81\x3b\x12\x98\x92\x72\xe2\x25\xe1\x9e\x58\xed\x8e\x64\x40\x2b\xb2\x6f\xbb\xee\x85\xa3\xb8\x0f\x69\xe4\x9c\xe5\xc6\x51\xcb\xe0\x1c\x3c\x73\x4e\xf8\x44\x02\x1b\xd1\xa9\x3d\x9e\xab\xab\x55\x29\xb6\x03\x35\xb0\x45\x75\x51\xdf\x67\xeb\xe3\x9c\xfe\xa4\x25\xb7\xb0\x43\x2b\x18\x08\xb5\xd7\x26\xce\x4e\xe8\x69\x0e\x93\xda\x63\x31\x78\x51\xab\xd5\xcb\x17\xb6\x71\x4b\x02\x17\xb7\x5a\x4d\x90\x3d\xe2\x81\x3a\xfe\x0b\x43\xeb\xb6\x0a\xe3\xa1\x45\x9d\x1a\x46\x83\x0a\xa4\x9c\x70\xa7\xc1\xe5\x26\x5f\xad\xd5\x0f\xb7\x37\x6d\xfc\x03\xf9\x54\x53\x21\x05\xda\x81\xc5\xde\x56\x8d\xeb\x5e\xd8\x81\xd3\x75\x38\x00\xc1\x36\xcb\x50\x37\x2a\x95\xcf\xb1\xfc\xaa\x94\x86\x13\xa1\xe7\xc7\x3a\x23\xd4\x21\x0a\x2a\x9e\x7b\xd2\x73\x80\xd0\x34\xe1\xe8\x68\x98\x85\xf1\xd4\x43\xd6\x8f\xc4\xd0\x4e\x9c\x24\x5d\x6b\xa7\x66\xe4\xa6\x85\x77\x73\x24\x68\x88\xa6\x67\x5c\xe5\xf0\x52\x4c\x42\x48\x9b\xb7\x7d\x2a\xd2\x1f\x30\x26\x79\xc7\xd0\x12\x87\x27\x32\xb6\x85\xb6\x48\xbd\x97\x05\xf9\xd9\x91\xe2\xf3\x33\x65\x87\x96\xda\x79\x01\xee\x28\x6c\x47\x54\x78\x87\xff\x54\xd6\x64\xa0\x6d\xf0\x0d\x1d\x62\xe5\xb7\x04\x3f\xa5\x04\x8f\x74\x82\x27\x94\x29\x41\x82\xc2\x58\x70\x47\x74\xc0\x50\xc1\x8e\x20\xf5\x21\xdd\x9d\x80\xe9\x38\x11\x92\x4c\xef\x8d\xec\x9d\xa4\xa8\xf2\x93\x30\x0b\xc5\xe9\xf3\xdf\x28\x78\x1e\x8d\x4e\x15\x87\xd2\xc1\x95\xa2\x34\xe6\x67\xa2\x2f\x98\x1a\x75\x08\x46\x3e\x2c\x0d\x71\x7b\x20\x77\x8d\xc2\x56\xbe\xba\x73\x8a\x9a\x2f\x07\x65\x7d\x28\xec\xaf\x54\xdc\x12\x23\x9e\x46\xdf\x96\x00\xda\x40\xdb\x28\x2c\x14\x9e\x2e\xa2\xdb\x69\x2d\x09\x27\x92\xd9\x6e\x45\xe6\x80\x4c\x64\x6a\x50\x5e\xa7\xf8\xd6\xdd\xd4\x1c\x84\xa9\x12\xbe\xd8\x64\xb1\xaf\x28\x15\xea\x90\x01\xfd\x0a\xa1\x36\x5a\x8f\x24\xc0\xb4\x38\x23\xf3\x73\x98\xcd\xb9\xd4\xda\xcd\x6c\xa9\x66\xc5\xfe\x09\xa5\xe0\x03\x43\xd0\x10\xec\x5f\x8b\x44\x42\x60\xa9\x75\x3a\x86\xda\x09\xec\x8d\x8e\x33\xe0\xdb\xa6\x50\x48\xf2\x6d\x22\x26\x89\x3c\xf9\x1f\x35\xf9\xaf\xf4\xa5\x9b\x30\x48\x25\x68\x30\x26\x47\x26\x47\xb0\xdd\x3e\xac\xd6\xab\xf7\xf7\x9b\xfb\xf5\x76\x1b\x34\xe8\xcc\xaf\xdb\xed\x6a\xb3\x59\xff\xfc\xfd\x1f\x9b\xfb\x01\x83\x6a\xac\x1b\x1e\xa5\xd6\xa5\xca\xf8\x34\xb5\x92\x52\x3f\x67\x9d\x3a\x27\x26\xd1\x10\x60\x35\xad\xd6\xc3\xea\xb3\x6e\xdf\xb4\xfe\x64\x7a\xa5\x99\xaa\x4e\xf5\x7f\x36\xd9\xcc\x2f\x19\x95\x45\xde\x82\xa0\x05\x04\x29\xd4\x63\x79\x69\x33\xd2\xaa\x4c\x7d\xc9\xc2\xc1\x0c\xfd\xef\xc6\x8f\x2b\x35\x03\x5f\x69\x72\x9b\x50\x03\x3a\x3e\x2e\xe7\x29\xac\xd8\x84\x74\x6d\x7d\xc9\xcb\x2b\x6d\xbe\x43\xfe\xbb\xdc\xf5\xdf\x4a\xcf\xb1\x4f\x0f\x2d\xc5\x4b\xf9\x39\x69\x3c\xed\x73\xf8\xae\x61\x36\x90\x81\x1d\x42\xdf\x85\xe6\xd9\x30\x89\x3d\x32\xe7\x24\x31\xf7\x8f\x39\xf3\x15\x62\xde\x79\xbc\x95\x08\x15\xf2\xa1\x03\x6d\x48\x4a\x0b\xa2\x7d\x14\xdf\x20\x36\x10\xbc\x64\x9b\x70\x90\x7a\x87\x72\xdb\x79\xf3\xc6\xcf\xf7\x63\x66\x03\x0f\x95\x0d\xac\x69\x4f\x86\x14\x1b\x1e\x9d\x7a\x9f\xab\x0b\x03\x5f\x7f\x73\x0c\x50\x63\x80\x2c\x9d\xc9\xcf\x63\x79\xcb\xd1\x58\xf2\x2d\xc7\x2b\xed\x2d\x82\xe3\xcc\x65\x5e\xc3\x55\xac\x61\x39\xbd\x82\xdd\xe4\x7f\xcf\x37\x7f\x05\x00\x00\xff\xff\x57\xfc\x23\x64\x7d\x18\x00\x00")

func regoSpecInBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecIn,
		"rego-spec.in",
	)
}

func regoSpecIn() (*asset, error) {
	bytes, err := regoSpecInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.in", size: 6269, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1c\x5d\x6f\x23\xb7\xf1\xfd\x7e\xc5\x40\x39\x20\x40\x6b\x9f\xd3\x97\x02\xf1\xdb\xa1\x77\x68\x0f\x68\xd2\xc3\x25\xe8\x43\x0c\xc7\x18\xed\x8e\x24\xc6\x5c\x72\x43\x72\x65\xa9\x81\xff\x7b\x41\x72\x3f\xb5\x5f\x5c\x69\x25\xfb\x8a\xfa\xe1\xce\xde\x25\x87\xf3\xfd\x41\x0e\xf7\x8f\x37\x00\x00\x8b\xb7\x3a\xda\x50\x82\x8b\x5b\x58\x6c\x8c\x49\x6f\x6f\x6e\x7e\xd3\x52\x5c\xfb\xa7\xef\xa4\x5a\xdf\xc4\x0a\x57\xe6\xfa\xbb\xbf\xde\xf8\x67\xdf\x2c\xae\xfc\x4c\xc3\x0c\x27\x3b\xef\xa7\x94\x22\xb6\x62\x11\x1a\x26\x45\xf1\x36\x26\x1d\x29\x96\xba\x47\xb7\xb0\xf8\x42\xa9\x22\x4d\xc2\x68\x40\x01\x72\xf9\x1b\x45\x06\x9e\x98\xd9\x00\x72\x0e\xcc\x3e\x36\x46\xb1\x65\x66\xc8\x8e\x88\x41\x11\x77\xf0\x74\xb9\xdc\x3e\x75\xab\xf9\xb9\xc5\x53\x8c\x63\x66\x87\x21\xff\xac\x64\x4a\xca\x30\xd2\x8b\x5b\x58\x21\xd7\x94\x0f\x51\xf4\x7b\xc6\x14\xc5\x8b\x5b\xb8\x73\x4f\xdc\xd3\x44\xc6\xc4\x17\xee\xef\xfb\x7c\x60\x5a\x87\xf0\x47\x35\xb4\xc2\xac\xf1\xdc\xb3\x4f\xd1\xca\x62\xf5\xcd\x4d\x4c\x2b\x26\x1c\x2e\xfa\xa6\x36\xa3\x1c\xfe\x7c\x55\x41\xac\x88\x6b\x01\x2c\xc8\x44\xa5\x70\xbf\xb8\x6a\xbe\x3c\x60\xea\x3f\x99\x36\x20\x57\x15\xaf\x60\x49\xe6\x89\x48\x80\xd9\x10\xa8\x82\xe5\x14\x17\x0c\xb7\x8c\x95\x66\x43\x0a\xa4\x20\xfd\xee\x10\x3c\x33\x94\xb4\x51\x1a\xa0\xb3\x58\x78\xd1\x98\xf0\xdc\x49\xb3\x67\x78\x20\x03\x6b\xd2\xa9\x20\x3e\x97\xaa\x55\x0e\x6c\x0a\xaa\x67\x89\x52\x51\x7f\x70\xef\x87\x79\xfa\x0f\xc9\x63\x0d\x4b\xd4\x2c\x02\x26\x56\x52\x25\x8e\x42\xcb\xe6\x6e\xa6\xb6\xb8\xd8\xa9\xa8\xe5\xdb\x71\x85\xad\x69\x49\x87\xe2\x96\x6f\x53\x8c\x1e\x71\x4d\x07\xf0\xf3\x89\xda\x3c\x08\x4c\xfa\x5e\xca\x4c\x45\xd4\x3b\x80\x84\x61\x66\xdf\xfb\xba\xce\xaf\xc6\xdb\xfb\xab\x37\x4d\xfc\x7b\xec\xa9\x62\x05\x67\xa8\x7b\x5e\xb6\x96\xaa\xa9\x7b\x3e\x0f\x8c\xac\xc4\x01\x08\xba\xee\x86\x0e\xa5\x52\xc2\x1c\xb2\xaf\x72\x50\xbf\x21\xb4\xe0\x68\xa3\x98\x58\x2f\x3a\x07\x3e\xb7\x9e\x3e\x77\x30\x34\x4b\x63\x34\xd4\xcf\x85\x61\xd3\xc3\xa8\x2d\x89\xbe\x95\x62\xe2\x74\xa9\x95\xea\x92\x0b\x13\xef\xcf\x1b\x82\xda\xa3\x70\x8b\x2b\x01\x8e\xc9\xa4\x0b\xd3\xba\xb6\x87\x62\xfa\x37\x4c\x88\x5f\x47\xa8\x29\x86\x2d\x29\xdd\xc0\x36\x37\xbd\x79\x91\xdc\x19\x12\xf1\x74\x4b\x59\xa2\xa6\xa6\x5d\x80\xd9\x30\x7d\xf0\x28\x87\x0e\x5f\x95\xd5\x38\xa4\x75\x67\x0c\xed\xe3\xca\xbf\x52\xfc\x3d\x23\x78\xa4\x3d\x6c\x91\x67\x04\x29\x32\xa5\xc1\x6c\xd0\x40\x84\x02\x96\x04\x99\x15\xe9\x72\x0f\x91\x4c\x52\xc6\x49\xb5\x62\x64\x8b\x92\xdc\xcb\x07\xe1\xcc\x44\x4c\xbb\x23\x1c\x9e\xc5\x46\x66\x22\x86\x02\xc0\x85\xa4\x34\x04\x27\x10\x16\x84\x4a\x1d\x3a\x25\xdf\xfd\xb4\x8b\xb7\x6b\x32\x97\x70\x6c\x45\xd4\x9d\xe2\xd4\xac\x3b\x28\xfc\x43\x3e\xff\x42\xce\x2d\x55\x6c\x3b\x18\x5b\x3a\xb0\xed\x48\x1b\x99\x86\x1c\xd2\x28\x76\x4b\x29\x39\x61\x20\x33\x9b\xa9\xc8\x14\x24\x53\x9e\x29\xe4\x97\x71\xbe\x55\x36\x35\x05\xc3\x4c\x30\xeb\x6c\x9c\xec\x4b\x96\x32\xb1\x76\x88\x9e\x41\xd4\x4a\xca\x01\x03\x08\x93\x33\x46\xb6\x0e\xd3\x9e\x97\x52\x9a\x89\x29\xd5\x24\xd9\x6f\x91\xb3\xb8\xa7\x08\xea\x43\xfb\xc7\xdc\x90\x10\xa2\x4c\x1b\x99\x40\x05\x04\x56\x4a\x26\x0e\xf1\x87\xfa\x43\xc6\xc9\xa6\x89\x98\xa6\x7c\x6f\x7f\xa9\x98\xff\x4a\x23\x5d\x40\x21\x95\xa2\xc2\x84\x0c\xa9\xae\xea\xb1\x28\x75\x3e\x17\x83\xe0\x27\x6a\xd5\x20\xb3\x55\x28\x63\x19\x7e\xad\x82\xe9\x91\x70\x1b\x61\x0d\x5f\xfc\xac\xc4\xed\x16\x7c\xdc\x59\x35\xd5\xb5\x9d\x80\x16\x8c\x03\x2d\xf9\x60\x5d\x3c\xc1\x93\x0b\xeb\x32\x59\x32\x91\x17\xc7\x72\x05\x15\xef\x00\x95\xb5\x01\x8f\xdf\xc5\xf2\x9e\xb9\x23\xea\x18\xbc\x09\x30\x61\x4a\xa4\x86\xde\x68\xdd\xff\x26\x30\xaf\x13\x46\xf5\xe9\x13\x34\x34\xa6\xc8\x8e\x2a\xcd\x09\x56\x10\xfb\xe7\x92\x9c\x37\xe0\x45\x51\xb9\x45\xc6\x71\xc9\xa9\xa6\x23\xe7\x57\x8b\x96\xf6\x0f\xe9\x46\x1f\x19\x08\x9a\x89\x75\x1d\xf3\x21\x28\x83\xc6\xdf\x18\x19\xee\x08\x1a\xd3\x06\xb7\x2d\x1a\x23\x7b\xb6\x18\x7a\x89\x1e\x19\xea\x28\xeb\x1d\x72\x3f\x80\xf2\x88\x1f\x6b\x23\x1d\x66\x4c\x6d\x67\xfc\xe3\x38\xc5\x30\x10\xf8\x7c\x06\x99\x03\xeb\xd3\xce\x26\x0e\x53\x0c\x7a\x82\x28\x8e\x65\xc0\x87\x60\x71\x76\x2c\xb9\xf8\xd0\xde\x1e\x78\x39\x76\xe4\xb0\x8e\xe3\xc3\xcf\x76\xf2\x74\x06\xd8\xc4\xcd\xae\xdb\x88\x65\xc7\x50\x1e\x30\x83\x44\x96\x8c\xda\x70\x39\x3a\x18\x2e\xf8\x4a\xd8\xd0\x7a\xd0\x4f\x35\x86\xaf\xb8\xc4\x21\x57\xd5\x18\x5c\xa4\xa1\x81\xc3\x1d\x99\x81\x63\xe3\x4c\x61\xa0\xea\x82\x17\x7c\x32\xe0\x91\x8a\x9f\xfb\x93\xd4\x30\xc9\xb8\x61\x29\x3f\x5e\x15\x7f\xf0\x00\x58\xc4\xcc\x58\x2a\x01\xbd\xe9\x96\x06\x76\x60\x8f\xc5\x96\x8a\xdb\x9d\x2d\x90\x04\xcb\x91\xde\xb8\xda\xc4\x74\xac\xaa\xa8\xff\x8c\x31\x09\x39\x97\x4f\x14\x3f\x44\x1b\xc9\xa2\x00\x2f\x0f\x3d\xbc\xfa\x2c\xb5\xb6\x35\xc5\xbf\x91\x67\xbd\xfb\x30\x0d\x20\x07\xdc\xfa\xe4\xb9\xe4\x6c\x98\x69\xb0\xca\x77\xe5\x72\x10\xed\x0e\xc2\x1c\x07\xed\x1a\x36\x11\xd9\x06\x2f\x32\x25\x1d\x84\x69\x29\x21\x4c\x75\x9b\x30\x98\x1a\x42\x50\x9c\x59\x61\xc6\xcd\x83\xa3\xff\x84\x48\xe3\xa0\x78\x51\x1d\xa7\xd7\x6e\xbe\xdf\x2a\x3c\x8c\x36\x56\xdd\x65\xc2\x8c\xa1\x78\x82\x80\xee\x0a\x09\xd5\xbc\x54\xcd\x19\xc2\x42\x64\x9c\xfb\xff\x93\xa5\x7f\x52\xa4\x69\x25\xf3\x4f\xf3\x16\xb4\xc3\x24\xe5\x74\x22\x6f\x3f\x7a\x28\x47\xf3\xb6\x98\xdf\xcd\xdb\xd7\xc5\xd0\xd3\xab\x9c\x80\x9a\x7e\xe8\x88\x79\xb8\x5a\xef\xd9\x32\xce\x77\xc6\x28\xae\x9d\xab\xb7\x4e\x2a\xa7\x54\xfa\x68\x0c\x29\xf1\x79\xa4\xe0\xff\x75\x7b\xf7\xdd\xf5\xf7\xf7\x7f\x7e\x3b\x50\xbf\x85\xd4\x4e\x7d\x27\x7f\x55\x8f\x00\x13\x80\x56\x65\x0c\x8b\x32\x8e\xaa\x20\xf8\x1d\x7c\x32\xf0\xc4\x38\x87\x4c\x93\x73\xa9\xb5\x39\xe5\x1e\x51\xaa\x68\xcb\x64\xa6\x8b\x59\xbe\xe5\x00\xe3\x18\xa4\x02\xb9\x25\xf5\xa4\x98\xf1\xf5\xa1\xb4\xb1\x2d\xa6\x88\xe3\xd0\x3e\xc1\x84\x2d\x80\xf1\xba\x6b\xb0\x75\xa2\x24\x67\xfa\x16\x32\xcc\x5f\x9d\x99\xf1\x34\xb6\xff\xc0\xb8\xfe\x33\x54\x9d\x1d\x59\x87\x4e\x29\xea\xaa\xfc\x00\x3b\xb6\xd5\x46\xc9\x72\x52\x5a\xd3\x2e\xf5\x87\x49\x08\xde\xb5\xd4\x84\x95\x64\xda\xc0\x46\x0a\xa9\xc0\x48\x9b\x16\xb9\x5d\xca\x4b\x97\x2c\x47\xa5\x41\x07\x84\xbe\xf7\x30\xf2\xec\x04\x56\x52\xb5\xd5\xd2\x66\x37\x1f\xc3\xf2\xea\x4b\xe7\x2e\x81\x99\x7b\xee\xef\xec\xc4\x5f\xef\xde\x5f\xff\xf2\x97\xeb\xef\xef\xef\xf0\xfa\x3f\xef\xaf\x7f\xb1\x0e\xee\x4f\x6f\xcf\x9d\x04\x61\x66\xe4\x9a\x04\x29\x34\x03\xfb\xa7\x8d\x29\x1d\xb5\x62\x25\x16\xa6\xa1\x01\x12\x96\x7b\xe7\x3e\x96\x18\x3d\x92\x98\xa4\x89\xb3\x64\xe4\x91\x22\x57\x4a\x3d\x48\xc1\xf7\x33\xd0\x67\xab\x0d\x0b\xca\x97\x1c\x06\xe2\xcc\x59\xa0\x5b\x86\xc0\x7a\x82\xd0\xca\x6d\x5e\x3a\x8b\x64\x56\xaa\x98\xd4\xd1\x74\x36\x12\xa5\x86\x50\xdd\x89\x35\xda\x10\xe5\xd3\x55\xb7\x8e\xa5\xfc\x91\x82\xac\xe9\x2c\xc4\x4e\xc8\x2e\x3b\x9b\x40\x3a\x32\xef\x92\xe8\xd7\x95\x1d\x8e\x32\x24\x55\x14\xcd\x67\xc2\x35\x78\x97\x97\xed\xc4\xdd\xbf\xb0\xf6\x9e\x63\xe4\x3a\x4b\x2c\x3c\xa2\x12\x1a\xac\x62\x6c\x20\xfc\x7a\x15\x95\x76\xa9\xd4\x73\x69\x69\x9a\x2d\x39\x8b\xf8\x1e\x0a\xa8\x47\xe8\x6a\x50\x51\xe9\xfc\x84\x9d\x65\x54\x36\xb2\xd1\x36\xce\x80\xd1\x7e\xa2\x83\xc5\xcf\xd6\x5b\xd4\x58\x67\xac\xcf\x68\x0a\x8d\x2b\xc6\x0d\x29\x5c\x86\x6e\x16\x8e\x06\xdc\x82\x2a\xab\xfb\x1e\xb8\x8d\x3c\x69\xa6\xac\xd8\x27\xed\x5c\xcd\xe2\xa2\x56\x52\x11\x5b\x8b\x07\x1b\xfa\xe6\xc9\x98\x20\x07\xf9\x22\xd1\x74\x4d\x36\x07\x9d\x81\x12\x57\x0f\x6f\x70\x4b\x80\x50\x25\x80\x39\xf8\x4b\x53\xc5\x62\x12\x86\xad\xd8\x2c\x94\xd5\x12\x20\x84\x04\x99\x80\x1a\xf8\xf3\x78\x1d\xdf\xd8\xf3\x29\x2f\x42\xac\xe3\x39\x6d\xfb\x1e\x77\x0f\x9c\xc4\xda\x6c\x8e\x66\x47\x82\x3b\x96\x64\x09\x78\x30\xed\x2c\xb1\xa8\xc8\xc2\x8f\x7e\x0a\xb6\x14\x11\xe8\x64\x0a\x4f\x4b\x08\x0b\x02\x7b\xb2\xe0\x82\xbe\xf0\x43\xa5\x99\x09\x64\xe2\x64\x11\x32\xf1\xaa\x45\xc8\xc4\xa9\x22\xcc\x09\x7c\xa5\x22\x0c\x3f\xd4\x1f\xe9\xef\x7c\xb1\x74\x56\x26\xcc\x3c\x50\x92\x9a\xe3\x42\xdf\xa7\x95\x73\x65\x57\x07\x72\xc9\x83\x7c\xac\x64\x9a\x52\x0c\x6c\x05\x6e\x09\x90\x0a\x7c\x4a\x7a\xe1\xe0\xe1\xaa\xdb\x33\x25\x30\x65\xe5\xfc\x62\xf9\x4b\xaa\x58\x82\x6a\x3f\x5f\xfe\xe2\x63\x23\xe4\x70\x5f\x24\x89\x51\x84\xf1\x5c\x7b\x3c\x4c\x83\x05\xe7\xf6\x79\x5e\x80\x90\x91\x5e\xc6\x89\x74\xe4\xd0\x2e\x4d\x86\xa6\x48\x0d\xb4\xca\x4f\x22\xc2\xc3\x72\x67\x27\x7a\x23\x33\x1e\x3b\x5f\x41\xc8\xf3\xab\x9d\x11\xaa\x49\x7e\x70\x26\x02\xcf\x9a\x35\xeb\x97\xc9\x9a\xb5\x91\xb3\xe9\x5e\x0e\xeb\xdc\x45\xf9\xc9\xa9\xb1\xce\x96\xe1\x3d\x56\x03\x71\x39\xc1\x34\x75\x9d\xf7\x12\x52\x16\x3d\x3a\x67\xff\xb4\xc9\x6f\xc9\x16\x9d\x18\x9a\x8c\x1d\xf0\x2d\xed\x0c\x29\x81\xfc\xdb\x8b\xb7\x93\x29\x14\x9a\x91\x98\xc9\x36\x2b\x70\x97\x56\xd5\x93\x64\x56\x34\xb7\x9d\x92\x47\xfd\xbf\xb7\xad\x18\x3e\xa5\xb7\x8d\x33\x1d\x8c\xc6\xe8\x19\x76\x63\xb4\xeb\x82\x0b\xc5\x38\x37\xbf\x73\x77\xcd\x85\x5c\x3f\x69\x4c\x38\xcb\x55\x94\xa3\xb4\xfc\x2b\x69\xf2\xea\x7d\x3b\x67\xdf\x4c\xf9\x01\x82\xfe\x9b\x30\x5f\x8a\x21\xc3\x8d\x33\xee\x58\xdb\xdd\x29\xcf\x9b\x3d\x00\xcb\xef\x2a\x54\x9f\x55\x78\x92\xcd\x3b\x51\xed\x9e\x9a\x0b\xdd\xfe\xaf\x2e\xa5\x35\xde\x4d\xbe\x83\x3f\xfd\x72\x5b\x39\xa3\xb6\xf3\xc6\x99\x78\x2c\x74\xda\x31\xad\xec\x45\x99\xf3\x8a\x9b\x3f\xcb\xfd\xdf\xba\x28\x7f\xa1\x6b\xab\x67\xfa\xc6\xc0\x04\x0b\xcd\x61\x8c\xdb\x29\xbc\x8f\x02\xcc\xb5\xf1\xcd\x19\xef\x88\xfd\x0a\xfe\xf7\x62\xd5\x97\x32\xcf\xa1\x8f\x64\x34\x06\x8e\xd9\x67\xd0\x87\x14\xda\x3c\x1c\xbf\x66\x11\x70\xb5\xa2\x8f\x89\x2d\x66\x4e\x31\xe2\x80\x13\xf1\x4e\x7a\xec\x2c\x36\xd4\xc2\xd1\xca\x26\x89\xf3\xb2\x2b\xbd\xf4\xe4\x21\x67\xe8\xc7\x5d\x68\x5d\x73\xb9\x44\xfe\x30\x70\x3b\xb3\x4d\xdf\xdf\xdd\x1c\x68\xdc\x7d\x5c\x91\x22\x11\xf5\x5f\xf2\x6f\xf5\x9d\xe5\x13\xac\xff\xf5\x38\xd4\x6f\x39\x3a\x73\xa6\x18\x98\xaf\x76\x6a\xe8\xb9\x8c\xe4\x95\xde\x82\xed\x60\x6f\x08\x5f\xbb\xbd\x58\x6d\x66\xb8\x07\x7b\xe3\xff\x7d\x7e\xf3\xdf\x00\x00\x00\xff\xff\x64\x5c\xe5\xf8\x27\x4b\x00\x00")

func regoSpecJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecJson,
		"rego-spec.json",
	)
}

func regoSpecJson() (*asset, error) {
	bytes, err := regoSpecJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.json", size: 19239, mode: os.FileMode(420), modTime: time.Unix(1533265479, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoTypeMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\x9b\x40\x10\xc6\xef\x7e\x8a\x11\xa9\x54\xa9\x6a\x4c\x4f\x3d\xf8\x5e\xa9\x97\x4a\x3d\xf4\x56\xf5\x30\x66\x07\x98\x64\xd9\xdd\xce\x0e\x49\x69\xc5\xbb\x57\x0b\x36\x0e\x98\xd8\x91\xa2\xf8\x04\xf3\x87\x99\xfd\x7d\x9f\xf7\xdf\x06\x00\x20\x7b\x17\x8b\x9a\x1a\xcc\x76\x90\xd5\xaa\x61\x97\xe7\x77\xd1\xbb\xdb\x31\xba\xf5\x52\xe5\x46\xb0\xd4\xdb\x4f\x9f\xf3\x31\x76\x93\x7d\x1c\x3b\x95\xd5\x52\xea\xfb\xd1\x05\x82\x6f\x18\x02\xbb\x2a\x1e\xb3\x86\x62\x21\x1c\x94\xbd\x1b\x6a\x6a\x8e\x50\xb2\x25\xe0\x08\x6d\x24\x03\xea\xa1\xc1\x00\xf4\x47\x49\x1c\x5a\xd0\x2e\x50\x4c\x51\x8b\xae\x6a\xb1\x22\x88\x81\x0a\x2e\xb9\x88\xdb\x69\x64\x17\x86\x89\x7e\x7f\x47\x85\x1e\xa3\x68\x0c\xa7\x39\x68\xbf\x8b\x0f\x24\xca\x14\xb3\x1d\x94\x68\x23\x1d\x4a\x02\x6a\x1a\x33\xcb\x8f\x00\x86\xf4\xf6\xc3\xec\x7d\x04\x23\x54\xa6\x59\x37\xb9\xa1\x92\xdd\x30\x21\xe6\xc3\x06\x53\x61\x3f\x3c\xf5\xd3\x91\xa7\xba\xf9\xe7\x0f\x6b\x2f\x06\xcc\xf8\x1d\xce\x32\x25\xd7\xf0\xdd\x53\xf7\x94\x9e\x0a\xba\x68\x31\x95\x00\xba\x39\xc8\xf7\x11\x62\xbb\x4f\x4f\x50\x8a\x6f\x00\x27\x98\x43\xfd\x76\x39\x6e\x15\xec\x94\xbd\x0e\x78\x2a\xbd\x0c\xfa\x12\xf0\x2b\xe0\x9b\xd1\x5f\xd9\x59\x4f\xbf\x59\x7f\xeb\x4f\x9b\x65\xc7\xe6\xe7\x35\x38\xd8\xf7\xaa\x0c\x04\x05\x2a\x55\x5e\x4e\x52\xec\x3b\xa8\xc8\x91\xa0\x7a\x89\xc0\x0e\xbc\x18\x92\xa7\x0a\xd1\xd2\xe5\xec\x52\xb6\x26\x16\xf0\x8f\x0e\xb8\x09\x96\x1a\x72\xfa\xc6\xe2\x08\xfd\x6e\x59\xc8\x64\x3b\xf8\x79\xae\xc9\xdc\xda\xe9\xf7\x6b\x29\xee\x15\x55\x57\x7d\x7e\x89\xe5\x04\xc8\x0c\x60\x96\x27\x3f\x23\x10\x55\xd6\x3d\x70\xde\x97\x25\xe7\xbc\x78\x99\xaf\xfe\x31\x09\x36\xb8\x0d\x2d\xff\xa5\xa4\xce\x1b\xec\xd4\x04\x2f\x2f\xdf\xea\xcb\x03\x39\x6d\xd1\xc2\x49\x63\x18\x3f\x01\x5e\x20\x60\x71\x9f\xae\x49\xad\x51\x21\x88\x7f\x60\x93\x2e\xd0\x57\xef\xfd\xdc\xff\x69\xbc\xeb\x36\xfd\xe6\x7f\x00\x00\x00\xff\xff\x9a\x8a\x83\x1c\x3a\x06\x00\x00")

func regoTypeMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoTypeMappingJson,
		"rego-type-mapping.json",
	)
}

func regoTypeMappingJson() (*asset, error) {
	bytes, err := regoTypeMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-type-mapping.json", size: 1594, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoValidationMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x8e\xd3\x30\x10\xc6\xef\x7d\x8a\x51\x16\x09\x09\xed\x36\x9c\x38\xf4\xce\x11\xc4\x61\xc5\x05\x71\x98\xc6\xe3\xd4\xbb\xfe\xc7\x78\x52\xa8\x50\xde\x1d\x39\x69\x9d\x4d\xda\x6e\x11\x12\xa7\x3a\xfe\x66\x3c\xe3\xdf\x37\xf5\xef\x15\x00\x40\xf5\x26\x35\x3b\x72\x58\x6d\xa0\xda\x89\xc4\x4d\x5d\x3f\xa5\xe0\x1f\xc6\xdd\x75\xe0\xb6\x56\x8c\x5a\x1e\xde\x7f\xa8\xc7\xbd\xbb\xea\x7e\xcc\x14\x23\x96\x72\xde\x57\xb4\x46\xa1\x98\xe0\xe1\x13\xc6\x68\x7c\x7b\x0a\x51\x94\x1a\x36\x31\x4b\x39\xf0\x71\x67\x12\x68\x63\x09\x4c\x82\x2e\x91\x02\x09\xe0\x30\xc2\x7e\x3a\x41\x77\xbe\xc9\x8b\x94\x35\x8b\xbe\xed\xb0\x25\x48\x91\x1a\xa3\x4d\x93\xd6\xa5\xfa\x21\x0e\xc5\xc3\xf6\x89\x1a\x39\xed\xa2\x52\x26\x67\xa3\xfd\xc2\x21\x12\x8b\xa1\x54\x6d\x40\xa3\x4d\x74\x0c\x89\x28\x42\xec\x67\xfa\xc8\x62\x90\xd7\xef\x66\xdf\x23\x23\x26\x9d\x6b\xdd\xd5\x8a\xb4\xf1\x43\x85\x54\x0f\x1d\x94\xc0\x7e\x58\xf5\xe5\xe2\x25\x6e\x7e\xfc\xb1\xed\x45\x81\x82\xf2\x31\xcb\xf7\x73\xf1\x12\xc4\x67\x3a\xbc\x64\x28\x8c\x3e\xd9\x11\x20\x7a\xa0\x5f\xf9\x86\x68\x21\x57\x7b\x9b\x20\x75\xdb\xbc\x02\xcd\xc1\x01\x16\x98\x43\xfc\x7a\x59\xee\x22\xd8\xa2\xde\x06\x5c\x42\x5f\x07\xfd\x1a\xf0\x1b\xe0\xdd\x71\xc8\xce\x72\xfa\xd5\xe5\xaf\x7e\xea\xac\x3a\x25\x5f\xf7\x60\x3e\xc3\xd7\x6d\x20\x68\x50\xa8\x0d\x3c\x59\xb1\x3d\x40\x4b\x9e\x18\x25\x70\x02\xe3\x21\xb0\x22\x7e\xe9\x10\xcd\xcd\xc9\x41\x59\xdd\x91\x61\x08\x3f\x3d\x18\x17\x2d\x39\xf2\xf2\x9f\xcd\x61\xfa\xd1\x19\x26\x55\x6d\xe0\xdb\xb9\x27\x1e\x1d\xcd\xf1\x7e\x5f\x9a\x7b\xc3\xd5\xe1\x84\xab\xbe\x2e\x58\x7e\x46\x47\x10\x74\xc6\x50\xfe\xff\x19\x5a\x83\xd6\xe6\xdf\x48\xac\x03\xbb\x41\x9f\x9e\x8a\x25\x9c\x33\x48\x49\xf8\xf2\x98\x9c\xe7\x55\xc6\xc5\xc0\xf2\xd7\x1d\x7f\xdc\x93\x97\x0e\x2d\x4c\xc8\x61\x3c\x02\x02\x43\xc4\xe6\x39\xbf\x5a\xb2\x43\x81\xc8\x61\x6f\x14\xa5\x45\xf7\xe5\xa2\xff\x7e\x8d\x6b\xd3\x3e\xbe\x44\xab\x7e\xf5\x27\x00\x00\xff\xff\x75\x74\x59\xb0\xe3\x05\x00\x00")

func regoValidationMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoValidationMappingJson,
		"rego-validation-mapping.json",
	)
}

func regoValidationMappingJson() (*asset, error) {
	bytes, err := regoValidationMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-validation-mapping.json", size: 1507, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen.sh": genSh,
	"rego-abstract.in": regoAbstractIn,
	"rego-abstract.json": regoAbstractJson,
	"rego-attribute.in": regoAttributeIn,
	"rego-info.json": regoInfoJson,
	"rego-param.in": regoParamIn,
	"rego-shared-params.in": regoSharedParamsIn,
	"rego-shared-params.json": regoSharedParamsJson,
	"rego-spec.in": regoSpecIn,
	"rego-spec.json": regoSpecJson,
	"rego-type-mapping.json": regoTypeMappingJson,
	"rego-validation-mapping.json": regoValidationMappingJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gen.sh": &bintree{genSh, map[string]*bintree{}},
	"rego-abstract.in": &bintree{regoAbstractIn, map[string]*bintree{}},
	"rego-abstract.json": &bintree{regoAbstractJson, map[string]*bintree{}},
	"rego-attribute.in": &bintree{regoAttributeIn, map[string]*bintree{}},
	"rego-info.json": &bintree{regoInfoJson, map[string]*bintree{}},
	"rego-param.in": &bintree{regoParamIn, map[string]*bintree{}},
	"rego-shared-params.in": &bintree{regoSharedParamsIn, map[string]*bintree{}},
	"rego-shared-params.json": &bintree{regoSharedParamsJson, map[string]*bintree{}},
	"rego-spec.in": &bintree{regoSpecIn, map[string]*bintree{}},
	"rego-spec.json": &bintree{regoSpecJson, map[string]*bintree{}},
	"rego-type-mapping.json": &bintree{regoTypeMappingJson, map[string]*bintree{}},
	"rego-validation-mapping.json": &bintree{regoValidationMappingJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

