// Code generated by go-bindata.
// sources:
// gen.sh
// rego-abstract.in
// rego-abstract.json
// rego-attribute.in
// rego-info.json
// rego-param.in
// rego-shared-params.in
// rego-shared-params.json
// rego-spec.in
// rego-spec.json
// rego-type-mapping.json
// rego-validation-mapping.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\x41\x6b\xc4\x20\x14\x84\xef\xfe\x8a\xd7\xb4\x60\x7b\x50\x7f\x40\xa0\x90\x42\x0e\x3d\x14\x4a\xb0\x67\x79\x1a\x6b\x6c\x1b\x15\xb5\xff\x7f\xd9\x6c\x58\xb2\x61\x2f\xcb\x1e\xdf\x0c\x33\xf3\xf1\x1e\x1f\x84\xf6\x41\x68\x2c\x13\x21\xc9\xe6\x3f\x60\xc9\x02\x2d\x42\xa9\x4e\xca\xe1\xfd\xed\x4b\xf6\x4a\x09\xda\x3c\x3d\x1b\xac\x90\xad\x8b\x0c\x6b\xcd\x5e\xff\x57\xcb\x7d\x78\x69\xa8\x70\x2d\x5d\x0d\x5d\x6a\x46\x53\xb9\x0f\xf0\xba\x93\x7e\x4a\x0c\xf7\x0c\x9c\x53\x9f\xdd\xd0\x7d\xf4\xb2\x1f\xf6\xa9\x84\x19\xe7\x3d\x52\x49\xd6\x6c\x70\x96\xf3\x0a\xca\x8d\xa5\x13\x66\x3b\x9e\xbc\xb2\x6d\xbf\xd0\x97\x19\x92\x67\x60\xdf\xc0\x8f\x5f\x1e\xb1\x22\x77\xb1\x25\x2e\xb2\xf5\x04\x96\x7e\x1d\x14\x33\xd9\x19\x81\x93\x43\x00\x00\x00\xff\xff\xfe\x7b\x84\xde\x8e\x01\x00\x00")

func genShBytes() ([]byte, error) {
	return bindataRead(
		_genSh,
		"gen.sh",
	)
}

func genSh() (*asset, error) {
	bytes, err := genShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen.sh", size: 398, mode: os.FileMode(493), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xb1\x4e\xc4\x30\x10\x44\xfb\x7c\xc5\x2a\x47\x79\x87\xa9\x28\xd2\x1d\x12\x05\x1d\x42\xa1\x8e\x36\xf6\x9a\xf8\x64\x6c\x6b\x77\x4f\x08\xa1\xfc\x3b\x4a\x0c\xe1\xa0\xa0\xb3\x76\xde\x78\x46\xf3\xd1\x00\x00\xb4\x57\x62\x27\x7a\xc5\xb6\x83\x76\x52\x2d\x9d\x31\x27\xc9\xe9\x50\xaf\xd7\x99\x5f\x8c\x63\xf4\x7a\xb8\xb9\x35\xf5\xb6\x6b\xf7\xd5\xa9\x41\x23\x2d\xbe\xe3\x28\xca\x68\xf5\x5b\x70\x24\x96\x43\xd1\x90\xd3\x2a\x27\xc0\x2f\x02\x30\xc6\xfc\x26\xa0\x19\x1c\xd9\x88\x4c\x80\x20\xa4\x90\x3d\x8c\x28\x04\xa8\xca\x61\x3c\x2b\x09\x60\x72\x26\x33\x30\x45\x5c\x7e\x12\xd0\x09\x15\x2c\x26\x18\x09\x98\xce\x42\x0e\x42\xd2\x0c\x59\x27\x62\x90\x42\x36\xf8\x60\x2b\xbc\x75\x7c\x2f\x6b\xc5\x3c\x9e\xe8\xa7\x20\x3a\x17\x16\x0c\xe3\x23\xe7\x42\xac\x81\xa4\xed\xc0\x63\x14\xda\x37\x95\x29\x97\x4a\xdd\xaa\x7a\xb7\x86\xbf\xee\x75\x4b\x26\xbf\xa4\xed\x8c\x23\x1f\xd2\x9a\x21\xe6\xc2\xb1\xe1\xf3\xfa\x9a\xb7\xc1\x36\xfa\xdf\xb0\x61\x38\xf6\xfd\xd3\xc3\xdd\x73\x7f\x3f\x0c\x7f\xff\x6a\xe6\xe6\x33\x00\x00\xff\xff\x33\x37\x6b\x77\xd3\x01\x00\x00")

func regoAbstractInBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractIn,
		"rego-abstract.in",
	)
}

func regoAbstractIn() (*asset, error) {
	bytes, err := regoAbstractInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.in", size: 467, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAbstractJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\xcd\x8e\xdb\x36\x10\xbe\xef\x53\x0c\x36\x01\x02\xb4\xeb\x38\xbd\x14\xc8\xde\xf6\x90\x43\x80\xa4\x0d\x8a\x9e\xb2\xd8\x18\x23\x69\x64\x33\xa1\x48\x66\x48\xed\xda\x2d\xf2\xee\x05\xa9\x1f\x4b\xfe\x93\x6c\x69\xed\xf4\x94\x0d\x39\x33\xe4\x37\x33\xfc\x66\x28\xfa\xdf\x2b\x00\x80\xeb\x97\x36\x5e\x50\x86\xd7\xb7\x70\xbd\x70\xce\xdc\x4e\xa7\x5f\xad\x56\x93\x62\xf4\xb5\xe6\xf9\x34\x61\x4c\xdd\xe4\xcd\xef\xd3\x62\xec\xc5\xf5\x4d\xa1\xe9\x84\x93\xe4\xf5\xee\x22\xeb\x18\x63\x57\x4d\x24\x64\x63\x16\xc6\x09\xad\xc2\xb4\x02\x2c\x25\x00\xa5\xd4\x4f\x16\x9c\x86\x84\x62\x89\x4c\x80\x60\xc9\x81\x4e\x21\x42\x4b\x80\xce\xb1\x88\x72\x47\x16\x50\x25\x53\xcd\xc0\x24\xd1\x5b\xb2\xe0\x16\xe8\x20\x46\x05\x11\x01\x53\x6e\x29\x01\xa1\x9c\x06\xed\x16\xc4\x60\x0d\xc5\x22\x15\x71\x21\x5c\xef\x71\x65\xc2\x16\x75\xf4\x95\xd6\x1b\xc4\x24\x11\x5e\x0c\xe5\x27\xd6\x86\xd8\x09\xb2\xd7\xb7\x90\xa2\xb4\x74\x73\x55\xc8\x98\xe6\x4c\xe1\xab\x42\xb7\xde\x61\x6b\xbc\xf0\x25\x53\xea\x57\x7b\x31\x4d\x28\x15\x2a\xac\x61\xa7\x0d\x8d\x5a\xfc\x47\xf8\xeb\x47\xed\xb0\x5a\xba\xff\x62\x3b\xa1\xd5\xb3\x1b\x31\xf8\x20\x6c\x70\xf2\x23\xb1\x15\x5a\x51\xd2\xf0\xf4\xeb\x4d\xdd\xc3\xee\x69\x89\x1a\x74\x8e\x58\x7d\xda\xed\xac\x5a\xec\xcb\xe3\xfd\x9b\xc9\xdb\x87\x5f\x5f\xee\x9c\x6e\xc1\x41\x66\x5c\x6d\xec\xa8\x0b\x55\x23\x6b\x84\x02\x04\x83\xec\x44\x9c\x4b\xe4\x0a\xf0\x6b\x78\xef\xe0\x49\x48\x09\xb9\xcf\x32\x29\x9b\x3a\x29\xeb\x0c\xdc\x82\xc0\x30\x3d\x0a\x9d\xdb\x4a\x2b\x24\x21\x60\x92\x80\x66\xd0\x8f\xc4\x4f\x2c\x1c\x05\x51\xad\xc8\x56\x39\x9c\x6c\x7a\xb0\xde\xaf\x70\x94\xed\x76\x49\xbf\x30\x1e\x02\xff\x17\x19\x26\x4b\xca\xf9\x5d\xae\xe1\x78\x7f\xf8\x0d\x72\x35\x4d\x09\x14\xb6\xf7\xed\x32\x18\x67\xfa\x9e\x0b\xa6\xe4\xfa\x16\xee\xf7\x4a\x05\x49\x85\x19\x1d\xb0\xb4\x06\xd5\x21\xd3\x84\xb3\x57\xf2\xe1\xc0\x96\xfb\xa7\x69\x4b\x6d\xcf\xc1\xde\xbd\x84\xa7\x2b\x4a\x66\xf1\x02\xb9\x5b\x7c\x0b\x56\x88\xd2\x9c\x96\xa6\xe0\x2e\x04\xeb\x58\xa8\x79\x23\x58\x59\x6e\x1d\x2c\xb4\xd2\xec\x39\x31\x22\x78\x44\x29\x92\x0e\xd7\x41\x33\x6f\x0a\x93\xfb\x3d\x08\x6b\x9e\xe9\x07\x73\x96\x91\xb5\x38\xa7\x93\xe0\x7e\x2c\x74\x81\x96\x46\xa2\x50\x1e\x6c\x91\x8c\xc1\x0b\xd5\x79\x09\xa7\xb4\xe5\xda\x8b\x01\xd6\x22\xee\x91\x08\xbb\xa0\xde\x15\x36\x7c\xc4\x72\x4f\x22\x9a\xb7\xcf\xe1\xca\x10\xbc\x53\x79\x76\x0c\xbe\x43\x04\xd8\x52\xe8\x26\x97\x9d\xf6\x4b\xff\x75\x2f\x00\x0d\x82\xf7\x8a\x5f\xee\xef\x26\x9f\x7f\x9b\xbc\x7d\xb8\xc7\xc9\x3f\x77\x93\xcf\x9e\xd1\x7f\x79\x79\x38\x10\x50\xd7\xba\xbd\xb3\x5d\xa1\xca\x9d\x9e\x93\x22\x46\x17\xd8\xe9\xf8\x40\xfd\xbd\x68\xf4\x15\x20\x2c\xb4\x4c\x42\xb4\x0a\x29\x1a\x61\xfc\x8d\xd4\x51\x47\x2f\xd2\x5a\x12\x1e\x60\xaf\x3e\xf8\x62\xa6\xd0\xb2\xcc\xb4\x92\xab\x11\xf0\xf9\x06\xc9\x9b\xf2\x64\xe2\x3b\xab\x24\x0f\x94\x13\x96\x21\xf0\xd4\x17\x96\x3b\x3b\xce\x84\x52\xcc\xa5\x9b\x69\x4e\x88\x4f\xc6\x19\x0e\x5b\x55\xe2\x5a\x41\x0d\xfd\x20\xfa\x9a\x1c\xd6\x81\xb0\x8e\x47\xfe\x8d\x7a\x9d\xa6\x67\x01\x1b\xb6\x7b\x32\xd8\x0a\xca\x6e\xd0\x47\x80\xba\xaf\x48\x65\x0d\xef\x06\xae\x85\x72\x34\x27\xf6\x7f\xaa\x5c\xca\xe2\xdf\x2c\x2a\x46\xaa\x76\xa4\xe6\x8b\x87\x81\x0e\x31\x4c\xf1\x78\x47\xb8\x61\xef\xfc\xb1\x6d\x6e\xed\xd4\xc8\xd6\x43\x43\xe2\x3a\x4a\x2d\xa4\x25\x66\x46\xd2\x80\x5c\x7d\x57\x58\x28\xf3\xd4\x17\xc2\xff\x6f\xa2\xd2\xd2\x68\x3b\x56\x96\x9a\x3c\x92\x22\x96\x2b\xa8\xac\x9e\x90\xab\x3d\x54\x4a\x9e\xf0\x5a\x8e\x73\x1a\x9a\x0e\x8e\x94\xdd\xba\x8a\x1e\x58\xbc\xe5\x83\x3f\x0d\x7e\xcf\xc9\x93\x6e\x99\x0e\x06\x05\xb7\xef\xee\x81\xa9\xa3\x15\xc4\x3a\x33\x42\x12\x6f\x5d\x40\x77\xae\xb3\x71\x4f\x1a\x84\x31\x15\xd2\x11\x63\x24\x4f\xe7\xe6\x76\xc1\xad\x50\xf9\xdc\x2f\x8c\xfb\xca\x63\x72\xf6\x61\x3f\xaa\xbb\x1d\x85\xa2\x52\xcd\x24\xe6\x6a\xe6\x4b\xdf\x38\x1d\x13\x94\x26\x2f\x52\x4d\xe7\xe4\x7b\xd0\x11\x90\x84\x0f\x00\x0b\x7c\x24\x40\x58\x37\x80\xa5\xf9\x73\xa3\x12\x09\x29\x27\x52\x31\x0a\xb2\x46\x03\x84\x90\xa1\x50\xd0\x30\xff\x3c\xac\x93\x2b\xf1\x3d\xa7\xf7\xe5\x25\xc4\x13\xcf\x20\x77\x64\xb8\x9c\x49\x52\x73\xb7\x38\xd9\x1d\x19\x2e\x45\x96\x67\x50\x98\xd9\xee\x12\xab\x1b\x59\xef\x1b\x50\xed\x96\xaa\x02\x0d\x46\x38\xac\x21\xac\x00\xee\xe9\x82\x2b\x7c\x75\xbd\x3c\x37\x40\xa1\x06\x87\x50\xa8\x9f\x3a\x84\x42\x0d\x0d\x61\x09\xf0\x27\x0d\x61\xf8\xb8\x77\x2a\x36\xaf\x7c\xf1\x76\x56\x67\xc2\xcd\x28\x33\xee\xb4\xd2\xf7\x3e\x0d\x54\x76\xb3\x11\x97\xb2\xc8\x27\xac\x8d\xa1\x04\x44\x0a\x61\x09\xd0\x0c\x45\x4b\x7a\xe6\xe2\x11\x6e\xb7\xcf\xd4\xc0\xd4\x37\xe7\x8b\xf5\x2f\x86\x45\x86\xbc\x1a\xaf\x7f\x29\x6a\x23\x94\x76\x2f\xd2\xc4\x30\x61\x32\xd6\x37\x1e\x61\xc1\x9b\x0b\xdf\x79\x2e\x00\xa4\x7e\x29\x18\x05\x47\x69\xed\xdc\x30\x2c\xc5\x4c\x6e\x1c\x10\x85\xad\xf0\x58\x64\x17\x3a\x97\x49\xe0\x0a\x42\xe9\xe0\x49\xb8\x05\xc4\xc8\x47\xf1\xe0\x48\x00\x9f\xb5\x6b\xb6\x97\xe9\x9a\xad\xd3\xa3\xe5\x5e\x69\xeb\xb9\x2f\xe5\x83\x5b\x63\x9b\x47\xe5\x06\x86\xd5\xe5\x0c\x8d\x09\x2f\x32\x1a\x8c\x88\xbf\x05\xb2\x7f\x5a\x90\x0a\xb5\xae\x68\x3b\x6c\xf8\x66\xec\x34\xbc\xa2\xa5\x23\x56\x28\x5f\x9d\xbb\x80\x3b\x46\x65\x05\xa9\x91\xce\xe6\xda\xdc\xb9\x53\x75\x50\xcc\x42\x38\x9a\x4f\xdb\x27\x84\xa1\x87\x06\xa9\x3c\xeb\x7c\xf2\xad\xa5\x8f\x7b\x3a\xea\xdf\xc3\x06\xf1\x54\x6a\xec\x13\xa4\x20\xdc\xff\x20\x42\x0d\xb3\xa7\xac\x14\xb6\xf7\x36\x3a\x1f\xed\x5b\xd2\x4e\x74\xbe\x9c\xd7\xb2\xd5\xf1\xeb\x2b\xcf\x94\x1e\x21\xfa\xe1\x08\x8c\x4c\xe9\x47\x34\xdd\xcf\x7c\xc3\xbe\xbb\x86\x77\x6f\xdc\xfe\x09\xcc\x5e\x85\x8d\x33\xf3\x47\xc9\x71\x08\x71\x6e\x9d\xce\x60\x6d\x70\xfd\xfb\x8e\x59\x73\x50\x48\xf2\x44\x87\xc6\xc8\x95\xff\xe3\xe4\x5b\xcb\x99\x1e\x6c\x3b\x95\x3a\xde\x59\xf7\xce\xee\x9e\xd9\x1e\x6d\x8f\xac\xff\x57\xfe\x96\xe9\xea\xc7\xd5\x7f\x01\x00\x00\xff\xff\x05\x39\xc3\xb0\x53\x26\x00\x00")

func regoAbstractJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoAbstractJson,
		"rego-abstract.json",
	)
}

func regoAbstractJson() (*asset, error) {
	bytes, err := regoAbstractJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-abstract.json", size: 9811, mode: os.FileMode(420), modTime: time.Unix(1547060532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoAttributeIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5a\x51\x8f\xdb\x36\x0c\x7e\xef\xaf\x20\x82\x02\x05\xb6\x5e\xb1\x3d\xb6\x6f\x7d\xe8\x43\x81\x76\x1b\x86\x3d\xf5\x7a\x0d\x68\x9b\x4e\xb4\xca\x92\x8e\x92\x72\xc9\x86\xfb\xef\x83\x64\x3b\xb1\x73\x49\xec\xd8\xbe\xa4\xf3\xcb\x05\x36\x45\xe9\x23\xa9\x8f\x94\x78\xd0\x78\x66\x6e\x63\x68\xf6\x0e\x66\x3a\xf9\x9b\x52\x37\x7b\xfd\xa2\xf5\x35\x23\x9b\xb2\x30\x4e\x68\x15\x84\x3e\x09\xeb\x40\xe7\xb0\x22\xb6\x42\x2b\xca\x00\x9d\x63\x91\x78\x47\xf6\xcd\xfe\x58\xcc\x32\x11\x06\xa2\xfc\x83\xb5\x21\x76\x82\xec\xec\x1d\xe4\x28\x2d\xed\x89\x1a\x74\x8e\x58\xb5\xe4\xfe\x6d\x89\x44\xb1\x6f\xab\xdb\x5f\x6e\xde\xde\xfd\xfc\xf5\xe5\xc1\xef\x2d\x3c\xc8\x8c\x9b\xbd\x25\x75\xc1\xda\x81\x01\xa1\x00\xc1\x20\x3b\x91\x7a\x89\x5c\x23\x7e\x03\x1f\x1d\x3c\x08\x29\xc1\x5b\x02\x94\xb2\x39\x26\x67\x5d\x80\x5b\x12\x18\xa6\x95\xd0\xde\xd6\xa3\x2c\xa0\xca\x00\xb3\x0c\x34\x83\x5e\x11\x3f\xb0\x70\x14\x45\xb5\x22\x0b\x19\xa5\x12\x99\xb2\x7d\x13\x6e\xd7\x2b\x1c\x15\x87\x6d\xd2\xcf\x8f\xa7\xc0\xff\x49\x86\xc9\x92\x72\x61\x95\x3b\x38\xc1\x1e\x61\x81\x5c\x7f\xa6\x0c\x4a\xdd\xc7\x56\x19\x95\x33\xdd\x7b\xc1\x94\xcd\xde\xc1\xed\x51\xa9\x28\xa9\xb0\xa0\x13\x9a\x76\xa0\x3a\x64\x9a\x70\x8e\x4a\xde\x9d\x58\x72\xff\x38\x6d\x0d\x33\xa7\x83\xb5\x3d\x85\x94\xfa\x81\xb2\x79\xba\x44\xee\x16\x7f\x02\x2b\x7a\x69\x41\x6b\x03\x6e\x89\x0e\x10\xac\x63\xa1\x16\x0d\x67\x15\xde\x3a\x58\x6a\xa5\x19\x9c\x86\x84\x60\x85\x52\x64\x1d\xa6\x83\x66\xdc\x94\x2a\x8f\x5b\x30\x3c\x8f\x1d\xae\x68\xc1\x9c\x17\x64\x2d\x2e\x68\x10\xdc\xcf\xe5\x58\xa0\xb5\x91\x28\x54\x00\x5b\x06\x63\xb4\x42\xbd\x5f\xe2\x2e\x6d\x99\xf6\x6a\x80\xb5\x48\x7b\x04\xc2\x21\xa8\xef\x4b\x1d\xc1\x63\x3e\x90\x88\xe6\xa7\xfb\x70\x63\x08\x3e\x28\x5f\x9c\x83\xef\x14\x01\xb6\x06\x74\x93\xcb\x41\xfd\x95\xfd\xba\x27\x80\x06\xc3\x87\x81\xdf\x6e\xdf\xdf\x7c\xf9\xf5\xe6\xed\xdd\x2d\xde\xfc\xf3\xfe\xe6\x4b\xa0\xf4\x9f\xbe\xbe\x3c\xed\x89\xf0\x3c\x8e\xf3\x95\x77\x7a\x41\x8a\x18\x5d\xa4\xa7\xf3\x3d\xf5\xd7\x92\x1a\x7e\x11\x16\x5a\x2a\x21\xd9\xc4\x18\x4d\x30\xfd\x4e\xea\xac\xbd\x97\x68\x2d\x09\x4f\xd0\x57\x1f\x7c\x29\x13\x86\x95\xce\xb5\x92\x9b\x09\xf0\xa5\xa8\x20\xa8\x0a\x6c\x62\xc9\x41\xe6\x23\xe7\xc4\x69\x08\x02\xf7\xc5\xe9\x2e\x8e\x33\xa3\x1c\xbd\x74\x73\xcd\x19\xf1\x60\x9c\x71\xb7\xd5\x39\xae\xe5\x54\x6f\x43\x59\x13\x92\x72\x9c\x07\xe2\x3c\x01\xf9\x77\xea\xb5\x9d\x9e\x05\x6c\x5c\xee\x60\xb0\x35\x94\xc3\xa0\xcf\x00\x75\x5b\xb3\xca\x0e\xde\x6b\x98\x09\xe5\x68\x41\x1c\x7e\x2a\x2f\x65\xf9\xb7\x48\xca\x37\x75\x3d\xb2\x25\x8c\xbb\x91\x06\x31\x4c\xe9\x74\x5b\xb8\xa1\xef\xf2\xbe\x6d\x2e\x6d\xa8\x67\xb7\xaf\xc6\xf8\x75\x92\x64\x48\x6b\x2c\x8c\xa4\x11\xb1\xfa\xa1\xd4\x50\xc5\x69\xc8\x84\xff\xdf\x40\xa5\xb5\xd1\x76\xaa\x28\x35\x3e\x91\x22\x95\x1b\xa8\xb5\x0e\x88\xd5\x1e\x43\x2a\x9e\x08\xa3\x1c\x7b\x1a\x1b\x0e\x8e\x54\x3c\xfd\x0c\xb2\xc1\xef\x06\xef\x3d\x05\xd2\xad\xc2\xc1\xa0\x60\x5b\x16\xc0\x21\x35\x25\x54\x32\x75\xb2\x81\x54\x17\x46\x48\xe2\x27\x47\xd0\x83\xf3\xec\x1d\x94\x46\x61\xcc\x85\x74\xc4\x98\xc8\xe1\xdc\xdc\x4e\xb8\x35\xaa\x10\xfb\xa5\xf2\x90\x79\x8c\xe7\xe0\xf6\xb3\xca\xdb\x49\x28\x2a\xd7\x4c\x62\xa1\xe6\x21\xf5\x4d\x53\x31\x41\xa5\xf2\x2a\xd9\x74\x41\xa1\x08\x9d\x00\x49\xbc\x01\x58\xe2\x8a\x00\x61\x57\x00\x56\xea\x2f\x8d\x4a\x64\xa4\x9c\xc8\xc5\x24\xc8\x1a\x05\x10\x42\x81\x42\x41\x43\xfd\xf3\xb0\x8e\x57\xe2\xde\xd3\xc7\xea\x14\x12\x88\x67\x94\x39\x0a\x5c\xcf\x25\xa9\x85\x5b\x0e\x36\x47\x81\x6b\x51\xf8\x02\x4a\x35\x4f\xab\xc4\xfa\x48\xd6\xfb\x08\xb4\x35\x4b\x9d\x81\x46\x23\x1c\x57\x10\xd6\x00\x8f\x54\xc1\x35\xbe\x6d\xbe\xbc\x34\x40\xa1\x46\xbb\x50\xa8\x1f\xda\x85\x42\x8d\x75\x61\x05\xf0\x07\x75\x61\xbc\xdd\x1b\x8a\x2d\x0c\xbe\x7a\x39\xab\x0b\xe1\xe6\x54\x18\x37\x2c\xf5\x7d\xcc\x23\x95\xbd\xde\xf3\x4b\x95\xe4\x33\xd6\xc6\x50\x06\x22\x87\x38\x05\x68\x86\xb2\x24\xbd\x70\xf2\x88\xa7\xdb\x67\x2a\x60\xb6\x27\xe7\xab\xd5\x2f\x86\x45\x81\xbc\x99\xae\x7e\x29\x73\x23\x54\x7a\xaf\x52\xc4\x30\x61\x36\xd5\x1d\x8f\xb0\x10\xd4\xc5\x7b\x9e\x2b\x00\xd9\xb6\x0a\x26\xc1\x51\x69\xbb\x34\x0c\x4b\x29\x93\x9b\x06\x44\xa9\x2b\x76\x8b\xec\x52\x7b\x99\x45\xae\x20\x94\x0e\x1e\x84\x5b\x42\x8a\x7c\x16\x0f\x4e\x04\xf0\x59\xab\x66\x7b\x9d\xaa\xd9\x3a\x3d\x59\xec\x55\xba\x9e\xfb\x50\x3e\xba\x34\xb6\x3e\xa9\x16\x30\x2e\x2f\x17\x68\x4c\x6c\xc9\x68\x30\x22\xfd\x1e\xc9\xfe\x61\x49\x2a\xe6\xba\xb2\xec\xb0\xf1\xce\xd8\x69\x78\x45\x6b\x47\xac\x50\xbe\xba\x74\x02\x77\x8c\xca\x0a\x52\x13\xed\xcd\x9d\xba\x4b\x87\xea\x28\x9f\x45\x77\x34\x7b\xdb\x03\xdc\xd0\x63\x04\x29\x5f\x74\xf6\x7c\xb7\xd2\xe7\xf5\x8e\xfa\xd7\xb0\x51\x3c\x97\x1a\xfb\x38\x29\x0a\xf7\xdf\x88\xb0\x85\xd9\x53\x56\x0a\xdb\x7b\x19\x9d\x5d\xfb\x96\xb4\x13\x9d\xad\xf3\xad\x6c\xbd\xfd\xfa\xca\x33\xe5\x67\x88\x7e\x3a\x03\x23\x53\xfe\x19\x4d\x77\x9b\x6f\xdc\xbd\x6b\x6c\x7c\xc7\xce\xd4\xb0\x7b\xc7\xdf\x2a\x8e\x43\x48\xbd\x75\xba\x80\x9d\xc2\xdd\x3f\x78\xcc\x9b\x2f\x85\xa4\x40\x74\x68\x8c\xdc\x84\x1f\x83\x4f\x2d\x17\xea\xd8\x76\x0e\xea\xe8\xb3\x1e\xfd\x7a\xf8\xcb\xd3\xb7\xed\x37\x8f\x2f\xfe\x0b\x00\x00\xff\xff\x7e\x0d\x3a\x43\x90\x24\x00\x00")

func regoAttributeInBytes() ([]byte, error) {
	return bindataRead(
		_regoAttributeIn,
		"rego-attribute.in",
	)
}

func regoAttributeIn() (*asset, error) {
	bytes, err := regoAttributeInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-attribute.in", size: 9360, mode: os.FileMode(420), modTime: time.Unix(1547059967, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoInfoJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xbd\x4e\xc3\x40\x0c\xc7\xf7\x3c\x85\x75\x30\xb6\x0d\x13\x43\x36\xc6\x0e\xa0\x4e\x2c\x88\xc1\x4d\x7c\xad\xab\x34\x77\xd8\x0e\x02\x55\x7d\x77\x74\xb9\xa6\x4a\x3f\x36\x96\x44\xf9\xd9\xff\x8f\xf8\x50\x00\x00\xb8\x47\xad\xb7\xb4\x47\x57\x81\xdb\x9a\xc5\xaa\x2c\x77\x1a\xba\x79\xa6\x8b\x20\x9b\xb2\x11\xf4\x36\x7f\x7a\x2e\x33\x7b\x70\xb3\xac\x34\xb6\x96\x92\x6e\xd9\xf9\x30\xc2\x86\xb4\x16\x8e\xc6\xa1\x4b\xa3\x57\x32\x04\xee\x7c\x90\x3d\x26\x06\xb8\x0e\xbd\x01\x82\x92\x41\xf0\xa0\x91\x6a\xf6\x5c\x0f\x43\x5d\x9c\xad\x7f\xe3\xe0\x1c\xd6\x3b\xaa\x6d\xa4\xd8\x34\x9c\xf6\xb0\x5d\x49\x88\x24\xc6\xa4\xae\x02\x8f\xad\xd2\x69\x45\xe8\xab\x67\xa1\xc6\x55\xf0\x31\x90\x81\x46\x21\xcf\x3f\x27\x9b\xbc\x17\x82\x4d\xbf\xbf\x49\x34\x55\x1e\xc8\xe7\xac\x28\x4e\xba\x49\xcc\xe1\xc6\x6f\xca\x2e\x6a\xab\x09\x77\x9b\x89\xff\xbd\xd3\xac\x06\x13\xb0\x00\xbd\x52\x7a\xd5\xd8\xb6\x80\x91\xd5\x9d\x75\xc7\xeb\xca\xff\x8b\x7c\xc3\x3d\xa5\xab\xdb\x96\x20\xd9\x5d\x9e\xff\x56\xec\xb1\x6f\x53\x66\xce\xbe\xdb\x6a\x3c\xdc\x4d\xb1\xab\xe8\xf7\xbc\x37\xa6\xbf\xac\x96\xd7\x71\xe3\x9f\x70\x67\xb4\x21\x99\xc4\x15\xf9\x79\x2c\xfe\x02\x00\x00\xff\xff\xb8\x06\xde\x01\xb3\x02\x00\x00")

func regoInfoJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoInfoJson,
		"rego-info.json",
	)
}

func regoInfoJson() (*asset, error) {
	bytes, err := regoInfoJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-info.json", size: 691, mode: os.FileMode(420), modTime: time.Unix(1528494787, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoParamIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\xcb\x6e\xdc\x3a\x0c\xdd\xe7\x2b\x08\xaf\x83\xfb\x01\x59\x27\x8b\x0b\xb4\xc5\xa0\x0d\xba\x09\x82\x80\xb6\x39\x33\x2c\xf4\x70\x25\x39\x0f\x14\xf9\xf7\x42\xf6\x78\x62\x8d\x2d\x5b\xb6\x51\xb4\xde\x0c\x6c\x91\x47\xd4\xe1\x21\xc5\x81\xde\x93\x39\x76\x82\xb2\x1b\xc8\x76\x68\x50\x92\x23\x03\xdf\xc8\x65\xd7\x57\xa1\xd5\x5b\xd5\x18\xe9\xfc\x07\x15\x83\x55\x2c\x4b\x76\xac\x15\x8a\x9d\xd1\x15\x19\xc7\x64\xb3\x1b\xd8\xa3\xb0\x74\x61\x5a\xf5\x0d\x7e\x05\x6b\xcd\xba\xa1\x9f\x35\x1b\x2a\x47\x57\x23\x01\x5b\xf8\xda\x7a\x49\x52\xce\xc2\xdd\x6b\x65\xc8\x5a\xd6\xca\x5e\x04\x7a\xc6\x28\xc9\x16\x86\x2b\x1f\xb3\x47\xba\xa5\x3d\x2b\x82\x97\x23\x3a\x28\xb4\xcc\x59\xa1\x5f\xb2\xa0\xf7\x50\x7d\xec\x82\x86\xa0\x8b\xef\xbf\x18\x74\xc7\x14\x1a\x83\x6f\x31\x23\x76\x24\xc7\x09\x58\x84\x93\x88\xb5\x08\x6f\x01\x66\x80\x6b\x9d\x61\x75\xc8\x26\x1d\xde\xa3\xab\xe3\x2b\xc3\xaf\xef\xc3\xc0\x33\x52\xce\xc4\xf4\x04\x81\x62\x3e\xb1\x75\x3e\xa7\x1f\xca\x49\x16\x88\x7f\xcd\x09\xdc\x91\x40\x9c\x50\xf0\x19\x59\x60\x2e\xa8\xa7\x91\x3f\x2f\x8b\x81\xfa\xa7\xb4\x11\x3b\x06\x82\x65\x75\xe8\x47\x3e\x85\x32\x59\xfc\x81\x65\x7a\x23\x08\xdc\x7a\x45\xff\x30\x2d\x4c\x85\x92\xe6\xc4\xdb\x3f\xf4\x8c\x69\x73\xb2\xa8\xc9\xe3\x44\xc8\x33\x7d\x6c\x18\x74\x5a\x31\x0d\x9b\xf1\x97\xf9\x13\xc3\x48\xaa\xbd\x9b\x17\xa9\x17\xec\x39\xc9\x31\x75\x86\x31\x2c\x29\xe8\x05\xa9\x58\x4b\xc0\x6d\x72\x3a\x47\xb6\xcc\x7a\xde\x7f\x9f\x8e\x13\xd6\x3a\x1e\xee\xbd\xf3\x72\x02\xee\x8f\x04\x7e\xdf\xe0\x2e\x5b\x73\xf2\x04\x0f\x52\xb5\x9c\xad\xe1\xb3\x75\x32\x6e\x63\xcd\xca\xd1\x61\xb2\x4f\x05\xe6\x7b\xa1\x71\xaa\x55\x05\xc6\xb9\xd6\x82\x30\x45\x5e\x70\x3e\x66\xa2\x6d\x59\x1b\x4c\x94\x2e\xb4\x89\x97\x13\x1d\xa9\x7b\x1e\x37\xc9\x50\xd6\xc2\x71\x25\xd6\x4b\xf1\x73\x0b\xc0\x05\xbb\xb9\x51\x02\xa2\xe3\x96\x05\xbe\xa8\x47\x28\x50\x41\x4e\x60\x49\x39\xe8\x82\x04\xcf\x48\xf4\x5e\x0d\x23\x3d\x09\xb6\x4b\xe7\x26\x92\x50\x08\xfd\x42\xe5\x53\x71\xd4\x5c\x24\x74\x79\x88\x70\xb5\xd3\xd6\xb2\x20\xf8\x8e\xa2\xa6\xd8\xbc\x11\x80\x5c\xb0\xf5\x7f\xcb\x52\x53\xc3\x6c\xc1\x8b\xef\xba\x99\x41\x2c\xa0\x10\x2d\x83\x7e\x0f\x3f\x88\x3c\x27\x6f\xb2\x64\x1c\x84\x65\x23\x21\x2c\x6d\x9b\x30\x39\x1a\x42\xd2\x3d\xb3\xc7\x5a\xb8\xa7\xe6\xfc\x1b\x6e\x9a\x06\xa5\x4d\xd5\x3a\x5d\x37\xfe\x4d\x14\x83\xdb\xc6\xcb\x5d\x4b\x76\x8e\xca\x05\x09\x7a\xe8\x32\xd4\xeb\x52\xbd\x66\x08\x99\xaa\x85\x68\x7f\x65\xde\x7e\xe9\xc6\xb4\x33\xf9\xdb\xba\x05\xbd\xa2\xac\x04\x6d\xe4\xf6\xae\x45\x59\xcd\x6d\xe7\x3f\xce\xed\xbf\x45\xe8\xf6\x7f\x39\x57\xe1\xdb\xef\x00\x00\x00\xff\xff\x76\x36\xe8\x20\xb1\x0f\x00\x00")

func regoParamInBytes() ([]byte, error) {
	return bindataRead(
		_regoParamIn,
		"rego-param.in",
	)
}

func regoParamIn() (*asset, error) {
	bytes, err := regoParamInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-param.in", size: 4017, mode: os.FileMode(420), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x31\x6f\xc2\x30\x10\x85\x77\x7e\xc5\xc9\x74\xaa\x0a\xee\xd4\x81\x8d\x81\xb1\x12\xa2\xec\x91\xb1\x9f\x6b\xa3\x60\x5b\xe7\x5b\x50\x95\xff\x5e\x39\x29\x69\xd3\x2d\x79\xf7\xbd\x7b\xe7\xf7\xb5\x22\x22\x52\x4f\xd5\x06\xdc\x8c\xda\x91\x0a\x22\x65\xa7\xf5\xb5\xe6\xb4\x99\xd4\x6d\xe6\x4f\xed\xd8\x78\xd9\xbc\xbe\xe9\x49\x5b\xab\x97\xc9\x29\x51\x7a\x34\xdf\x47\x30\x0c\x47\x47\xc3\xe6\x06\x01\xd7\x07\xe1\x50\x2d\xc7\x22\x31\xa7\xc6\x9d\x03\xa8\xcc\x10\x39\xf8\x98\xe0\x28\x80\x41\xd6\x24\xba\x80\x18\x1e\x0c\x8b\x64\xe1\xe8\x72\xa7\x2c\x01\x4c\xb5\xc0\x46\x1f\xad\x69\x9b\xea\x76\x3e\xe0\x5e\xc6\xfc\x7c\xb9\xc2\xca\x43\x35\xce\xc5\xc6\x99\xfe\xc8\xb9\x80\x25\xa2\xaa\x1d\x79\xd3\x57\xfc\x20\xc5\x88\x80\xd3\x62\x3e\xd5\x31\x8e\xb7\xcf\x8b\xff\xa9\x26\x86\x6f\x59\x6b\x3d\x9e\x3d\x26\x54\xfd\xfb\x1a\x35\xe3\xc3\xf8\x35\xcc\x15\xcc\xf4\x32\xe4\x8f\xb5\xe9\x5d\x77\xdc\x9f\xf6\xef\x87\xf3\xe1\xd4\x75\xff\x77\xad\x86\xd5\x77\x00\x00\x00\xff\xff\xc9\x23\xe7\x9b\xae\x01\x00\x00")

func regoSharedParamsInBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsIn,
		"rego-shared-params.in",
	)
}

func regoSharedParamsIn() (*asset, error) {
	bytes, err := regoSharedParamsInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.in", size: 430, mode: os.FileMode(420), modTime: time.Unix(1533220356, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSharedParamsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x4d\x6f\xdc\x38\x0c\xbd\xcf\xaf\x20\x9c\x3d\x2d\x92\x99\x3d\xed\x21\xe7\xe4\x50\xa0\x2d\x82\x26\xe8\x25\x08\x02\xda\xa6\xc7\x0a\x64\xc9\x95\x38\xf9\x40\x31\xff\xbd\x90\x34\x76\xec\xf8\x7b\x06\x45\xdb\x4b\x63\xe9\x91\x22\x1f\x9f\x28\xce\xcf\x15\x00\x40\xf4\x8f\x4d\x72\x2a\x30\xba\x84\x28\x67\x2e\x2f\x37\x9b\x27\xab\xd5\x45\x58\x5d\x6b\xb3\xdd\xa4\x06\x33\xbe\xf8\xef\xff\x4d\x58\x3b\x8b\xce\x83\x25\x0b\x96\xe4\xec\x6e\x73\x34\x94\xc2\x0d\x1a\x2c\x88\xc9\xd8\x0a\x91\x92\x4d\x8c\x28\x59\x68\xe5\x70\x77\x39\x41\x59\x83\x20\xa5\x4c\x28\x4a\x21\x27\x43\x90\xa0\x82\x98\xc0\x50\x46\x86\x12\x52\x09\xa5\x10\xbf\x81\xe6\x9c\x0c\xd8\x92\x12\x91\x89\x04\x9d\x27\xbb\xae\x03\x78\x2b\xfd\xf9\x3a\x7e\xa2\x84\xab\x55\x4c\x53\xe1\x70\x28\x6f\x8c\x2e\xc9\xb0\x20\x1b\x5d\x42\x86\xd2\xd2\x01\x52\x22\x33\x19\xd5\xda\x0f\x74\xf8\xed\xf5\xbf\xad\xef\x40\x93\xa1\xcc\x9d\x75\xb6\xf1\x61\xfb\x13\xec\xe6\x3d\x9b\xa8\x86\xef\xfd\x5f\xfb\x9a\x82\x1a\xdd\x3e\xa4\x61\xda\x39\xac\x66\xb6\xa6\x14\x6e\xa9\x4a\xf0\x1d\xd5\x97\x7e\xbd\x3b\x4d\xc3\x7b\x28\xfd\x3c\xd4\xfb\x86\x7e\xec\x84\xa1\xb4\x77\x77\x20\x60\x0b\xdf\x82\x55\x41\x8a\x2d\x5c\xbf\x96\x86\xac\xf5\x34\x9c\xf7\xfb\xf8\x20\x96\x2b\xaf\x0e\x78\xc9\x91\x21\xd1\x45\x2c\x54\xa8\x3e\xe8\xac\x29\x22\x34\x4e\x34\x21\xbe\xf5\x90\xeb\x8a\x29\x34\x06\xdf\x86\x40\x82\xa9\xe8\x27\x60\x91\x9f\x99\xbe\x16\xf9\x5b\xe0\xb3\xe5\xd7\xb2\x11\x6a\x1b\x8d\x1a\xec\x07\x77\xfb\x77\xba\xab\xfb\x6e\xe0\x11\x29\x36\x43\x7a\x82\x96\x62\x3e\x0b\xcb\xae\xa6\x9d\xee\xd1\x31\xe9\x08\xc4\x7d\xc6\x04\x9c\x13\xc8\x83\x17\x7c\x46\x21\x31\x96\xcd\x46\xf3\xfb\x65\xd1\x51\xff\x98\x36\x86\xd2\x40\xb0\x42\x6d\x9b\x91\x8f\x79\x19\xbd\xfc\x2d\xe4\xfc\x46\xd0\x32\x6b\x5c\xfa\xfb\x71\x61\x2a\x2c\x68\x4a\xbc\xcd\xa4\x27\xa0\x3e\xb3\x41\xc8\xc3\x48\xc8\x13\x7d\xac\x1b\xf4\xbc\xcb\xd4\x6d\xc6\x5f\xa7\x33\x86\x9e\x52\x3b\x33\x27\x52\x6e\xbe\x83\x43\xea\x6c\xc7\xb0\xe4\x42\x2f\x28\xc5\xb1\x04\x5c\xcd\x2e\x67\xcf\x91\x51\xc3\xfa\xcf\xd3\x71\xf0\x75\x1c\x0f\x77\xce\x78\x39\x01\x6e\x10\x72\xe7\xb6\xde\xb2\x63\x32\x9f\x61\x41\x6a\x57\x4c\xde\xe1\x1a\x3d\xdb\xaf\x47\x0b\xc5\xb4\x1d\xed\x53\x2d\x78\x26\x35\x8e\xb5\xaa\x16\x38\xd6\x5a\x12\xce\x91\x17\xd4\x69\xce\xc4\xa6\x3b\x83\x33\xa5\x0b\xa1\xf0\xc5\x48\x47\xaa\xfe\x3d\x9c\x24\xc3\x62\x27\x59\x94\xf2\x78\x29\x7e\x09\x0e\x44\x22\x78\x6a\x94\x80\xc1\x71\xcb\x82\xf8\x70\x1f\xab\xc1\xdc\x92\x62\xa8\x82\x04\xc7\xc8\xe0\xbb\xda\x8e\xf4\x20\xd8\xaa\x9c\x27\x91\x84\x52\xea\x17\x4a\x1f\x93\x5c\x8b\x64\x46\x97\x87\x01\xae\x6e\xb4\xb5\x42\x12\x7c\x47\xb9\xa3\xa1\x79\xa3\xe5\xe4\x03\x5b\x9f\x02\x4b\xfe\x0e\x0b\x0b\x4e\x7c\xe7\x7e\x06\xb1\x80\x52\x06\x06\xdd\x19\x6e\x10\x79\x9e\x7d\xc8\x92\x71\x10\x96\x8d\x84\xb0\xb4\x6d\xc2\xe8\x68\x08\xb3\xde\x99\x0c\x77\x92\x1f\x7d\xfe\x27\xbc\x34\xde\x4b\x28\xd5\x71\xba\xf6\xf6\x3e\x8a\xce\x6b\xe3\xe4\xae\x0b\xc1\x4c\xe9\x82\x02\xdd\x57\x15\x6a\x74\xa9\x46\x33\x84\x48\xed\xa4\x0c\xff\x17\x71\x58\xa9\xc6\xb4\x9a\xfc\xd3\xba\x05\xbd\x62\x51\x4a\x3a\x91\xdb\xeb\xe0\xe5\x68\x6e\x2b\xfb\x7e\x6e\xff\x2e\x42\x4f\xff\x95\xb3\xea\xff\x3a\xfc\xdc\x5f\xed\x57\xbf\x02\x00\x00\xff\xff\xa9\xb8\x42\xf1\x51\x11\x00\x00")

func regoSharedParamsJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSharedParamsJson,
		"rego-shared-params.json",
	)
}

func regoSharedParamsJson() (*asset, error) {
	bytes, err := regoSharedParamsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-shared-params.json", size: 4433, mode: os.FileMode(420), modTime: time.Unix(1547060532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecIn = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xcd\x6e\x1b\x37\x10\xbe\xfb\x29\x06\x9b\x1e\xe5\xa8\xa7\x1e\x74\x53\x1b\xa3\x0d\xd0\xb4\x86\xaa\x9e\x8a\x40\x18\x2d\x67\x25\xc6\x5c\x72\x43\x72\xed\x08\x81\xde\xbd\x20\xf7\x5f\xcb\x5d\xad\x52\x5b\x85\x73\x31\xe4\x21\x67\xf8\xf1\x1b\xce\xdf\x7e\xbd\x01\x00\x88\x7e\x30\xf1\x9e\x52\x8c\x16\x10\xed\xad\xcd\x16\xf3\xf9\x27\xa3\xe4\x6d\x21\x7d\xab\xf4\x6e\xce\x34\x26\xf6\xf6\xc7\x9f\xe6\x85\xec\x4d\x34\x2b\x34\x2d\xb7\x82\x9c\xde\x5f\x19\xc5\x3c\xe1\x31\x5a\xae\x64\xb5\xca\xc8\xc4\x9a\x67\x5e\xb4\x80\x68\x45\x99\x26\x43\xd2\x1a\x40\x09\x6a\xfb\x89\x62\x0b\x4f\xdc\xee\x01\x85\x00\xee\xc4\xd6\x6a\xbe\xcd\x2d\xb9\x1d\x0c\x34\x09\x6f\xcf\xd4\xc7\x1d\x32\x7f\x5a\xa1\x5b\x49\x91\x31\xee\xb6\xa1\xb8\xd7\x2a\x23\x6d\x39\x99\x68\x01\x09\x0a\x43\xe5\x16\x4d\x9f\x73\xae\x89\x45\x0b\xf8\xc7\x4b\xbc\x34\x55\x8c\x44\xe4\xff\xff\x58\x6e\xcc\xda\x16\xbe\x36\x5b\x1b\x64\x1d\x79\x41\x9f\xa6\xc4\xa1\x7a\x33\x67\x94\x70\xe9\xb1\x98\x79\x4b\xa3\xde\x7e\x9c\x35\x16\x9b\xcb\xf5\x0c\x56\xd7\x44\xad\xf1\x10\xcd\xba\x8b\x27\xa4\xfe\xce\x8d\x05\x95\x34\x5c\xc1\x96\xec\x13\x91\x04\xbb\x27\xd0\x15\xe5\xc4\x2a\xc2\x1d\xb1\xca\xee\x49\x83\x92\x64\xde\x9e\x9a\xe7\x96\xd2\x3e\xa4\x91\x7b\x56\x07\x47\x1d\x85\x63\xf0\xce\x05\xe1\x13\x09\x6c\x79\xa7\xb1\x78\xac\x9f\x56\xbd\xb1\xeb\xa8\x81\x23\xea\x87\xfa\xc1\xaf\x8f\x73\xfa\x9b\x12\xcc\xc0\x16\x0d\x8f\x81\xcb\x44\xe9\xd4\xdf\xd0\xd1\x1c\x26\xb5\xc7\x62\xf0\xa1\xd6\xab\xe7\x1f\x6c\xeb\x95\x04\x1e\x6e\xbd\x9a\x61\xfc\x80\x3b\x3a\xb1\x5f\x2a\x1a\xbb\x91\x98\x0e\x2d\xaa\x5c\xc7\x34\xb8\x81\xa4\xe5\xf6\x30\xb8\xdc\xe6\xab\xb3\xfa\x71\x76\xd3\xc5\x3f\x10\x4f\x0d\x15\x82\xa3\x19\x58\xec\x1d\xd5\x7a\xee\xa5\x1e\x58\xd5\xb8\x03\x10\x4c\x3b\x0d\x9d\x7a\xa5\xb6\x39\x16\x5f\xf5\xa6\xe1\x40\xe8\xd9\x31\x56\x73\xb9\x8b\x82\x1b\x8f\x3d\xe9\x31\x40\x68\x9e\x31\xb4\x34\xcc\xc2\x78\xe8\x61\xdc\xf7\xc4\xd0\x49\x8c\x04\x5d\xeb\xa4\xb6\xe7\xa6\xb9\x77\xbd\x27\x68\x89\xa6\x47\x5c\x6d\xf0\x9c\x4f\x42\x48\xdb\xaf\x7d\x2a\xd2\x5f\x30\x25\x71\x1b\xa3\x21\x06\x8f\xa4\x4d\x07\x6d\x19\x7a\xcf\x0b\xf2\x8b\x25\xc9\x2e\x8f\x94\x2d\x1a\xea\xc6\x05\xd8\x3d\x37\x27\xa2\xd2\x3a\xbc\xaa\xa8\xf1\xa0\x4d\xb0\x86\x0e\xb1\xf2\x67\x86\x9f\x73\x82\x07\x3a\xc0\x23\x8a\x9c\x20\x43\xae\x0d\xd8\x3d\x5a\x88\x51\xc2\x96\x20\x77\x2e\xdd\x1e\x20\x56\x69\xc6\x05\xe9\x5e\x8d\xec\xdd\xa4\xcc\xf2\x93\x30\x73\xc9\xe8\xcb\x37\x24\x3c\x87\x46\xe5\x92\x41\x65\xe0\x4a\x5e\x1a\xb3\x33\xd1\x16\x4c\xf5\x3a\x04\x3d\x1f\x96\x86\xb8\xdd\x91\xbd\x46\x62\xab\xaa\xee\x25\x49\xcd\xa5\x83\x2a\x3f\x94\xfa\x57\x4a\x6e\x99\xe6\x8f\xa3\xb5\x25\x80\x36\xd0\x36\x72\x03\xa5\xa5\xb3\xe8\xb6\x4a\x09\xc2\x89\x64\x76\x5b\x91\x4b\x40\x66\x22\xd7\x28\xae\x93\x7c\x9b\x6e\xea\x12\x84\xb9\xe4\x2e\xd9\x78\xdf\xd7\x94\x72\xb9\xf3\x40\x5f\xc0\xd5\x5a\xa9\x91\x00\x98\xe6\x67\x8c\xdd\x1c\x66\x0a\x2e\x95\xb2\x17\xb6\x54\x17\xf9\xfe\x11\x05\x67\x03\x43\xd0\x10\xec\x3f\xca\x40\x42\x88\x73\x63\x55\x0a\x8d\x11\x48\xb4\x4a\x3d\xf0\x4d\x5b\xc8\x05\xb9\x36\x11\xb3\x4c\x1c\xdc\x8f\x86\xfc\xd7\x53\xe9\x18\x59\x8c\xf7\x7e\x0c\x98\x46\xd3\xfb\x04\xac\xce\x69\xe6\xca\x85\xf3\x1d\x15\x1e\xad\x6a\x5a\x51\xf0\x7c\x1f\xd0\xc4\x77\x75\x48\xc3\x23\x66\xfc\xdb\x1d\x3e\x61\x1e\xcc\x50\x63\x4a\x96\x74\x41\xe4\x66\x73\xbf\x5c\x2d\x3f\xdc\xad\xef\x56\x9b\x4d\x50\xe1\x64\x0c\xdf\x6c\x96\xeb\xf5\xea\xfd\xcf\x7f\xaf\xef\x06\x14\xea\xe9\x74\x78\x22\x5c\x55\x5b\xc6\x87\xc2\xa5\x10\xea\xc9\x0f\x1c\x8c\x62\x81\x9a\x00\xeb\xa1\xbb\x99\xb9\x9f\x54\x37\x60\xfa\x03\xf6\x95\x46\xc3\x26\x63\xfd\xb7\x01\xed\xf2\xcc\x57\x6b\x14\x9d\x14\x1a\x40\x10\x5c\x3e\x54\xb1\xe7\x49\xab\x13\xce\x73\xe6\xbf\x58\xd3\x77\x37\x45\x5d\xa9\xa7\x79\xa1\x01\x74\x42\x0e\x38\xb1\x71\x3e\x4e\x61\x19\x4f\x08\xd7\xce\x07\xc9\xa2\x60\x14\x27\x14\xbf\xab\x53\xff\xaf\xf0\x1c\xfb\x82\xd2\xd9\x78\x2e\x3e\x27\x4d\xd9\x7d\x0e\xdf\xb5\xd4\x06\x22\xf0\x84\xd0\x77\xa1\xb1\x3c\x4c\x62\x8f\xcc\x4b\x82\x98\xb9\x9e\xc4\x55\xac\x91\x62\x17\xba\x8f\xd3\xe2\xa1\x44\x3e\x74\xa1\x35\x09\x61\x80\x77\xaf\x52\xd4\xc1\x1a\xc1\x73\x76\x3b\x3b\xa1\xb6\x28\x36\x27\x35\x6f\xfc\x7e\xbf\x7a\x1d\xb8\xaf\x75\x60\x45\x09\x69\x92\xf1\xf0\x04\xd8\xfb\xea\x5e\x2a\xb8\xfc\x5b\x60\x80\x06\x03\xf8\x70\x26\x37\x56\x16\x9d\x53\x6b\xc9\x75\x4e\xaf\xa7\x45\x9a\xc2\x6b\x38\x8b\xb5\x34\xa7\x67\xb0\x9b\xe2\xef\xf1\xe6\xdf\x00\x00\x00\xff\xff\xaa\xd5\x54\xbe\x44\x19\x00\x00")

func regoSpecInBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecIn,
		"rego-spec.in",
	)
}

func regoSpecIn() (*asset, error) {
	bytes, err := regoSpecInBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.in", size: 6468, mode: os.FileMode(420), modTime: time.Unix(1533331475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoSpecJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\xdd\x8f\xdb\x36\x12\x7f\xcf\x5f\x31\x70\x03\x14\xb8\xdb\xcd\xf6\x5e\x0e\x68\xde\x82\x4b\x70\x17\xa0\xe9\x05\x69\x71\x0f\x5d\x6c\x0d\x5a\x1a\xd9\xec\x52\xa4\x4a\x52\x5e\xfb\x8a\xfd\xdf\x0f\x24\x45\x7d\x58\x5f\x94\x2d\xdb\xd9\x43\xf7\x21\xd9\x95\xc8\x21\xe7\x93\xbf\x21\x87\xfa\xe3\x15\x00\xc0\xe2\xb5\x8a\x36\x98\x92\xc5\x5b\x58\x6c\xb4\xce\xde\xde\xdd\xfd\xa6\x04\xbf\x75\x4f\xdf\x08\xb9\xbe\x8b\x25\x49\xf4\xed\x77\x7f\xbf\x73\xcf\xbe\x59\xdc\xb8\x9e\x9a\x6a\x86\xa6\xdf\x4f\x19\x46\x34\xa1\x11\xd1\x54\x70\xff\x36\x46\x15\x49\x9a\xd9\x47\x6f\x61\xf1\x05\x33\x89\x0a\xb9\x56\x40\x38\x88\xd5\x6f\x18\x69\x78\xa2\x7a\x03\x84\x31\xa0\xe6\xb1\xd6\x92\xae\x72\x8d\xa6\x45\x0c\x12\x99\xa5\xa7\xca\xe1\xf6\x99\x1d\xcd\xf5\xf5\x4f\x49\x1c\x53\xd3\x8c\xb0\xcf\x52\x64\x28\x35\x45\xb5\x78\x0b\x09\x61\x0a\x8b\x26\x12\x7f\xcf\xa9\xc4\x78\xf1\x16\xee\xed\x13\xfb\x34\x15\x31\xb2\x85\xfd\xfb\xa1\x68\x98\xd5\x29\xfc\x51\x35\xad\x66\xd6\x78\xee\xc4\x27\x31\x31\xb3\xfa\xe6\x2e\xc6\x84\x72\x3b\x17\x75\x57\xeb\x51\x36\x7f\xbe\xa9\x28\x56\xcc\xb5\x08\x7a\x36\x89\x94\x64\xbf\xb8\x69\xbe\x3c\x10\xea\x0f\x54\x69\x10\x49\x25\x2b\x58\xa1\x7e\x42\xe4\xa0\x37\x08\xd2\x8b\x1c\x63\x2f\x70\x23\x58\xa1\x37\x28\x41\x70\x54\x6f\x0e\xc9\x53\x8d\x69\x7b\x4a\x03\x7c\xfa\x81\x17\x8d\x0e\xcf\x9d\x3c\x3b\x81\x07\x0a\xb0\xa6\x9d\x8a\xe2\x73\x69\x5a\x65\xc3\xa6\xa2\x7a\x86\x28\x0d\xf5\x93\x7d\x3f\x2c\xd3\x7f\x09\x16\x2b\x58\x11\x45\x23\xa0\x3c\x11\x32\xb5\x1c\x1a\x31\x77\x0b\xb5\x25\xc5\x4e\x43\x2d\xdf\x8e\x1b\x6c\xcd\x4a\x3a\x0c\xb7\x7c\x9b\x91\xe8\x91\xac\xf1\x80\x7e\xd1\x51\xe9\x25\x27\x69\xdf\x4b\x91\xcb\x08\x7b\x1b\x20\xd7\x54\xef\x7b\x5f\xd7\xe5\xd5\x78\xfb\x70\xf3\xaa\x39\xff\x1e\x7f\xaa\x44\xc1\x28\x51\x3d\x2f\x5b\x43\xd5\xcc\xbd\xe8\x07\x5a\x54\xea\x00\x02\xaa\x1e\x86\x0e\xb5\x52\xd2\x1c\xf2\xaf\xb2\x51\xbf\x23\xb4\xe8\x28\x2d\x29\x5f\x2f\x3a\x1b\x3e\xb7\x9e\x3e\x77\x08\x34\xcf\x62\xa2\xb1\x5f\x0a\xc3\xae\x47\xa2\xb6\x26\xfa\x46\x8a\x91\xe1\xa5\x46\xaa\x6b\x2e\x4c\xbd\x3f\x6f\x10\x6a\x8f\xc2\x3d\xae\x24\x38\xa6\x93\xae\x99\xd6\xad\x3d\x74\xa6\xff\x20\x29\xb2\xdb\x88\x28\x8c\x61\x8b\x52\x35\x66\x5b\xb8\xde\xbc\x93\xdc\x69\xe4\xf1\x74\x4f\x59\x11\x85\x4d\xbf\x00\xbd\xa1\xea\xe0\x51\x41\x1d\x5e\x94\xd7\xd8\x49\xab\xce\x35\xb4\x4f\x2a\xff\xce\xc8\xef\x39\xc2\x23\xee\x61\x4b\x58\x8e\x90\x11\x2a\x15\xe8\x0d\xd1\x10\x11\x0e\x2b\x84\xdc\xa8\x74\xb5\x87\x48\xa4\x19\x65\x28\x5b\x6b\x64\x8b\x93\x22\xca\x07\xcd\x99\xf2\x18\x77\x47\x04\x3c\x33\x1b\x91\xf3\x18\x3c\x81\x0b\x69\x69\x88\x4e\x20\x2d\x08\xd5\x3a\x74\x6a\xbe\xfb\x69\x97\x6c\xd7\xa8\x2f\x11\xd8\xfc\xaa\x3b\x25\xa8\x99\x70\xe0\xe3\x43\xd1\xff\x42\xc1\x2d\x93\x74\x3b\xb8\xb6\x74\xcc\xb6\x03\x36\x52\x05\x05\xa5\xd1\xd9\xad\x84\x60\x48\x02\x85\xd9\x84\x22\x53\x26\x99\xb1\x5c\x12\x76\x99\xe0\x5b\xa1\xa9\x29\x33\xcc\x39\x35\xc1\xc6\xea\xbe\x14\x29\xe5\x6b\x3b\xd1\x33\xa8\x5a\x0a\x31\xe0\x00\x61\x7a\x26\x91\xc9\xc3\x94\x93\xa5\x10\x7a\x22\xa4\x9a\xa4\xfb\x2d\x61\x34\xee\x49\x82\xfa\xa6\xfd\x63\xe1\x48\x04\xa2\x5c\x69\x91\x42\x45\x04\x12\x29\x52\x3b\xf1\x65\xfd\x21\x65\x68\x60\x22\xc9\x32\xb6\x37\xbf\x54\xc2\x7f\x39\x2b\x5d\x8c\x9a\x44\x1b\x9b\x06\x84\x89\xe9\x63\x02\x5a\xe6\x78\x63\x96\x0b\xa3\x3b\x74\x1a\xf5\x6b\x9a\x5b\xf0\x2c\x0e\xa8\xfc\xdb\x0f\x52\xc9\x91\x64\xf4\x78\x85\x07\xe4\x83\x19\x91\x24\x45\x8d\xb2\x2b\x09\xf6\x19\xdb\x67\xdf\x08\x7e\xc2\x56\x2a\x35\x5b\xa2\x35\x96\xa8\xd4\x12\xb1\x1e\x0d\xb4\x27\xac\xe0\x8b\xeb\x95\xda\x4d\x8f\x0f\x3b\xe3\x6d\xaa\xb6\xa1\xd1\xa2\x71\xa0\xc5\xf7\x66\xa5\x42\x78\xb2\xe8\x44\xa4\x2b\xca\x8b\x1c\x5f\x24\x50\xc9\x0e\x88\x34\xae\xec\xe6\x77\x31\xf8\x36\x37\x30\x18\xa3\x37\x81\x26\x4c\x01\x1c\xd0\x0b\x3a\xfa\xdf\x04\xc2\x53\xae\x65\x9f\x3d\x41\xc3\x62\x3c\xc8\xab\x2c\x27\xd8\x40\xcc\x9f\x2b\xb4\xde\xca\x7c\x6e\xbc\x25\x94\x91\x15\xc3\x9a\x8d\x9c\xdf\x2c\x5a\xd6\x3f\x64\x1b\x7d\x6c\x10\x50\x94\xaf\xeb\x33\x1f\xa2\x32\xe8\xfc\x8d\x96\xe1\x81\xa0\xd1\x6d\x70\xf7\xa5\xd1\xb2\x67\xa7\xa4\x97\xe9\x91\xa6\x96\xb3\xde\x26\x0f\x03\x53\x1e\x89\x63\xed\x49\x87\x39\x53\x3b\x18\xff\x38\xce\x31\x0c\xac\xdf\x0e\x08\x17\xc4\xfa\xac\xb3\x39\x87\x29\x0e\x3d\x41\x15\xc7\x0a\xe0\x7d\xb0\x3a\x3b\x86\x5c\xbc\x6f\xef\x72\x5c\x4f\x1c\x05\xad\xe3\xe4\xf0\xb3\xe9\x3c\x5d\x00\x06\x7f\x9a\x71\x1b\x6b\xd9\x31\x9c\x07\xf4\x40\x9e\xa7\xa3\x3e\x5c\xb6\x0e\xa6\x0b\x2e\xa1\xd7\xb8\x1e\x8c\x53\x8d\xe6\x09\x13\x64\x28\x54\x35\x1a\x7b\x70\x15\xd8\xdc\xb2\x19\xd8\x36\xce\x25\x09\x34\x5d\x70\x8a\x4f\x07\x22\x92\xff\x79\x38\xc9\x0c\xd3\x9c\x69\x9a\xb1\xe3\x4d\xf1\x93\x23\x40\x23\xaa\xc7\xa0\x04\xf4\xc2\x2d\x05\xf4\xc0\x1f\xfd\xce\x90\xdd\x64\xf6\x93\x04\x23\x91\xde\x75\xb5\x39\xd3\x31\xac\x5c\xff\x19\x13\x12\x61\x4c\x3c\x61\xbc\x8c\x36\x82\x46\x01\x51\x1e\x7a\x64\xf5\x59\x28\x65\x52\xa3\xff\x10\x96\xf7\x6e\x27\x35\x88\x74\xa4\x18\xde\x87\xa9\x02\x63\x7c\x37\x16\x83\x28\x7b\x9e\x67\x25\x68\xc6\x30\x40\x64\x1b\x3c\xc8\x14\x38\x08\xd3\x20\x21\x4c\x0d\x9b\x30\x08\x0d\x21\x68\x9d\x49\x48\xce\xf4\xd2\xf2\x7f\xc2\x4a\x63\xa9\x38\x55\x1d\x67\xd7\xb6\xbf\xdb\xf1\x3c\x5c\x6d\x8c\xb9\x8b\x94\x6a\x8d\xf1\x04\x05\xdd\x7b\x0d\xd5\xa2\x54\x2d\x18\xc2\x82\xe7\x8c\xb9\xff\xd3\x95\x7b\xe2\x61\x5a\x29\xfc\xd3\xa2\x05\xee\x48\x9a\x31\x3c\x51\xb6\x1f\x1c\x95\xa3\x65\xeb\xfb\x77\xcb\xf6\xeb\x12\xe8\xe9\x59\x4e\x40\x4e\x3f\x74\x52\x3e\x9c\xad\xf7\xec\x7c\x17\x1b\x7c\x18\xd7\xca\x03\x5a\x07\xae\x53\x32\x7d\xa2\x35\x4a\xfe\x79\x24\xe1\xff\x75\x7b\xff\xdd\xed\xf7\x0f\x7f\x7d\x3d\x90\xbf\x85\xe4\x4e\x7d\x07\x98\x55\xa9\x03\xe5\x40\x8c\xc9\x68\x1a\xe5\x8c\x48\xcf\xf0\x1b\xf8\xa8\xe1\x89\x32\x06\xb9\x42\x1b\x52\x6b\x7d\xca\x2d\x9a\x4c\xe2\x96\x8a\x5c\xf9\x5e\xae\x72\x82\xc4\x31\x08\x09\x62\x8b\xf2\x49\x52\xed\xf2\x43\x61\xd6\xb6\x18\x23\x46\x86\xf6\x09\x26\x6c\x01\x8c\xe7\x5d\x83\x15\x20\x25\x3b\xd3\x77\xc2\x61\xfe\xec\x4c\x8f\xc3\xd8\xfe\x73\xef\xfa\xcf\x50\x76\x76\x64\x1e\x3a\x25\xa9\xab\xf0\x01\xe9\xd8\x56\x1b\x65\xcb\x6a\x69\x8d\xbb\xcc\x6d\x11\x12\x70\xa1\xa5\xa6\xac\x34\x57\x1a\x36\x82\x0b\x09\x5a\x18\x58\x64\x37\x5b\x2f\x9d\xb2\x34\xd8\x5c\xa6\xa8\xd4\xd0\x91\xcc\x10\xbb\x9f\x5c\x5f\xc0\x5d\xc6\x08\xe5\x7e\x7f\x5e\x3a\x29\x78\x7f\xb1\x5e\xda\x10\xed\xd5\x18\x9e\x80\xfb\x0e\x58\x7d\xe7\x68\x14\x70\x0c\x12\x21\xdb\x7e\x68\xe0\xdc\x87\xb0\x44\xe2\xd2\x60\x2d\x30\x55\x29\x02\xbc\xe9\xf8\xeb\xfd\xbb\xdb\x5f\xfe\x76\xfb\xfd\xc3\x3d\xb9\xfd\xef\xbb\xdb\x5f\x4c\x44\xff\xcb\xeb\x73\xa3\x3e\x92\x6b\xb1\x46\x8e\x92\xe8\x81\x0d\xe3\x46\x97\x8e\xe4\xb8\x52\x0b\x55\xd0\x20\x09\xab\xbd\x35\xd1\x15\x89\x1e\x91\x4f\x72\xbd\x59\x52\x90\x48\xa2\xcd\x1d\x97\x82\xb3\xfd\x0c\xfc\x99\xf4\xca\x90\x72\x39\x96\x86\x38\xb7\x21\xc7\x0e\x83\x60\x42\x5f\x68\xaa\x3a\x2f\x9f\x1e\xbd\x0b\x19\xa3\x3c\x9a\xcf\x06\x32\x6c\x28\xd5\x56\x1a\x10\xb3\x26\x3b\x7c\x6e\xc7\x31\x9c\x3f\x62\x90\x37\x9d\x85\xd9\x09\x70\xba\xb3\x78\xa7\x23\xd5\x28\x99\xfe\xba\xe0\xf0\xa8\x40\x32\x89\xd1\x7c\x2e\x5c\xa3\x77\x79\xdd\x4e\xdc\xee\x0c\x2b\xcb\x3a\x46\xaf\xb3\xac\x85\x47\xa4\x7e\x83\x69\x9b\x59\x08\x5f\xae\xa1\xe2\x2e\x13\x6a\x2e\x2b\xcd\xf2\x15\xa3\x11\xdb\x83\xa7\x7a\x84\xad\x06\x65\xd1\x36\x4e\x98\x5e\x5a\xe6\x23\x3b\x8b\xe3\x02\x18\xad\x03\x3b\x18\xfc\x6c\x35\x61\x8d\x71\xc6\xea\xc3\xa6\xf0\x98\x50\xa6\x51\x92\x55\xe8\xee\xe8\xe8\x82\xeb\xb9\x32\xb6\xef\x88\x9b\x95\x27\xcb\xa5\x51\xfb\x24\x74\x3b\x4b\x88\x4a\x84\x44\xba\xe6\x4b\xb3\xf4\xcd\x83\x98\xa0\x20\x79\x95\xd5\x74\x8d\x06\x83\xce\xc0\x89\xdd\x00\xd8\x90\x2d\x02\x81\x0a\x00\x16\xe4\x2f\xcd\x15\x8d\x91\x6b\x9a\xd0\x59\x38\xab\x01\x20\x02\x29\xa1\x1c\x6a\xe4\xcf\x13\x75\x5c\x41\xd6\xc7\x22\x09\x31\x81\xe7\xb4\xf3\x0a\xb2\x5b\x32\xe4\x6b\xbd\x39\x5a\x1c\x29\xd9\xd1\x34\x4f\xc1\x91\x69\xa3\x44\x9f\x91\x85\x9f\x75\x79\xb1\xf8\x15\xe8\x64\x0e\x4f\x03\x84\x9e\xc1\x1e\x14\xec\xf9\x0b\x3f\x45\x9b\x99\x41\xca\x4f\x56\x21\xe5\x5f\xb5\x0a\x29\x3f\x55\x85\x05\x83\x5f\xa9\x0a\xc3\xab\x18\x46\xea\x72\xaf\x06\x67\x45\x4a\xf5\x12\xd3\x4c\x1f\xb7\xf4\x95\xb5\x7e\xba\x6b\x91\x8f\xa5\xc8\x32\x8c\x81\x26\x60\x87\x00\x21\xc1\x41\xd2\x0b\x2f\x1e\x36\xbb\x3d\x13\x80\x29\x33\xe7\xab\xe1\x97\x4c\xd2\x94\xc8\xfd\x7c\xf8\xc5\xad\x8d\x50\xd0\xbd\x0a\x88\x91\x48\xe2\xb9\xf6\x78\xa8\x02\x43\xce\xee\xf3\x5c\x81\x91\x91\xe2\xcd\x89\x7c\x14\xd4\x2e\xcd\x86\xc2\x48\x0e\x5c\x71\x98\xc4\x84\xa3\x65\x0f\x8b\xd4\x46\xe4\x2c\xb6\xb1\x02\x09\x2b\xae\xe4\x46\x44\x4e\x8a\x83\x33\x31\x78\x56\xd4\xac\xae\x83\x9a\x95\x16\xb3\xd9\x5e\x41\xeb\xdc\x49\xf9\xc9\xd0\x58\xe5\xab\xf0\xa2\xb2\x81\x75\x39\x25\x59\x66\x4f\x64\x04\x64\x34\x7a\xb4\xc1\xfe\x69\x53\xdc\x6e\xf6\xa5\x27\x0a\xb5\x69\xf0\x2d\xee\x34\x4a\x4e\xd8\xb7\x17\xaf\x9f\x93\x84\x2b\x8a\x7c\x26\xdf\xac\xc8\x5d\xda\x54\x4f\xd2\x99\xaf\xe6\x3b\x05\x47\xfd\x59\xcc\xe7\x9b\x4f\x29\xe6\x63\x54\x05\x4f\x63\xf4\xd0\xbe\xd1\xda\x96\xfd\x85\xce\xb8\x70\xbf\xd0\xf6\x12\x93\x09\x4d\x7f\x98\xc0\xa3\xc4\xe4\x13\xc9\xce\x5d\xae\x18\x72\x7d\xa9\xd1\xe1\x2c\x57\x99\x8e\xf2\xb6\x17\x52\x5d\xd7\xfb\x76\xce\x82\xa5\xf2\x03\x16\xfd\x57\x90\xbe\xf8\x26\xc3\x15\x4b\xf6\x78\xdd\x7e\x93\xa0\xa8\x1a\x00\x52\x7e\x97\xa3\xfa\x2c\xc7\x93\x68\xde\xa9\x6b\x17\x33\x5d\xe8\xeb\x11\xd5\xa5\xc6\xc6\xbb\xc9\xdf\x70\x98\x7e\x39\xb2\xec\x51\xdb\x01\x64\x94\x3f\x7a\x9b\xb6\x42\x2b\x8b\x80\xe6\xbc\x22\xe9\xce\x94\xff\xbf\x3e\xb4\x70\xa1\x6b\xcf\x67\xfa\x46\xc5\x04\x0f\x2d\x68\x8c\xfb\x29\xbc\x8b\x02\xdc\xb5\xf1\xcd\x22\x17\x88\xdd\x08\xee\x77\x3f\xea\xb5\xdc\x73\xe8\x23\x2b\x8d\x86\x63\xfe\x19\xf4\x21\x8e\xb6\x0c\xc7\xef\xb7\x04\xdc\x69\xe9\x13\x62\x4b\x98\x53\x9c\x38\xe0\x64\xbe\x93\x1f\xd3\x8b\x0e\x95\x92\xb4\x50\x2d\x32\x56\x5e\x07\x28\x23\x79\xc8\x59\xfe\x71\x17\xa2\xd7\x4c\xac\x08\x5b\x0e\x5c\x8b\x6d\xf3\xf7\x4f\xdb\x07\x1a\x97\x4e\x13\x94\xc8\xa3\xfe\x8f\x44\xb4\x0a\xfe\x8a\x0e\x26\xfe\xba\x39\xd4\xaf\x97\x5a\x77\x76\x15\x70\x16\x91\xd4\x5e\x19\x44\xf2\x72\x6e\x51\x87\xc8\xb5\x3b\x8a\xd5\x7a\x86\x47\xb0\x57\xee\xdf\xe7\x57\xff\x0b\x00\x00\xff\xff\x69\xa9\xf1\xf7\x67\x4d\x00\x00")

func regoSpecJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoSpecJson,
		"rego-spec.json",
	)
}

func regoSpecJson() (*asset, error) {
	bytes, err := regoSpecJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-spec.json", size: 19815, mode: os.FileMode(420), modTime: time.Unix(1547060532, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoTypeMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x6e\x9b\x40\x10\xc6\xef\x7e\x8a\x11\xa9\x54\xa9\x6a\x4c\x4f\x3d\xf8\x5e\xa9\x97\x4a\x3d\xf4\x56\xf5\x30\x66\x07\x98\x64\xd9\xdd\xce\x0e\x49\x69\xc5\xbb\x57\x0b\x36\x0e\x98\xd8\x91\xa2\xf8\x04\xf3\x87\x99\xfd\x7d\x9f\xf7\xdf\x06\x00\x20\x7b\x17\x8b\x9a\x1a\xcc\x76\x90\xd5\xaa\x61\x97\xe7\x77\xd1\xbb\xdb\x31\xba\xf5\x52\xe5\x46\xb0\xd4\xdb\x4f\x9f\xf3\x31\x76\x93\x7d\x1c\x3b\x95\xd5\x52\xea\xfb\xd1\x05\x82\x6f\x18\x02\xbb\x2a\x1e\xb3\x86\x62\x21\x1c\x94\xbd\x1b\x6a\x6a\x8e\x50\xb2\x25\xe0\x08\x6d\x24\x03\xea\xa1\xc1\x00\xf4\x47\x49\x1c\x5a\xd0\x2e\x50\x4c\x51\x8b\xae\x6a\xb1\x22\x88\x81\x0a\x2e\xb9\x88\xdb\x69\x64\x17\x86\x89\x7e\x7f\x47\x85\x1e\xa3\x68\x0c\xa7\x39\x68\xbf\x8b\x0f\x24\xca\x14\xb3\x1d\x94\x68\x23\x1d\x4a\x02\x6a\x1a\x33\xcb\x8f\x00\x86\xf4\xf6\xc3\xec\x7d\x04\x23\x54\xa6\x59\x37\xb9\xa1\x92\xdd\x30\x21\xe6\xc3\x06\x53\x61\x3f\x3c\xf5\xd3\x91\xa7\xba\xf9\xe7\x0f\x6b\x2f\x06\xcc\xf8\x1d\xce\x32\x25\xd7\xf0\xdd\x53\xf7\x94\x9e\x0a\xba\x68\x31\x95\x00\xba\x39\xc8\xf7\x11\x62\xbb\x4f\x4f\x50\x8a\x6f\x00\x27\x98\x43\xfd\x76\x39\x6e\x15\xec\x94\xbd\x0e\x78\x2a\xbd\x0c\xfa\x12\xf0\x2b\xe0\x9b\xd1\x5f\xd9\x59\x4f\xbf\x59\x7f\xeb\x4f\x9b\x65\xc7\xe6\xe7\x35\x38\xd8\xf7\xaa\x0c\x04\x05\x2a\x55\x5e\x4e\x52\xec\x3b\xa8\xc8\x91\xa0\x7a\x89\xc0\x0e\xbc\x18\x92\xa7\x0a\xd1\xd2\xe5\xec\x52\xb6\x26\x16\xf0\x8f\x0e\xb8\x09\x96\x1a\x72\xfa\xc6\xe2\x08\xfd\x6e\x59\xc8\x64\x3b\xf8\x79\xae\xc9\xdc\xda\xe9\xf7\x6b\x29\xee\x15\x55\x57\x7d\x7e\x89\xe5\x04\xc8\x0c\x60\x96\x27\x3f\x23\x10\x55\xd6\x3d\x70\xde\x97\x25\xe7\xbc\x78\x99\xaf\xfe\x31\x09\x36\xb8\x0d\x2d\xff\xa5\xa4\xce\x1b\xec\xd4\x04\x2f\x2f\xdf\xea\xcb\x03\x39\x6d\xd1\xc2\x49\x63\x18\x3f\x01\x5e\x20\x60\x71\x9f\xae\x49\xad\x51\x21\x88\x7f\x60\x93\x2e\xd0\x57\xef\xfd\xdc\xff\x69\xbc\xeb\x36\xfd\xe6\x7f\x00\x00\x00\xff\xff\x9a\x8a\x83\x1c\x3a\x06\x00\x00")

func regoTypeMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoTypeMappingJson,
		"rego-type-mapping.json",
	)
}

func regoTypeMappingJson() (*asset, error) {
	bytes, err := regoTypeMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-type-mapping.json", size: 1594, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _regoValidationMappingJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcf\x8e\xd3\x30\x10\xc6\xef\x7d\x8a\x51\x16\x09\x09\xed\x36\x9c\x38\xf4\xce\x11\xc4\x61\xc5\x05\x71\x98\xc6\xe3\xd4\xbb\xfe\xc7\x78\x52\xa8\x50\xde\x1d\x39\x69\x9d\x4d\xda\x6e\x11\x12\xa7\x3a\xfe\x66\x3c\xe3\xdf\x37\xf5\xef\x15\x00\x40\xf5\x26\x35\x3b\x72\x58\x6d\xa0\xda\x89\xc4\x4d\x5d\x3f\xa5\xe0\x1f\xc6\xdd\x75\xe0\xb6\x56\x8c\x5a\x1e\xde\x7f\xa8\xc7\xbd\xbb\xea\x7e\xcc\x14\x23\x96\x72\xde\x57\xb4\x46\xa1\x98\xe0\xe1\x13\xc6\x68\x7c\x7b\x0a\x51\x94\x1a\x36\x31\x4b\x39\xf0\x71\x67\x12\x68\x63\x09\x4c\x82\x2e\x91\x02\x09\xe0\x30\xc2\x7e\x3a\x41\x77\xbe\xc9\x8b\x94\x35\x8b\xbe\xed\xb0\x25\x48\x91\x1a\xa3\x4d\x93\xd6\xa5\xfa\x21\x0e\xc5\xc3\xf6\x89\x1a\x39\xed\xa2\x52\x26\x67\xa3\xfd\xc2\x21\x12\x8b\xa1\x54\x6d\x40\xa3\x4d\x74\x0c\x89\x28\x42\xec\x67\xfa\xc8\x62\x90\xd7\xef\x66\xdf\x23\x23\x26\x9d\x6b\xdd\xd5\x8a\xb4\xf1\x43\x85\x54\x0f\x1d\x94\xc0\x7e\x58\xf5\xe5\xe2\x25\x6e\x7e\xfc\xb1\xed\x45\x81\x82\xf2\x31\xcb\xf7\x73\xf1\x12\xc4\x67\x3a\xbc\x64\x28\x8c\x3e\xd9\x11\x20\x7a\xa0\x5f\xf9\x86\x68\x21\x57\x7b\x9b\x20\x75\xdb\xbc\x02\xcd\xc1\x01\x16\x98\x43\xfc\x7a\x59\xee\x22\xd8\xa2\xde\x06\x5c\x42\x5f\x07\xfd\x1a\xf0\x1b\xe0\xdd\x71\xc8\xce\x72\xfa\xd5\xe5\xaf\x7e\xea\xac\x3a\x25\x5f\xf7\x60\x3e\xc3\xd7\x6d\x20\x68\x50\xa8\x0d\x3c\x59\xb1\x3d\x40\x4b\x9e\x18\x25\x70\x02\xe3\x21\xb0\x22\x7e\xe9\x10\xcd\xcd\xc9\x41\x59\xdd\x91\x61\x08\x3f\x3d\x18\x17\x2d\x39\xf2\xf2\x9f\xcd\x61\xfa\xd1\x19\x26\x55\x6d\xe0\xdb\xb9\x27\x1e\x1d\xcd\xf1\x7e\x5f\x9a\x7b\xc3\xd5\xe1\x84\xab\xbe\x2e\x58\x7e\x46\x47\x10\x74\xc6\x50\xfe\xff\x19\x5a\x83\xd6\xe6\xdf\x48\xac\x03\xbb\x41\x9f\x9e\x8a\x25\x9c\x33\x48\x49\xf8\xf2\x98\x9c\xe7\x55\xc6\xc5\xc0\xf2\xd7\x1d\x7f\xdc\x93\x97\x0e\x2d\x4c\xc8\x61\x3c\x02\x02\x43\xc4\xe6\x39\xbf\x5a\xb2\x43\x81\xc8\x61\x6f\x14\xa5\x45\xf7\xe5\xa2\xff\x7e\x8d\x6b\xd3\x3e\xbe\x44\xab\x7e\xf5\x27\x00\x00\xff\xff\x75\x74\x59\xb0\xe3\x05\x00\x00")

func regoValidationMappingJsonBytes() ([]byte, error) {
	return bindataRead(
		_regoValidationMappingJson,
		"rego-validation-mapping.json",
	)
}

func regoValidationMappingJson() (*asset, error) {
	bytes, err := regoValidationMappingJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rego-validation-mapping.json", size: 1507, mode: os.FileMode(420), modTime: time.Unix(1533249759, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen.sh": genSh,
	"rego-abstract.in": regoAbstractIn,
	"rego-abstract.json": regoAbstractJson,
	"rego-attribute.in": regoAttributeIn,
	"rego-info.json": regoInfoJson,
	"rego-param.in": regoParamIn,
	"rego-shared-params.in": regoSharedParamsIn,
	"rego-shared-params.json": regoSharedParamsJson,
	"rego-spec.in": regoSpecIn,
	"rego-spec.json": regoSpecJson,
	"rego-type-mapping.json": regoTypeMappingJson,
	"rego-validation-mapping.json": regoValidationMappingJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"gen.sh": &bintree{genSh, map[string]*bintree{}},
	"rego-abstract.in": &bintree{regoAbstractIn, map[string]*bintree{}},
	"rego-abstract.json": &bintree{regoAbstractJson, map[string]*bintree{}},
	"rego-attribute.in": &bintree{regoAttributeIn, map[string]*bintree{}},
	"rego-info.json": &bintree{regoInfoJson, map[string]*bintree{}},
	"rego-param.in": &bintree{regoParamIn, map[string]*bintree{}},
	"rego-shared-params.in": &bintree{regoSharedParamsIn, map[string]*bintree{}},
	"rego-shared-params.json": &bintree{regoSharedParamsJson, map[string]*bintree{}},
	"rego-spec.in": &bintree{regoSpecIn, map[string]*bintree{}},
	"rego-spec.json": &bintree{regoSpecJson, map[string]*bintree{}},
	"rego-type-mapping.json": &bintree{regoTypeMappingJson, map[string]*bintree{}},
	"rego-validation-mapping.json": &bintree{regoValidationMappingJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

